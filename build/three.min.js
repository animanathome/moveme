'use strict';THREE={REVISION:"60"};Meteor.isServer&&(self={});var module;"object"===typeof module&&(module.exports=THREE);String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};THREE.extend=function(a,b){if(Object.keys)for(var c=Object.keys(b),d=0,e=c.length;d<e;d++){var f=c[d];Object.defineProperty(a,f,Object.getOwnPropertyDescriptor(b,f))}else for(f in c={}.hasOwnProperty,b)c.call(b,f)&&(a[f]=b[f]);return a};
THREE.containsElementFromArray=function(a,b){for(var c=0;c<b.length;c++)if(-1!==a.indexOf(b[c]))return!0;return!1};THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;
THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;
THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;
THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;
THREE.LuminanceAlphaFormat=1023;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){void 0!==a&&this.set(a);return this};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&--c;return c<1/6?a+6*(b-a)*c:
.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a};b=.5>=c?c*(1+b):c+b-c*b;c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(a))return a=/^rgb\((\d+),(\d+),(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(a),this.r=Math.min(100,parseInt(a[1],
10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},
copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+
this.getHex().toString(16)).slice(-6)},getHSL:function(){var a={h:0,s:0,l:0};return function(){var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a}}(),getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=
b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===
this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(){return[this.r,this.g,this.b]},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,_euler:void 0,_updateEuler:function(a){void 0!==this._euler&&this._euler.setFromQuaternion(this,void 0,!1)},get x(){return this._x},set x(a){this._x=a;this._updateEuler()},get y(){return this._y},set y(a){this._y=a;this._updateEuler()},get z(){return this._z},set z(a){this._z=a;this._updateEuler()},get w(){return this._w},set w(a){this._w=a;this._updateEuler()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=
d;this._updateEuler();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._w=a._w;this._updateEuler();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error("ERROR: Quaternion's .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2);"XYZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*
g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"YXZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):"ZXY"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"ZYX"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):"YZX"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):"XZY"===a.order&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,
this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);!1!==b&&this._updateEuler();return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this._updateEuler();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=
.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this._updateEuler();return this},inverse:function(){this.conjugate().normalize();return this},conjugate:function(){this._x*=-1;this._y*=-1;this._z*=-1;this._updateEuler();return this},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*
this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);return this},multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=
a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this._updateEuler();return this},multiplyVector3:function(a){console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,b){var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=
-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.acos(g),k=Math.sqrt(1-g*g);if(.001>Math.abs(k))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;g=Math.sin((1-b)*h)/k;h=Math.sin(b*h)/k;this._w=f*g+this._w*h;this._x=c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this._updateEuler();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a){this._x=
a[0];this._y=a[1];this._z=a[2];this._w=a[3];this._updateEuler();return this},toArray:function(){return[this._x,this._y,this._z,this._w]},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=
a.y;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);
return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/
b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a){this.x=a[0];this.y=a[1];return this},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*
b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+
a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;
this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=
b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=
a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;this.z=c*g-d*f;return this},angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){console.error("REMOVED: Vector3's setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.")},
setEulerFromQuaternion:function(a,b){console.error("REMOVED: Vector3's setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.")},getPositionFromMatrix:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();
this.x=b;this.y=c;this.z=a;return this},getColumnFromMatrix:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];return this},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};
THREE.extend(THREE.Vector3.prototype,{applyEuler:function(){var a=new THREE.Quaternion;return function(b){!1===b instanceof THREE.Euler&&console.error("ERROR: Vector3's .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");this.applyQuaternion(a.setFromEuler(b));return this}}(),applyAxisAngle:function(){var a=new THREE.Quaternion;return function(b,c){this.applyQuaternion(a.setFromAxisAngle(b,c));return this}}(),projectOnVector:function(){var a=new THREE.Vector3;
return function(b){a.copy(b).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b).multiplyScalar(2);return this.subVectors(a,this)}}()});THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},
addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},
applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,
this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(.01>Math.abs(d-g)&&.01>Math.abs(f-c)&&.01>Math.abs(k-b)){if(.1>Math.abs(d+g)&&.1>Math.abs(f+c)&&.1>Math.abs(k+b)&&.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?.01>e?(b=0,d=c=.707106781):(b=Math.sqrt(e),c=d/b,d=f/b):h>l?.01>h?(b=.707106781,
c=0,d=.707106781):(c=Math.sqrt(h),b=d/c,d=k/c):.01>l?(c=b=.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));.001>Math.abs(a)&&(a=1);this.x=(b-k)/a;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&
(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*
this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&
a.w===this.w},fromArray:function(a){this.x=a[0];this.y=a[1];this.z=a[2];this.w=a[3];return this},toArray:function(){return[this.x,this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,_quaternion:void 0,_updateQuaternion:function(){void 0!==this._quaternion&&this._quaternion.setFromEuler(this,!1)},get x(){return this._x},set x(a){this._x=a;this._updateQuaternion()},get y(){return this._y},set y(a){this._y=a;this._updateQuaternion()},get z(){return this._z},set z(a){this._z=a;this._updateQuaternion()},get order(){return this._order},set order(a){this._order=a;this._updateQuaternion()},
set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this._updateQuaternion();return this},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this._updateQuaternion();return this},setFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],f=d[4],g=d[8],h=d[1],k=d[5],l=d[9],m=d[2],p=d[6],d=d[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(c(g)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,d),this._z=
Math.atan2(-f,e)):(this._x=Math.atan2(p,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-c(l)),.99999>Math.abs(l)?(this._y=Math.atan2(g,d),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-m,e),this._z=0)):"ZXY"===b?(this._x=Math.asin(c(p)),.99999>Math.abs(p)?(this._y=Math.atan2(-m,d),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,e))):"ZYX"===b?(this._y=Math.asin(-c(m)),.99999>Math.abs(m)?(this._x=Math.atan2(p,d),this._z=Math.atan2(h,e)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===b?(this._z=
Math.asin(c(h)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-m,e)):(this._x=0,this._y=Math.atan2(g,d))):"XZY"===b?(this._z=Math.asin(-c(f)),.99999>Math.abs(f)?(this._x=Math.atan2(p,k),this._y=Math.atan2(g,e)):(this._x=Math.atan2(-l,d),this._y=0)):console.warn("WARNING: Euler.setFromRotationMatrix() given unsupported order: "+b);this._order=b;this._updateQuaternion();return this},setFromQuaternion:function(a,b,c){function d(a){return Math.min(Math.max(a,-1),1)}var e=a.x*a.x,f=a.y*
a.y,g=a.z*a.z,h=a.w*a.w;b=b||this._order;"XYZ"===b?(this._x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-e-f+g),this._y=Math.asin(d(2*(a.x*a.z+a.y*a.w))),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+e-f-g)):"YXZ"===b?(this._x=Math.asin(d(2*(a.x*a.w-a.y*a.z))),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-e-f+g),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-e+f-g)):"ZXY"===b?(this._x=Math.asin(d(2*(a.x*a.w+a.y*a.z))),this._y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-e-f+g),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-e+f-g)):"ZYX"===b?
(this._x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-e-f+g),this._y=Math.asin(d(2*(a.y*a.w-a.x*a.z))),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+e-f-g)):"YZX"===b?(this._x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-e+f-g),this._y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+e-f-g),this._z=Math.asin(d(2*(a.x*a.y+a.z*a.w)))):"XZY"===b?(this._x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-e+f-g),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+e-f-g),this._z=Math.asin(d(2*(a.z*a.w-a.x*a.y)))):console.warn("WARNING: Euler.setFromQuaternion() given unsupported order: "+
b);this._order=b;!1!==c&&this._updateQuaternion();return this},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);this.setFromQuaternion(a,b)}}(),fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this._updateQuaternion();return this},toArray:function(){return[this._x,this._y,this._z,this._order]},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},clone:function(){return new THREE.Euler(this._x,
this._y,this._z,this._order)}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,
b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);
this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(.5);
this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);
this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a){return new THREE.Vector2((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},addPoint:function(a){a.x<this.min.x?this.min.x=a.x:a.x>this.max.x&&(this.max.x=a.x);a.y<this.min.y?this.min.y=a.y:a.y>this.max.y&&(this.max.y=a.y);a.z<this.min.z?this.min.z=a.z:a.z>this.max.z&&(this.max.z=a.z)},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var b=1,c=a.length;b<c;b++)this.addPoint(a[b])}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=
new THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);this.makeEmpty();b.traverse(function(b){if(void 0!==b.geometry&&void 0!==b.geometry.vertices)for(var e=b.geometry.vertices,f=0,g=e.length;f<g;f++)a.copy(e[f]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);
this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a){return new THREE.Vector3((a.x-this.min.x)/(this.max.x-this.min.x),
(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=
new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,
this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);
this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Matrix3=function(a,b,c,d,e,f,g,h,k){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,f||0,g||0,h||0,void 0!==k?k:1)};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[3]=b;l[6]=c;l[1]=d;l[4]=e;l[7]=f;l[2]=g;l[5]=h;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,
b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/
c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}};
THREE.Matrix4=function(a,b,c,d,e,f,g,h,k,l,m,p,q,u,t,r){var w=this.elements=new Float32Array(16);w[0]=void 0!==a?a:1;w[4]=b||0;w[8]=c||0;w[12]=d||0;w[1]=e||0;w[5]=void 0!==f?f:1;w[9]=g||0;w[13]=h||0;w[2]=k||0;w[6]=l||0;w[10]=void 0!==m?m:1;w[14]=p||0;w[3]=q||0;w[7]=u||0;w[11]=t||0;w[15]=void 0!==r?r:1};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,m,p,q,u,t,r){var w=this.elements;w[0]=a;w[4]=b;w[8]=c;w[12]=d;w[1]=e;w[5]=f;w[9]=g;w[13]=h;w[2]=k;w[6]=l;w[10]=m;w[14]=p;w[3]=q;w[7]=u;w[11]=t;w[15]=r;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){console.warn("DEPRECATED: Matrix4's .extractPosition() has been renamed to .copyPosition().");
return this.copyPosition(a)},copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements;b=b.elements;var d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){!1===
a instanceof THREE.Euler&&console.error("ERROR: Matrix's .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*h;var k=f*e,l=c*h,m=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-m*d;b[9]=-c*g;b[2]=m-a*d;b[6]=l+k*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,k=g*e,l=d*h,m=d*e,b[0]=a+m*c,b[4]=l*c-k,b[8]=
f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=m+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*h,k=g*e,l=d*h,m=d*e,b[0]=a-m*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=m-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,k=f*e,l=c*h,m=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+m,b[1]=g*e,b[5]=m*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(a=f*g,k=f*d,l=c*g,m=c*d,b[0]=g*h,b[4]=m-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-m*e):"XZY"===a.order&&(a=f*g,k=f*d,l=c*g,m=c*d,b[0]=
g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+m,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=m*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){console.warn("DEPRECATED: Matrix4's .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.");return this.makeRotationFromQuaternion(a)},makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*
h,c=c*k,m=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(m+e);b[4]=l-f;b[8]=c+h;b[1]=l+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+m);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var g=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=
a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],k=c[12],l=c[1],m=c[5],p=c[9],q=c[13],u=c[2],t=c[6],r=c[10],w=c[14],x=c[3],v=c[7],z=c[11],
c=c[15],F=d[0],J=d[4],C=d[8],A=d[12],y=d[1],B=d[5],K=d[9],M=d[13],S=d[2],P=d[6],X=d[10],H=d[14],E=d[3],G=d[7],U=d[11],d=d[15];e[0]=f*F+g*y+h*S+k*E;e[4]=f*J+g*B+h*P+k*G;e[8]=f*C+g*K+h*X+k*U;e[12]=f*A+g*M+h*H+k*d;e[1]=l*F+m*y+p*S+q*E;e[5]=l*J+m*B+p*P+q*G;e[9]=l*C+m*K+p*X+q*U;e[13]=l*A+m*M+p*H+q*d;e[2]=u*F+t*y+r*S+w*E;e[6]=u*J+t*B+r*P+w*G;e[10]=u*C+t*K+r*X+w*U;e[14]=u*A+t*M+r*H+w*d;e[3]=x*F+v*y+z*S+c*E;e[7]=x*J+v*B+z*P+c*G;e[11]=x*C+v*K+z*X+c*U;e[15]=x*A+v*M+z*H+c*d;return this},multiplyToArray:function(a,
b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){console.warn("DEPRECATED: Matrix4's .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
a.transformDirection(this)},crossVector:function(a){console.warn("DEPRECATED: Matrix4's .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],l=a[2],m=a[6],p=a[10],q=a[14];return a[3]*(+e*h*m-d*k*m-e*g*p+c*k*p+d*g*q-c*h*q)+a[7]*(+b*h*q-b*k*p+e*f*p-d*f*q+d*k*l-e*h*l)+a[11]*(+b*k*m-b*g*q-e*f*m+c*f*q+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*m+b*g*p+d*f*m-c*f*
p+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;
a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){console.warn("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;
b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],g=d[8],h=d[12],k=d[1],l=d[5],m=d[9],p=d[13],q=d[2],u=d[6],t=d[10],r=d[14],w=d[3],x=d[7],v=d[11],d=d[15];c[0]=m*r*x-p*t*x+p*u*v-l*r*v-m*u*d+l*t*d;c[4]=h*t*x-g*r*x-h*u*v+f*r*v+g*u*d-f*t*d;c[8]=g*p*x-h*m*x+h*l*v-f*p*v-g*l*d+f*m*d;c[12]=h*m*u-g*p*u-h*l*t+f*p*t+g*l*r-f*m*r;c[1]=p*t*w-m*r*w-p*q*v+k*r*v+m*q*d-k*t*d;c[5]=g*r*w-h*t*w+h*q*v-e*r*v-g*q*d+e*t*d;c[9]=h*m*w-g*p*w-h*k*v+e*p*v+g*k*d-
e*m*d;c[13]=g*p*q-h*m*q+h*k*t-e*p*t-g*k*r+e*m*r;c[2]=l*r*w-p*u*w+p*q*x-k*r*x-l*q*d+k*u*d;c[6]=h*u*w-f*r*w-h*q*x+e*r*x+f*q*d-e*u*d;c[10]=f*p*w-h*l*w+h*k*x-e*p*x-f*k*d+e*l*d;c[14]=h*l*q-f*p*q-h*k*u+e*p*u+f*k*r-e*l*r;c[3]=m*u*w-l*t*w-m*q*x+k*t*x+l*q*v-k*u*v;c[7]=f*t*w-g*u*w+g*q*x-e*t*x-f*q*v+e*u*v;c[11]=g*l*w-f*m*w-g*k*x+e*m*x+f*k*v-e*l*v;c[15]=f*m*q-g*l*q+g*k*u-e*m*u-f*k*t+e*l*t;c=e*c[0]+k*c[4]+q*c[8]+w*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");
this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(a){console.warn("DEPRECATED: Matrix4's .translate() has been removed.")},rotateX:function(a){console.warn("DEPRECATED: Matrix4's .rotateX() has been removed.")},rotateY:function(a){console.warn("DEPRECATED: Matrix4's .rotateY() has been removed.")},rotateZ:function(a){console.warn("DEPRECATED: Matrix4's .rotateZ() has been removed.")},rotateByAxis:function(a,b){console.warn("DEPRECATED: Matrix4's .rotateByAxis() has been removed.")},
scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,
0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,
0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();c.x=f[12];c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=
f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.degToRad(.5*a));var e=-a;return this.makeFrustum(e*
b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=b-a,k=c-d,l=f-e;g[0]=2/h;g[4]=0;g[8]=0;g[12]=-((b+a)/h);g[1]=0;g[5]=2/k;g[9]=0;g[13]=-((c+d)/k);g[2]=0;g[6]=0;g[10]=-2/l;g[14]=-((f+e)/l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],
a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);
var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceTo(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceTo(b)}}(),distanceSqToSegment:function(a,b,c,d){var e=a.clone().add(b).multiplyScalar(.5),f=b.clone().sub(a).normalize(),g=.5*a.distanceTo(b),h=
this.origin.clone().sub(e);a=-this.direction.dot(f);b=h.dot(this.direction);var k=-h.dot(f),l=h.lengthSq(),m=Math.abs(1-a*a),p,q;0<=m?(h=a*k-b,p=a*b-k,q=g*m,0<=h?p>=-q?p<=q?(g=1/m,h*=g,p*=g,a=h*(h+a*p+2*b)+p*(a*h+p+2*k)+l):(p=g,h=Math.max(0,-(a*p+b)),a=-h*h+p*(p+2*k)+l):(p=-g,h=Math.max(0,-(a*p+b)),a=-h*h+p*(p+2*k)+l):p<=-q?(h=Math.max(0,-(-a*g+b)),p=0<h?-g:Math.min(Math.max(-g,-k),g),a=-h*h+p*(p+2*k)+l):p<=q?(h=0,p=Math.min(Math.max(-g,-k),g),a=p*(p+2*k)+l):(h=Math.max(0,-(a*g+b)),p=0<h?g:Math.min(Math.max(-g,
-k),g),a=-h*h+p*(p+2*k)+l)):(p=0<a?-g:g,h=Math.max(0,-(a*p+b)),a=-h*h+p*(p+2*k)+l);c&&c.copy(this.direction.clone().multiplyScalar(h).add(this.origin));d&&d.copy(f.clone().multiplyScalar(p).add(e));return a},isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},isIntersectionPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0==b)return 0==a.distanceToPoint(this.origin)?
0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},isIntersectionBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=
a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==d)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<
f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},
clone:function(){return(new THREE.Ray).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=
this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);
return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};
THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],m=c[8],p=c[9],q=c[10],u=c[11],t=c[12],r=c[13],w=c[14],c=c[15];b[0].setComponents(f-a,l-g,u-m,c-t).normalize();b[1].setComponents(f+
a,l+g,u+m,c+t).normalize();b[2].setComponents(f+d,l+h,u+p,c+r).normalize();b[3].setComponents(f-d,l-h,u-p,c-r).normalize();b[4].setComponents(f-e,l-k,u-q,c-w).normalize();b[5].setComponents(f+e,l+k,u+q,c+w).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,
c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),
containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){d=d||(new THREE.Matrix3).getNormalMatrix(c);var e=a.copy(this.normal).applyMatrix3(d),f=this.coplanarPoint(b);f.applyMatrix4(c);this.setFromNormalAndCoplanarPoint(e,f);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};
THREE.Math={PI2:2*Math.PI,generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,
b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},rad:function(){return 57.29577951308232}(),
degToRad:function(){var a=Math.PI/180;return function(b){return b*a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}()};
THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,m,p,q;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:f+
2;l=this.points[c[0]];m=this.points[c[1]];p=this.points[c[2]];q=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,m.x,p.x,q.x,g,h,k);d.y=b(l.y,m.y,p.y,q.y,g,h,k);d.z=b(l.z,m.z,p.z,q.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,l=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=l.chunks[b]-l.chunks[b-1];g=Math.ceil(a*c/l.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),h.push(k.copy(d).clone());
h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0==l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.UV=function(a,b){console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=Date.now(),a=.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners,d=c[a].indexOf(b);-1!==d&&c[a].splice(d,1)}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=0,d=b.length;c<d;c++)b[c].call(this,a)}}}};
(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray;new a.Plane;new a.Vector3;var d=new a.Vector3,e=new a.Matrix4,f=function(a,b){return a.distance-b.distance},g=new a.Vector3,h=new a.Vector3,k=new a.Vector3,l=function(f,m,u){if(f instanceof a.Particle){d.getPositionFromMatrix(f.matrixWorld);var t=m.ray.distanceToPoint(d);if(t>f.scale.x)return u;u.push({distance:t,point:f.position,face:null,object:f})}else if(f instanceof
a.LOD)d.getPositionFromMatrix(f.matrixWorld),t=m.ray.origin.distanceTo(d),l(f.getObjectForDistance(t),m,u);else if(f instanceof a.Mesh){var r=f.geometry;null===r.boundingSphere&&r.computeBoundingSphere();b.copy(r.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===m.ray.isIntersectionSphere(b))return u;e.getInverse(f.matrixWorld);c.copy(m.ray).applyMatrix4(e);if(null!==r.boundingBox&&!1===c.isIntersectionBox(r.boundingBox))return u;var w=r.vertices;if(r instanceof a.BufferGeometry){var x=f.material;
if(void 0===x||!1===r.dynamic)return u;var v,z,F=m.precision;if(void 0!==r.attributes.index)for(var w=r.offsets,J=r.attributes.index.array,C=r.attributes.position.array,A=r.offsets.length,y=r.attributes.index.array.length/3,y=0;y<A;++y)for(var t=w[y].start,B=w[y].index,r=t,K=t+w[y].count;r<K;r+=3)t=B+J[r],v=B+J[r+1],z=B+J[r+2],g.set(C[3*t],C[3*t+1],C[3*t+2]),h.set(C[3*v],C[3*v+1],C[3*v+2]),k.set(C[3*z],C[3*z+1],C[3*z+2]),v=c.intersectTriangle(g,h,k,x.side!==a.DoubleSide),null!==v&&(v.applyMatrix4(f.matrixWorld),
t=m.ray.origin.distanceTo(v),t<F||t<m.near||t>m.far||u.push({distance:t,point:v,face:null,faceIndex:null,object:f}));else for(C=r.attributes.position.array,y=r.attributes.position.array.length,r=0;r<y;r+=3)t=r,v=r+1,z=r+2,g.set(C[3*t],C[3*t+1],C[3*t+2]),h.set(C[3*v],C[3*v+1],C[3*v+2]),k.set(C[3*z],C[3*z+1],C[3*z+2]),v=c.intersectTriangle(g,h,k,x.side!==a.DoubleSide),null!==v&&(v.applyMatrix4(f.matrixWorld),t=m.ray.origin.distanceTo(v),t<F||t<m.near||t>m.far||u.push({distance:t,point:v,face:null,faceIndex:null,
object:f}))}else if(r instanceof a.Geometry)for(J=f.material instanceof a.MeshFaceMaterial,C=!0===J?f.material.materials:null,F=m.precision,A=0,y=r.faces.length;A<y;A++)B=r.faces[A],x=!0===J?C[B.materialIndex]:f.material,void 0!==x&&(t=w[B.a],v=w[B.b],z=w[B.c],v=c.intersectTriangle(t,v,z,x.side!==a.DoubleSide),null!==v&&(v.applyMatrix4(f.matrixWorld),t=m.ray.origin.distanceTo(v),t<F||t<m.near||t>m.far||u.push({distance:t,point:v,face:B,faceIndex:A,object:f})))}else if(f instanceof a.Line){F=m.linePrecision;
x=F*F;r=f.geometry;null===r.boundingSphere&&r.computeBoundingSphere();b.copy(r.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===m.ray.isIntersectionSphere(b))return u;e.getInverse(f.matrixWorld);c.copy(m.ray).applyMatrix4(e);w=r.vertices;F=w.length;v=new a.Vector3;z=new a.Vector3;y=f.type===a.LineStrip?1:2;for(r=0;r<F-1;r+=y)c.distanceSqToSegment(w[r],w[r+1],z,v)>x||(t=c.origin.distanceTo(z),t<m.near||t>m.far||u.push({distance:t,point:v.clone().applyMatrix4(f.matrixWorld),face:null,faceIndex:null,
object:f}))}},m=function(a,b,c){a=a.getDescendants();for(var d=0,e=a.length;d<e;d++)l(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.linePrecision=1;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b)};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&m(a,this,c);l(a,this,c);c.sort(f);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)l(a[d],this,c),!0===b&&m(a[d],this,c);c.sort(f);return c}})(THREE);
THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.parent=void 0;this.children=[];this.animCurves=[];this.type=this.tag=void 0;this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Euler;this.quaternion=new THREE.Quaternion;this.scale=new THREE.Vector3(1,1,1);this.rotation._quaternion=this.quaternion;this.quaternion._euler=this.rotation;this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;
this.matrixWorld=new THREE.Matrix4;this.visible=this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.userData={}};
THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){console.warn("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");return this.rotation.order},set eulerOrder(a){console.warn("DEPRECATED: Object3D's .eulerOrder has been moved to Object3D's .rotation.order.");this.rotation.order=a},get useQuaternion(){console.warn("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){console.warn("DEPRECATED: Object3D's .useQuaternion has been removed. The library now uses quaternions by default.")},
applyMatrix:function(){var a=new THREE.Matrix4;return function(b){this.matrix.multiplyMatrices(b,this.matrix);this.position.getPositionFromMatrix(this.matrix);this.scale.getScaleFromMatrix(this.matrix);a.extractRotation(this.matrix);this.quaternion.setFromRotationMatrix(a)}}(),setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},
setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,
b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b);a.applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this}}(),translate:function(a,b){console.warn("DEPRECATED: Object3D's .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=
new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),
add:function(a){if(a===this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;a.dispatchEvent({type:"added"});this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;a.dispatchEvent({type:"removed"});this.children.splice(b,1);for(b=this;void 0!==
b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getObjectById:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.id===a||!0===b&&(e=e.getObjectById(a,b),void 0!==e))return e}},getObjectByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getObjectByName(a,b),void 0!==
e))return e}},getChildByName:function(a,b){console.warn("DEPRECATED: Object3D's .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a,b)},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===
this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.quaternion.copy(this.quaternion);
a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());
return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;
THREE.Projector=function(){function a(){if(k===m){var a=new THREE.RenderableVertex;l.push(a);m++;k++;return a}return l[k++]}function b(a,b){return a.z!==b.z?b.z-a.z:a.id!==b.id?a.id-b.id:0}function c(a,b){var c=0,d=1,e=a.z+a.w,f=b.z+b.w,g=-a.z+a.w,h=-b.z+b.w;if(0<=e&&0<=f&&0<=g&&0<=h)return!0;if(0>e&&0>f||0>g&&0>h)return!1;0>e?c=Math.max(c,e/(e-f)):0>f&&(d=Math.min(d,e/(e-f)));0>g?c=Math.max(c,g/(g-h)):0>h&&(d=Math.min(d,g/(g-h)));if(d<c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var d,e,f=[],g=
0,h,k,l=[],m=0,p,q,u=[],t=0,r,w,x=[],v=0,z,F,J=[],C=0,A={objects:[],sprites:[],lights:[],elements:[]},y=new THREE.Vector3,B=new THREE.Vector4,K=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),M=new THREE.Box3,S=Array(3),P=new THREE.Matrix4,X=new THREE.Matrix4,H,E=new THREE.Matrix4,G=new THREE.Matrix3,U=new THREE.Matrix3,O=new THREE.Vector3,V=new THREE.Frustum,ha=new THREE.Vector4,ma=new THREE.Vector4;this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);
X.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(X)};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);X.multiplyMatrices(b.matrixWorld,b.projectionMatrixInverse);return a.applyProjection(X)};this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,c)};var ga=function(a){if(e===g){var b=new THREE.RenderableObject;
f.push(b);g++;e++;d=b}else d=f[e++];d.id=a.id;d.object=a;null!==a.renderDepth?d.z=a.renderDepth:(y.getPositionFromMatrix(a.matrixWorld),y.applyProjection(X),d.z=y.z);return d},D=function(a){if(!1!==a.visible){a instanceof THREE.Light?A.lights.push(a):a instanceof THREE.Mesh||a instanceof THREE.Line?!1!==a.frustumCulled&&!0!==V.intersectsObject(a)||A.objects.push(ga(a)):(a instanceof THREE.Sprite||a instanceof THREE.Particle)&&A.sprites.push(ga(a));for(var b=0,c=a.children.length;b<c;b++)D(a.children[b])}};
this.projectScene=function(d,f,g,m){var y=!1,ca,na,Y,ba,W,Q,R,ka,ea,ga,Fa,Ja;F=w=q=0;A.elements.length=0;!0===d.autoUpdate&&d.updateMatrixWorld();void 0===f.parent&&f.updateMatrixWorld();P.copy(f.matrixWorldInverse.getInverse(f.matrixWorld));X.multiplyMatrices(f.projectionMatrix,P);U.getNormalMatrix(P);V.setFromMatrix(X);e=0;A.objects.length=0;A.sprites.length=0;A.lights.length=0;D(d);!0===g&&A.objects.sort(b);d=0;for(g=A.objects.length;d<g;d++)if(R=A.objects[d].object,H=R.matrixWorld,k=0,R instanceof
THREE.Mesh){ka=R.geometry;Y=ka.vertices;ea=ka.faces;ka=ka.faceVertexUvs;G.getNormalMatrix(H);Fa=R.material instanceof THREE.MeshFaceMaterial;Ja=!0===Fa?R.material:null;ca=0;for(na=Y.length;ca<na;ca++){h=a();h.positionWorld.copy(Y[ca]).applyMatrix4(H);h.positionScreen.copy(h.positionWorld).applyMatrix4(X);var qa=1/h.positionScreen.w;h.positionScreen.x*=qa;h.positionScreen.y*=qa;h.positionScreen.z*=qa;h.visible=!(-1>h.positionScreen.x||1<h.positionScreen.x||-1>h.positionScreen.y||1<h.positionScreen.y||
-1>h.positionScreen.z||1<h.positionScreen.z)}Y=0;for(ca=ea.length;Y<ca;Y++)if(na=ea[Y],qa=!0===Fa?Ja.materials[na.materialIndex]:R.material,void 0!==qa&&(Q=qa.side,ba=l[na.a],W=l[na.b],ga=l[na.c],S[0]=ba.positionScreen,S[1]=W.positionScreen,S[2]=ga.positionScreen,!0===ba.visible||!0===W.visible||!0===ga.visible||K.isIntersectionBox(M.setFromPoints(S))))if(y=0>(ga.positionScreen.x-ba.positionScreen.x)*(W.positionScreen.y-ba.positionScreen.y)-(ga.positionScreen.y-ba.positionScreen.y)*(W.positionScreen.x-
ba.positionScreen.x),Q===THREE.DoubleSide||y===(Q===THREE.FrontSide)){if(q===t){var za=new THREE.RenderableFace3;u.push(za);t++;q++;p=za}else p=u[q++];p.id=R.id;p.v1.copy(ba);p.v2.copy(W);p.v3.copy(ga);p.normalModel.copy(na.normal);!1!==y||Q!==THREE.BackSide&&Q!==THREE.DoubleSide||p.normalModel.negate();p.normalModel.applyMatrix3(G).normalize();p.normalModelView.copy(p.normalModel).applyMatrix3(U);p.centroidModel.copy(na.centroid).applyMatrix4(H);ga=na.vertexNormals;ba=0;for(W=Math.min(ga.length,
3);ba<W;ba++)za=p.vertexNormalsModel[ba],za.copy(ga[ba]),!1!==y||Q!==THREE.BackSide&&Q!==THREE.DoubleSide||za.negate(),za.applyMatrix3(G).normalize(),p.vertexNormalsModelView[ba].copy(za).applyMatrix3(U);p.vertexNormalsLength=ga.length;y=0;for(ba=Math.min(ka.length,3);y<ba;y++)if(ga=ka[y][Y],void 0!==ga)for(W=0,Q=ga.length;W<Q;W++)p.uvs[y][W]=ga[W];p.color=na.color;p.material=qa;O.copy(p.centroidModel).applyProjection(X);p.z=O.z;A.elements.push(p)}}else if(R instanceof THREE.Line)for(E.multiplyMatrices(X,
H),Y=R.geometry.vertices,ba=a(),ba.positionScreen.copy(Y[0]).applyMatrix4(E),ea=R.type===THREE.LinePieces?2:1,ca=1,na=Y.length;ca<na;ca++)ba=a(),ba.positionScreen.copy(Y[ca]).applyMatrix4(E),0<(ca+1)%ea||(W=l[k-2],ha.copy(ba.positionScreen),ma.copy(W.positionScreen),!0===c(ha,ma)&&(ha.multiplyScalar(1/ha.w),ma.multiplyScalar(1/ma.w),w===v?(ka=new THREE.RenderableLine,x.push(ka),v++,w++,r=ka):r=x[w++],r.id=R.id,r.v1.positionScreen.copy(ha),r.v2.positionScreen.copy(ma),r.z=Math.max(ha.z,ma.z),r.material=
R.material,R.material.vertexColors===THREE.VertexColors&&(r.vertexColors[0].copy(R.geometry.colors[ca]),r.vertexColors[1].copy(R.geometry.colors[ca-1])),A.elements.push(r)));d=0;for(g=A.sprites.length;d<g;d++)R=A.sprites[d].object,H=R.matrixWorld,R instanceof THREE.Particle&&(B.set(H.elements[12],H.elements[13],H.elements[14],1),B.applyMatrix4(X),qa=1/B.w,B.z*=qa,0<B.z&&1>B.z&&(F===C?(ea=new THREE.RenderableParticle,J.push(ea),C++,F++,z=ea):z=J[F++],z.id=R.id,z.x=B.x*qa,z.y=B.y*qa,z.z=B.z,z.object=
R,z.rotation=R.rotation.z,z.scale.x=R.scale.x*Math.abs(z.x-(B.x+f.projectionMatrix.elements[0])/(B.w+f.projectionMatrix.elements[12])),z.scale.y=R.scale.y*Math.abs(z.y-(B.y+f.projectionMatrix.elements[5])/(B.w+f.projectionMatrix.elements[13])),z.material=R.material,A.elements.push(z)));!0===m&&A.elements.sort(b);return A}};
THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,f,g){return new THREE.Face3(a,b,c,e,f,g)};
THREE.Geometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=this.normalsNeedUpdate=
this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var f=0,g=e.vertexNormals.length;f<g;f++)e.vertexNormals[f].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox();this.boundingSphere instanceof
THREE.Sphere&&this.computeBoundingSphere()},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.centroid.set(0,0,0),c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,
g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]}else for(e=this.__tmpVertices,b=0,c=this.vertices.length;b<c;b++)e[b].set(0,0,0);if(a){var f,g,h=new THREE.Vector3,k=new THREE.Vector3;new THREE.Vector3;
new THREE.Vector3;new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],a=this.vertices[d.a],f=this.vertices[d.b],g=this.vertices[d.c],h.subVectors(g,f),k.subVectors(a,f),h.cross(k),e[d.a].add(h),e[d.b].add(h),e[d.c].add(h)}else for(b=0,c=this.faces.length;b<c;b++)d=this.faces[b],e[d.a].add(d.normal),e[d.b].add(d.normal),e[d.c].add(d.normal);b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),
d.vertexNormals[2].copy(e[d.c])},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=
this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=this.morphNormals[a].vertexNormals,h,k;c=0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();
c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,g,h,k,l,m,p,q,u,t,r,w,x=[],v=[];c=new THREE.Vector3;var z=new THREE.Vector3,F=new THREE.Vector3,J=new THREE.Vector3,C=new THREE.Vector3;
a=0;for(b=this.vertices.length;a<b;a++)x[a]=new THREE.Vector3,v[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,w=e.b,e=e.c,g=this.vertices[d],h=this.vertices[w],k=this.vertices[e],l=f[0],m=f[1],p=f[2],f=h.x-g.x,q=k.x-g.x,u=h.y-g.y,t=k.y-g.y,h=h.z-g.z,g=k.z-g.z,k=m.x-l.x,r=p.x-l.x,m=m.y-l.y,l=p.y-l.y,p=1/(k*l-r*m),c.set((l*f-m*q)*p,(l*u-m*t)*p,(l*h-m*g)*p),z.set((k*q-r*f)*p,(k*t-r*u)*p,(k*g-r*h)*p),x[d].add(c),x[w].add(c),x[e].add(c),v[d].add(z),
v[w].add(z),v[e].add(z);z=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++)for(e=this.faces[a],c=0;c<Math.min(e.vertexNormals.length,3);c++)C.copy(e.vertexNormals[c]),d=e[z[c]],w=x[d],F.copy(w),F.sub(C.multiplyScalar(C.dot(w))).normalize(),J.crossVectors(e.vertexNormals[c],w),d=J.dot(v[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(F.x,F.y,F.z,d);this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=
a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;this.__tmpVertices=void 0;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*
e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(this.faces.splice(f,1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(f,1);f=this.vertices.length-b.length;this.vertices=b;return f},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<
d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];c=0;for(d=b.length;c<d;c++){for(var e=b[c],f=[],g=0,h=e.length;g<h;g++)f.push(new THREE.Vector2(e[g].x,e[g].y));a.faceVertexUvs[0].push(f)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;
THREE.BufferGeometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.attributes={};this.dynamic=!0;this.offsets=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&((new THREE.Matrix3).getNormalMatrix(a).multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var a=
this.attributes.position.array;if(a){var b=this.boundingBox,c,d,e;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var f=3,g=a.length;f<g;f+=3)c=a[f],d=a[f+1],e=a[f+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z?b.min.z=e:e>b.max.z&&(b.max.z=e)}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===
this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){for(var d=this.boundingSphere.center,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),a.addPoint(b);a.center(d);for(var g=0,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),g=Math.max(g,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g)}}}(),computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal=
{itemSize:3,array:new Float32Array(a)};else for(a=0,b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=0;var e=this.attributes.position.array,f=this.attributes.normal.array,g,h,k,l,m,p,q=new THREE.Vector3,u=new THREE.Vector3,t=new THREE.Vector3,r=new THREE.Vector3,w=new THREE.Vector3;if(this.attributes.index){var x=this.attributes.index.array,v=this.offsets;c=0;for(d=v.length;c<d;++c){b=v[c].start;g=v[c].count;var z=v[c].index;a=b;for(b+=g;a<b;a+=3)g=z+x[a],h=z+x[a+1],k=
z+x[a+2],l=e[3*g],m=e[3*g+1],p=e[3*g+2],q.set(l,m,p),l=e[3*h],m=e[3*h+1],p=e[3*h+2],u.set(l,m,p),l=e[3*k],m=e[3*k+1],p=e[3*k+2],t.set(l,m,p),r.subVectors(t,u),w.subVectors(q,u),r.cross(w),f[3*g]+=r.x,f[3*g+1]+=r.y,f[3*g+2]+=r.z,f[3*h]+=r.x,f[3*h+1]+=r.y,f[3*h+2]+=r.z,f[3*k]+=r.x,f[3*k+1]+=r.y,f[3*k+2]+=r.z}}else for(a=0,b=e.length;a<b;a+=9)l=e[a],m=e[a+1],p=e[a+2],q.set(l,m,p),l=e[a+3],m=e[a+4],p=e[a+5],u.set(l,m,p),l=e[a+6],m=e[a+7],p=e[a+8],t.set(l,m,p),r.subVectors(t,u),w.subVectors(q,u),r.cross(w),
f[a]=r.x,f[a+1]=r.y,f[a+2]=r.z,f[a+3]=r.x,f[a+4]=r.y,f[a+5]=r.z,f[a+6]=r.x,f[a+7]=r.y,f[a+8]=r.z;this.normalizeNormals();this.normalsNeedUpdate=!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a,b,c){p=d[3*a];q=d[3*a+1];u=d[3*a+2];t=d[3*b];r=d[3*b+1];w=d[3*b+2];x=d[3*c];v=d[3*c+1];z=d[3*c+2];F=f[2*a];J=f[2*a+1];C=f[2*b];A=f[2*b+
1];y=f[2*c];B=f[2*c+1];K=t-p;M=x-p;S=r-q;P=v-q;X=w-u;H=z-u;E=C-F;G=y-F;U=A-J;O=B-J;V=1/(E*O-G*U);ha.set((O*K-U*M)*V,(O*S-U*P)*V,(O*X-U*H)*V);ma.set((E*M-G*K)*V,(E*P-G*S)*V,(E*H-G*X)*V);k[a].add(ha);k[b].add(ha);k[c].add(ha);l[a].add(ma);l[b].add(ma);l[c].add(ma)}function b(a){Y.x=e[3*a];Y.y=e[3*a+1];Y.z=e[3*a+2];ba.copy(Y);Q=k[a];ca.copy(Q);ca.sub(Y.multiplyScalar(Y.dot(Q))).normalize();na.crossVectors(ba,Q);R=na.dot(l[a]);W=0>R?-1:1;h[4*a]=ca.x;h[4*a+1]=ca.y;h[4*a+2]=ca.z;h[4*a+3]=W}if(void 0===
this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var c=this.attributes.index.array,d=this.attributes.position.array,e=this.attributes.normal.array,f=this.attributes.uv.array,g=d.length/3;void 0===this.attributes.tangent&&(this.attributes.tangent={itemSize:4,array:new Float32Array(4*g)});for(var h=this.attributes.tangent.array,
k=[],l=[],m=0;m<g;m++)k[m]=new THREE.Vector3,l[m]=new THREE.Vector3;var p,q,u,t,r,w,x,v,z,F,J,C,A,y,B,K,M,S,P,X,H,E,G,U,O,V,ha=new THREE.Vector3,ma=new THREE.Vector3,ga,D,fa,I,da,la=this.offsets,m=0;for(D=la.length;m<D;++m){ga=la[m].start;fa=la[m].count;var Ba=la[m].index,g=ga;for(ga+=fa;g<ga;g+=3)fa=Ba+c[g],I=Ba+c[g+1],da=Ba+c[g+2],a(fa,I,da)}var ca=new THREE.Vector3,na=new THREE.Vector3,Y=new THREE.Vector3,ba=new THREE.Vector3,W,Q,R,m=0;for(D=la.length;m<D;++m)for(ga=la[m].start,fa=la[m].count,
Ba=la[m].index,g=ga,ga+=fa;g<ga;g+=3)fa=Ba+c[g],I=Ba+c[g+1],da=Ba+c[g+2],b(fa),b(I),b(da);this.tangentsNeedUpdate=this.hasTangents=!0}},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);
THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(a){void 0===a&&(a=new THREE.Camera);THREE.Object3D.prototype.clone.call(this,a);a.matrixWorldInverse.copy(this.matrixWorldInverse);a.projectionMatrix.copy(this.projectionMatrix);a.projectionMatrixInverse.copy(this.projectionMatrixInverse);return a};
THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.zoom=1;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};
THREE.OrthographicCamera.prototype.clone=function(){var a=new THREE.OrthographicCamera;THREE.Camera.prototype.clone.call(this,a);a.left=this.left;a.right=this.right;a.top=this.top;a.bottom=this.bottom;a.near=this.near;a.far=this.far;return a};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.zoom=1;this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};
THREE.PerspectiveCamera.prototype.clone=function(){var a=new THREE.PerspectiveCamera;THREE.Camera.prototype.clone.call(this,a);a.fov=this.fov;a.aspect=this.aspect;a.near=this.near;a.far=this.far;return a};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};
THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};
THREE.AreaLight=function(a,b){THREE.Light.call(this,a);this.normal=new THREE.Vector3(0,-1,0);this.right=new THREE.Vector3(1,0,0);this.intensity=void 0!==b?b:1;this.height=this.width=1;this.constantAttenuation=1.5;this.linearAttenuation=.5;this.quadraticAttenuation=.1};THREE.AreaLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=new THREE.Vector3(0,
0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,.99,.998];this.shadowCascadeFarZ=[.99,.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);
THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.HemisphereLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);
THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;return a};
THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=
this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;return a};
THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,b){var e=new Image;e.onload=function(){if(c(this.width)&&c(this.height))a.image=this;else{var b=d(this.width),e=d(this.height);a.image.width=b;a.image.height=e;a.image.getContext("2d").drawImage(this,0,0,b,e)}a.needsUpdate=!0};e.crossOrigin=h.crossOrigin;e.src=b}function f(a,c,d,f,g,h,k){var l=/\.dds$/i.test(d),m=b+"/"+d;if(l){var F=THREE.ImageUtils.loadCompressedTexture(m);a[c]=F}else F=document.createElement("canvas"),
a[c]=new THREE.Texture(F);a[c].sourceFile=d;f&&(a[c].repeat.set(f[0],f[1]),1!==f[0]&&(a[c].wrapS=THREE.RepeatWrapping),1!==f[1]&&(a[c].wrapT=THREE.RepeatWrapping));g&&a[c].offset.set(g[0],g[1]);h&&(d={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==d[h[0]]&&(a[c].wrapS=d[h[0]]),void 0!==d[h[1]]&&(a[c].wrapT=d[h[1]]));k&&(a[c].anisotropy=k);l||e(a[c],m)}function g(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,k="MeshLambertMaterial",l={color:15658734,opacity:1,
map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var m=a.shading.toLowerCase();"phong"===m?k="MeshPhongMaterial":"basic"===m&&(k="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(l.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)l.transparent=a.transparent;void 0!==a.depthTest&&(l.depthTest=a.depthTest);void 0!==a.depthWrite&&(l.depthWrite=a.depthWrite);void 0!==a.visible&&(l.visible=a.visible);void 0!==a.flipSided&&(l.side=THREE.BackSide);
void 0!==a.doubleSided&&(l.side=THREE.DoubleSide);void 0!==a.wireframe&&(l.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?l.vertexColors=THREE.FaceColors:a.vertexColors&&(l.vertexColors=THREE.VertexColors));a.colorDiffuse?l.color=g(a.colorDiffuse):a.DbgColor&&(l.color=a.DbgColor);a.colorSpecular&&(l.specular=g(a.colorSpecular));a.colorAmbient&&(l.ambient=g(a.colorAmbient));a.transparency&&(l.opacity=a.transparency);a.specularCoef&&(l.shininess=a.specularCoef);a.mapDiffuse&&
b&&f(l,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&f(l,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&f(l,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&f(l,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&f(l,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(l.bumpScale=a.mapBumpScale);a.mapNormal?(k=THREE.ShaderLib.normalmap,m=THREE.UniformsUtils.clone(k.uniforms),m.tNormal.value=l.normalMap,a.mapNormalFactor&&m.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),l.map&&(m.tDiffuse.value=l.map,m.enableDiffuse.value=!0),l.specularMap&&(m.tSpecular.value=l.specularMap,m.enableSpecular.value=!0),l.lightMap&&(m.tAO.value=l.lightMap,m.enableAO.value=!0),m.uDiffuseColor.value.setHex(l.color),
m.uSpecularColor.value.setHex(l.specular),m.uAmbientColor.value.setHex(l.ambient),m.uShininess.value=l.shininess,void 0!==l.opacity&&(m.uOpacity.value=l.opacity),k=new THREE.ShaderMaterial({fragmentShader:k.fragmentShader,vertexShader:k.vertexShader,uniforms:m,lights:!0,fog:!0}),l.transparent&&(k.transparent=!0)):k=new THREE[k](l);void 0!==a.DbgName&&(k.name=a.DbgName);return k}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){var e=this,f=new XMLHttpRequest;void 0!==b&&f.addEventListener("load",function(c){b(c.target.responseText);e.manager.itemEnd(a)},!1);void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1);void 0!==d&&f.addEventListener("error",function(a){d(a)},!1);void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin);f.open("GET",a,!0);f.send(null);e.manager.itemStart(a)},setCrossOrigin:function(a){this.crossOrigin=a}};
THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=document.createElement("img");void 0!==b&&f.addEventListener("load",function(c){e.manager.itemEnd(a);b(this)},!1);void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1);void 0!==d&&f.addEventListener("error",function(a){d(a)},!1);void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin);f.src=a;e.manager.itemStart(a)},setCrossOrigin:function(a){this.crossOrigin=a}};
THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var h=JSON.parse(f.responseText),h=a.parse(h,d);c(h.geometry,h.materials)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+f.status+"]");else f.readyState===f.LOADING?e&&(0===g&&
(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;(function(b){var d,g,h,k,l,m,p,q,u,t,r,w,x,v=a.faces;m=a.vertices;var z=a.normals,F=a.colors,J=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&J++;for(d=0;d<J;d++)c.faceVertexUvs[d]=[]}k=0;for(l=m.length;k<l;)d=new THREE.Vector3,d.x=m[k++]*b,d.y=m[k++]*b,d.z=m[k++]*b,c.vertices.push(d);k=0;for(l=v.length;k<l;)if(b=v[k++],u=b&1,h=b&2,d=b&8,p=b&16,t=b&32,m=b&64,b&=128,u){u=new THREE.Face3;
u.a=v[k];u.b=v[k+1];u.c=v[k+3];r=new THREE.Face3;r.a=v[k+1];r.b=v[k+2];r.c=v[k+3];k+=4;h&&(h=v[k++],u.materialIndex=h,r.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<J;d++)for(w=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)q=v[k++],x=w[2*q],q=w[2*q+1],x=new THREE.Vector2(x,q),2!==g&&c.faceVertexUvs[d][h].push(x),0!==g&&c.faceVertexUvs[d][h+1].push(x);p&&(p=3*v[k++],u.normal.set(z[p++],z[p++],z[p]),r.normal.copy(u.normal));if(t)for(d=0;4>d;d++)p=3*v[k++],t=new THREE.Vector3(z[p++],
z[p++],z[p]),2!==d&&u.vertexNormals.push(t),0!==d&&r.vertexNormals.push(t);m&&(m=v[k++],m=F[m],u.color.setHex(m),r.color.setHex(m));if(b)for(d=0;4>d;d++)m=v[k++],m=F[m],2!==d&&u.vertexColors.push(new THREE.Color(m)),0!==d&&r.vertexColors.push(new THREE.Color(m));c.faces.push(u);c.faces.push(r)}else{u=new THREE.Face3;u.a=v[k++];u.b=v[k++];u.c=v[k++];h&&(h=v[k++],u.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<J;d++)for(w=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)q=v[k++],x=w[2*q],q=w[2*q+1],
x=new THREE.Vector2(x,q),c.faceVertexUvs[d][h].push(x);p&&(p=3*v[k++],u.normal.set(z[p++],z[p++],z[p]));if(t)for(d=0;3>d;d++)p=3*v[k++],t=new THREE.Vector3(z[p++],z[p++],z[p]),u.vertexNormals.push(t);m&&(m=v[k++],u.color.setHex(F[m]));if(b)for(d=0;3>d;d++)m=v[k++],u.vertexColors.push(new THREE.Color(F[m]));c.faces.push(u)}})(d);(function(){var b,d,g,h;if(a.skinWeights)for(b=0,d=a.skinWeights.length;b<d;b+=2)g=a.skinWeights[b],h=a.skinWeights[b+1],c.skinWeights.push(new THREE.Vector4(g,h,0,0));if(a.skinIndices)for(b=
0,d=a.skinIndices.length;b<d;b+=2)g=a.skinIndices[b],h=a.skinIndices[b+1],c.skinIndices.push(new THREE.Vector4(g,h,0,0));c.bones=a.bones;c.animation=a.animation})();(function(b){if(void 0!==a.morphTargets){var d,g,h,k,l,m;d=0;for(g=a.morphTargets.length;d<g;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[],l=c.morphTargets[d].vertices,m=a.morphTargets[d].vertices,h=0,k=m.length;h<k;h+=3){var p=new THREE.Vector3;p.x=m[h]*b;p.y=m[h+1]*b;p.z=m[h+
2]*b;l.push(p)}}if(void 0!==a.morphColors)for(d=0,g=a.morphColors.length;d<g;d++)for(c.morphColors[d]={},c.morphColors[d].name=a.morphColors[d].name,c.morphColors[d].colors=[],k=c.morphColors[d].colors,l=a.morphColors[d].colors,b=0,h=l.length;b<h;b+=3)m=new THREE.Color(16755200),m.setRGB(l[b],l[b+1],l[b+2]),k.push(m)})(d);c.computeCentroids();c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();
return{geometry:c,materials:d}};THREE.LoadingManager=function(a,b,c){var d=this,e=0,f=0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){f++};this.itemEnd=function(a){e++;if(void 0!==d.onProgress)d.onProgress(a,e,f);if(e===f&&void 0!==d.onLoad)d.onLoad()}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.BufferGeometry,c=a.attributes,d=a.offsets;a=a.boundingSphere;for(var e in c){var f=c[e];b.attributes[e]={itemSize:f.itemSize,array:new self[f.type](f.array)}}void 0!==d&&(b.offsets=JSON.parse(JSON.stringify(d)));
void 0!==a&&(b.boundingSphere=new THREE.Sphere((new THREE.Vector3).fromArray(void 0!==a.center?a.center:[0,0,0]),a.radius));return b}};THREE.GeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};THREE.GeometryLoader.prototype={constructor:THREE.GeometryLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){}};
THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader;c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.ambient&&b.ambient.setHex(a.ambient);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&
(b.shininess=a.shininess);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=this.parseGeometries(a.geometries),c=this.parseMaterials(a.materials);return this.parseObject(a.object,b,c)},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,
e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case "PlaneGeometry":g=new THREE.PlaneGeometry(h.width,h.height,h.widthSegments,h.heightSegments);break;case "CubeGeometry":g=new THREE.CubeGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CylinderGeometry":g=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radiusSegments,h.heightSegments,h.openEnded);break;case "SphereGeometry":g=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,
h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":g=new THREE.IcosahedronGeometry(h.radius,h.detail);break;case "TorusGeometry":g=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":g=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);break;case "BufferGeometry":g=d.parse(h.data);break;case "Geometry":g=c.parse(h.data).geometry}g.uuid=h.uuid;void 0!==h.name&&
(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a){var b={};if(void 0!==a)for(var c=new THREE.MaterialLoader,d=0,e=a.length;d<e;d++){var f=a[d],g=c.parse(f);g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);b[f.uuid]=g}return b},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){var e;switch(b.type){case "Scene":e=new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case "OrthographicCamera":e=new THREE.OrthographicCamera(b.left,
b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance);break;case "SpotLight":e=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.exponent);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case "Mesh":e=c[b.geometry];var f=d[b.material];void 0===
e&&console.error("THREE.ObjectLoader: Undefined geometry "+b.geometry);void 0===f&&console.error("THREE.ObjectLoader: Undefined material "+b.material);e=new THREE.Mesh(e,f);break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==b.name&&(e.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==
b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],c,d));return e}}()};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlers={};this.hierarchyHandlers={};this.addGeometryHandler("ascii",THREE.JSONLoader)};
THREE.SceneLoader.prototype={constructor:THREE.SceneLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(c){e.parse(JSON.parse(c),b,a)})},setCrossOrigin:function(a){this.crossOrigin=a},addGeometryHandler:function(a,b){this.geometryHandlers[a]={loaderClass:b}},addHierarchyHandler:function(a,b){this.hierarchyHandlers[a]={loaderClass:b}},parse:function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:u+"/"+a}function e(){f(K.scene,
S.objects)}function f(a,b){var c,e,g,h,l,m,p;for(p in b){var u=K.objects[p],v=b[p];if(void 0===u){if(v.type&&v.type in q.hierarchyHandlers){if(void 0===v.loading){e={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,userData:1,skin:1,morph:1,mirroredLoop:1,duration:1};g={};for(var x in v)x in e||(g[x]=v[x]);r=K.materials[v.material];v.loading=!0;e=q.hierarchyHandlers[v.type].loaderObject;e.options?e.load(d(v.url,S.urlBaseType),k(p,a,r,v)):e.load(d(v.url,S.urlBaseType),k(p,
a,r,v),g)}}else if(void 0!==v.geometry){if(t=K.geometries[v.geometry]){u=!1;r=K.materials[v.material];u=r instanceof THREE.ShaderMaterial;g=v.position;h=v.rotation;l=v.scale;c=v.matrix;m=v.quaternion;v.material||(r=new THREE.MeshFaceMaterial(K.face_materials[v.geometry]));r instanceof THREE.MeshFaceMaterial&&0===r.materials.length&&(r=new THREE.MeshFaceMaterial(K.face_materials[v.geometry]));if(r instanceof THREE.MeshFaceMaterial)for(e=0;e<r.materials.length;e++)u=u||r.materials[e]instanceof THREE.ShaderMaterial;
u&&t.computeTangents();v.skin?u=new THREE.SkinnedMesh(t,r):v.morph?(u=new THREE.MorphAnimMesh(t,r),void 0!==v.duration&&(u.duration=v.duration),void 0!==v.time&&(u.time=v.time),void 0!==v.mirroredLoop&&(u.mirroredLoop=v.mirroredLoop),r.morphNormals&&t.computeMorphNormals()):u=new THREE.Mesh(t,r);u.name=p;c?(u.matrixAutoUpdate=!1,u.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(u.position.fromArray(g),m?u.quaternion.fromArray(m):u.rotation.fromArray(h),
u.scale.fromArray(l));u.visible=v.visible;u.castShadow=v.castShadow;u.receiveShadow=v.receiveShadow;a.add(u);K.objects[p]=u}}else"DirectionalLight"===v.type||"PointLight"===v.type||"AmbientLight"===v.type?(F=void 0!==v.color?v.color:16777215,J=void 0!==v.intensity?v.intensity:1,"DirectionalLight"===v.type?(g=v.direction,z=new THREE.DirectionalLight(F,J),z.position.fromArray(g),v.target&&(M.push({object:z,targetName:v.target}),z.target=null)):"PointLight"===v.type?(g=v.position,e=v.distance,z=new THREE.PointLight(F,
J,e),z.position.fromArray(g)):"AmbientLight"===v.type&&(z=new THREE.AmbientLight(F)),a.add(z),z.name=p,K.lights[p]=z,K.objects[p]=z):"PerspectiveCamera"===v.type||"OrthographicCamera"===v.type?(g=v.position,h=v.rotation,m=v.quaternion,"PerspectiveCamera"===v.type?w=new THREE.PerspectiveCamera(v.fov,v.aspect,v.near,v.far):"OrthographicCamera"===v.type&&(w=new THREE.OrthographicCamera(v.left,v.right,v.top,v.bottom,v.near,v.far)),w.name=p,w.position.fromArray(g),void 0!==m?w.quaternion.fromArray(m):
void 0!==h&&w.rotation.fromArray(h),a.add(w),K.cameras[p]=w,K.objects[p]=w):(g=v.position,h=v.rotation,l=v.scale,m=v.quaternion,u=new THREE.Object3D,u.name=p,u.position.fromArray(g),m?u.quaternion.fromArray(m):u.rotation.fromArray(h),u.scale.fromArray(l),u.visible=void 0!==v.visible?v.visible:!1,a.add(u),K.objects[p]=u,K.empties[p]=u);if(u){if(void 0!==v.userData)for(var A in v.userData)u.userData[A]=v.userData[A];if(void 0!==v.groups)for(e=0;e<v.groups.length;e++)g=v.groups[e],void 0===K.groups[g]&&
(K.groups[g]=[]),K.groups[g].push(p)}}void 0!==u&&void 0!==v.children&&f(u,v.children)}}function g(a,b,c,d,f){var g=f.rotation,h=f.quaternion,k=f.scale;a.position.fromArray(f.position);h?a.quaternion.fromArray(h):a.rotation.fromArray(g);a.scale.fromArray(k);d&&a.traverse(function(a){a.material=d});var l=void 0!==f.visible?f.visible:!0;a.traverse(function(a){a.visible=l});c.add(a);a.name=b;K.objects[b]=a;e()}function h(a){return function(b,c){b.name=a;K.geometries[a]=b;K.face_materials[a]=c;e();--C;
q.onLoadComplete();m()}}function k(a,b,c,d){return function(e){g(e.content?e.content:e.dae?e.scene:e,a,b,c,d);--C;q.onLoadComplete();m()}}function l(a){return function(b,c){b.name=a;K.geometries[a]=b;K.face_materials[a]=c}}function m(){q.callbackProgress({totalModels:y,totalTextures:B,loadedModels:y-C,loadedTextures:B-A},K);q.onLoadProgress();if(0===C&&0===A){for(var a=0;a<M.length;a++){var c=M[a],d=K.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,K.scene.add(c.object.target));
c.object.target.userData.targetInverse=c.object}b(K)}}function p(a,b){b(a);if(void 0!==a.children)for(var c in a.children)p(a.children[c],b)}var q=this,u=THREE.Loader.prototype.extractUrlBase(c),t,r,w,x,v,z,F,J,C,A,y,B,K,M=[],S=a,P;for(P in this.geometryHandlers)a=this.geometryHandlers[P].loaderClass,this.geometryHandlers[P].loaderObject=new a;for(P in this.hierarchyHandlers)a=this.hierarchyHandlers[P].loaderClass,this.hierarchyHandlers[P].loaderObject=new a;A=C=0;K={scene:new THREE.Scene,geometries:{},
face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};S.transform&&(P=S.transform.position,a=S.transform.rotation,c=S.transform.scale,P&&K.scene.position.fromArray(P),a&&K.scene.rotation.fromArray(a),c&&K.scene.scale.fromArray(c),P||a||c)&&(K.scene.updateMatrix(),K.scene.updateMatrixWorld());P=function(a){return function(){A-=a;m();q.onLoadComplete()}};for(var X in S.fogs)a=S.fogs[X],"linear"===a.type?x=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&
(x=new THREE.FogExp2(0,a.density)),a=a.color,x.color.setRGB(a[0],a[1],a[2]),K.fogs[X]=x;for(var H in S.geometries)x=S.geometries[H],x.type in this.geometryHandlers&&(C+=1,q.onLoadStart());for(var E in S.objects)p(S.objects[E],function(a){a.type&&a.type in q.hierarchyHandlers&&(C+=1,q.onLoadStart())});y=C;for(H in S.geometries)if(x=S.geometries[H],"cube"===x.type)t=new THREE.CubeGeometry(x.width,x.height,x.depth,x.widthSegments,x.heightSegments,x.depthSegments),t.name=H,K.geometries[H]=t;else if("plane"===
x.type)t=new THREE.PlaneGeometry(x.width,x.height,x.widthSegments,x.heightSegments),t.name=H,K.geometries[H]=t;else if("sphere"===x.type)t=new THREE.SphereGeometry(x.radius,x.widthSegments,x.heightSegments),t.name=H,K.geometries[H]=t;else if("cylinder"===x.type)t=new THREE.CylinderGeometry(x.topRad,x.botRad,x.height,x.radSegs,x.heightSegs),t.name=H,K.geometries[H]=t;else if("torus"===x.type)t=new THREE.TorusGeometry(x.radius,x.tube,x.segmentsR,x.segmentsT),t.name=H,K.geometries[H]=t;else if("icosahedron"===
x.type)t=new THREE.IcosahedronGeometry(x.radius,x.subdivisions),t.name=H,K.geometries[H]=t;else if(x.type in this.geometryHandlers){E={};for(v in x)"type"!==v&&"url"!==v&&(E[v]=x[v]);this.geometryHandlers[x.type].loaderObject.load(d(x.url,S.urlBaseType),h(H),E)}else"embedded"===x.type&&(E=S.embeds[x.id],E.metadata=S.metadata,E&&(E=this.geometryHandlers.ascii.loaderObject.parse(E,""),l(H)(E.geometry,E.materials)));for(var G in S.textures)if(H=S.textures[G],H.url instanceof Array)for(A+=H.url.length,
v=0;v<H.url.length;v++)q.onLoadStart();else A+=1,q.onLoadStart();B=A;for(G in S.textures){H=S.textures[G];void 0!==H.mapping&&void 0!==THREE[H.mapping]&&(H.mapping=new THREE[H.mapping]);if(H.url instanceof Array){E=H.url.length;x=[];for(v=0;v<E;v++)x[v]=d(H.url[v],S.urlBaseType);v=(v=/\.dds$/i.test(x[0]))?THREE.ImageUtils.loadCompressedTextureCube(x,H.mapping,P(E)):THREE.ImageUtils.loadTextureCube(x,H.mapping,P(E))}else v=/\.dds$/i.test(H.url),E=d(H.url,S.urlBaseType),x=P(1),v=v?THREE.ImageUtils.loadCompressedTexture(E,
H.mapping,x):THREE.ImageUtils.loadTexture(E,H.mapping,x),void 0!==THREE[H.minFilter]&&(v.minFilter=THREE[H.minFilter]),void 0!==THREE[H.magFilter]&&(v.magFilter=THREE[H.magFilter]),H.anisotropy&&(v.anisotropy=H.anisotropy),H.repeat&&(v.repeat.set(H.repeat[0],H.repeat[1]),1!==H.repeat[0]&&(v.wrapS=THREE.RepeatWrapping),1!==H.repeat[1]&&(v.wrapT=THREE.RepeatWrapping)),H.offset&&v.offset.set(H.offset[0],H.offset[1]),H.wrap&&(E={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==
E[H.wrap[0]]&&(v.wrapS=E[H.wrap[0]]),void 0!==E[H.wrap[1]]&&(v.wrapT=E[H.wrap[1]]));K.textures[G]=v}var U,O;for(U in S.materials){G=S.materials[U];for(O in G.parameters)"envMap"===O||"map"===O||"lightMap"===O||"bumpMap"===O?G.parameters[O]=K.textures[G.parameters[O]]:"shading"===O?G.parameters[O]="flat"===G.parameters[O]?THREE.FlatShading:THREE.SmoothShading:"side"===O?G.parameters[O]="double"==G.parameters[O]?THREE.DoubleSide:"back"==G.parameters[O]?THREE.BackSide:THREE.FrontSide:"blending"===O?
G.parameters[O]=G.parameters[O]in THREE?THREE[G.parameters[O]]:THREE.NormalBlending:"combine"===O?G.parameters[O]=G.parameters[O]in THREE?THREE[G.parameters[O]]:THREE.MultiplyOperation:"vertexColors"===O?"face"==G.parameters[O]?G.parameters[O]=THREE.FaceColors:G.parameters[O]&&(G.parameters[O]=THREE.VertexColors):"wrapRGB"===O&&(P=G.parameters[O],G.parameters[O]=new THREE.Vector3(P[0],P[1],P[2]));void 0!==G.parameters.opacity&&1>G.parameters.opacity&&(G.parameters.transparent=!0);G.parameters.normalMap?
(P=THREE.ShaderLib.normalmap,H=THREE.UniformsUtils.clone(P.uniforms),v=G.parameters.color,E=G.parameters.specular,x=G.parameters.ambient,X=G.parameters.shininess,H.tNormal.value=K.textures[G.parameters.normalMap],G.parameters.normalScale&&H.uNormalScale.value.set(G.parameters.normalScale[0],G.parameters.normalScale[1]),G.parameters.map&&(H.tDiffuse.value=G.parameters.map,H.enableDiffuse.value=!0),G.parameters.envMap&&(H.tCube.value=G.parameters.envMap,H.enableReflection.value=!0,H.uReflectivity.value=
G.parameters.reflectivity),G.parameters.lightMap&&(H.tAO.value=G.parameters.lightMap,H.enableAO.value=!0),G.parameters.specularMap&&(H.tSpecular.value=K.textures[G.parameters.specularMap],H.enableSpecular.value=!0),G.parameters.displacementMap&&(H.tDisplacement.value=K.textures[G.parameters.displacementMap],H.enableDisplacement.value=!0,H.uDisplacementBias.value=G.parameters.displacementBias,H.uDisplacementScale.value=G.parameters.displacementScale),H.uDiffuseColor.value.setHex(v),H.uSpecularColor.value.setHex(E),
H.uAmbientColor.value.setHex(x),H.uShininess.value=X,G.parameters.opacity&&(H.uOpacity.value=G.parameters.opacity),r=new THREE.ShaderMaterial({fragmentShader:P.fragmentShader,vertexShader:P.vertexShader,uniforms:H,lights:!0,fog:!0})):r=new THREE[G.type](G.parameters);r.name=U;K.materials[U]=r}for(U in S.materials)if(G=S.materials[U],G.parameters.materials){O=[];for(v=0;v<G.parameters.materials.length;v++)O.push(K.materials[G.parameters.materials[v]]);K.materials[U].materials=O}e();K.cameras&&S.defaults.camera&&
(K.currentCamera=K.cameras[S.defaults.camera]);K.fogs&&S.defaults.fog&&(K.scene.fog=K.fogs[S.defaults.fog]);q.callbackSync(K);m()}};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){c=new THREE.ImageLoader(this.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)})},setCrossOrigin:function(a){this.crossOrigin=a}};
THREE.Material=function(){this.id=THREE.MaterialIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;
a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};
THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};
THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ParticleCanvasMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.program=function(a,c){};this.setValues(a)};THREE.ParticleCanvasMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleCanvasMaterial.prototype.clone=function(){var a=new THREE.ParticleCanvasMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.program=this.program;return a};
THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName="position";this.setValues(a)};
THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=new THREE.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewport=!this.sizeAttenuation;this.alignment=THREE.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1);this.setValues(a);a=a||{};void 0===a.depthTest&&(this.depthTest=!this.useScreenCoordinates);
void 0===a.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===a.scaleByViewport&&(this.scaleByViewport=!this.sizeAttenuation)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.useScreenCoordinates=this.useScreenCoordinates;a.sizeAttenuation=this.sizeAttenuation;a.scaleByViewport=this.scaleByViewport;a.alignment.copy(this.alignment);a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);a.fog=this.fog;return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);
THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);
THREE.Texture=function(a,b,c,d,e,f,g,h,k){this.id=THREE.TextureIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=
this.unpackAlignment;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,m){THREE.Texture.call(this,null,f,g,h,k,l,d,e,m);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,m){THREE.Texture.call(this,null,f,g,h,k,l,d,e,m);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};
THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.frustumCulled=this.sortParticles=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};
THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};
THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,f;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,f=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),void 0!==f?b.scale.set(f[0],f[1],f[2]):b.scale.set(1,1,1);for(a=0;a<this.bones.length;a++)c=
this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=
THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(){var a=new THREE.Matrix4;return function(b){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||b)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;b=0;for(var c=this.children.length;b<c;b++){var d=this.children[b];d instanceof THREE.Bone?d.update(this.identityMatrix,!1):d.updateMatrixWorld(!0)}if(void 0==this.boneInverses)for(this.boneInverses=
[],b=0,c=this.bones.length;b<c;b++)d=new THREE.Matrix4,d.getInverse(this.bones[b].skinMatrix),this.boneInverses.push(d);b=0;for(c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b].skinMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);this.normalizeSkinWeights()};
THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};
THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var g=a.morphTargets[e].name.match(d);if(g&&1<g.length){g=g[1];c[g]||(c[g]={start:Infinity,end:-Infinity});var h=c[g];e<h.start&&(h.start=e);e>h.end&&(h.end=e);b||(b=g)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=(c.end-c.start)/b*1E3,this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);
THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};
THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.getPositionFromMatrix(c.matrixWorld);b.getPositionFromMatrix(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();THREE.LOD.prototype.clone=function(){};
THREE.Sprite=function(a){THREE.Object3D.call(this);this.material=void 0!==a?a:new THREE.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.rotation3d.set(0,0,this.rotation,this.rotation3d.order);this.quaternion.setFromEuler(this.rotation3d);this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.autoUpdate=!0;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};
THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};
THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};
THREE.CanvasRenderer=function(a){function b(a,b,c){for(var d=0,e=F.length;d<e;d++){var f=F[d];Fa.copy(f.color);if(f instanceof THREE.DirectionalLight){var g=oa.getPositionFromMatrix(f.matrixWorld).normalize(),h=b.dot(g);0>=h||(h*=f.intensity,c.add(Fa.multiplyScalar(h)))}else f instanceof THREE.PointLight&&(g=oa.getPositionFromMatrix(f.matrixWorld),h=b.dot(oa.subVectors(g,a).normalize()),0>=h||(h*=0==f.distance?1:1-Math.min(a.distanceTo(g)/f.distance,1),0!=h&&(h*=f.intensity,c.add(Fa.multiplyScalar(h)))))}}
function c(a,b,c,d){m(b);p(c);q(d);u(a.getStyle());M.stroke();wa.expandByScalar(2*b)}function d(a){t(a.getStyle());M.fill()}function e(a,b,c,e,f,g,h,k,l,n,m,p,q){if(!(q instanceof THREE.DataTexture||void 0===q.image||0==q.image.width)){if(!0===q.needsUpdate){var r=q.wrapS==THREE.RepeatWrapping,u=q.wrapT==THREE.RepeatWrapping;Ja[q.id]=M.createPattern(q.image,!0===r&&!0===u?"repeat":!0===r&&!1===u?"repeat-x":!1===r&&!0===u?"repeat-y":"no-repeat");q.needsUpdate=!1}void 0===Ja[q.id]?t("rgba(0,0,0,1)"):
t(Ja[q.id]);var r=q.offset.x/q.repeat.x,u=q.offset.y/q.repeat.y,v=q.image.width*q.repeat.x,w=q.image.height*q.repeat.y;h=(h+r)*v;k=(1-k+u)*w;c-=a;e-=b;f-=a;g-=b;l=(l+r)*v-h;n=(1-n+u)*w-k;m=(m+r)*v-h;p=(1-p+u)*w-k;r=l*p-m*n;0===r?(void 0===qa[q.id]&&(b=document.createElement("canvas"),b.width=q.image.width,b.height=q.image.height,b=b.getContext("2d"),b.drawImage(q.image,0,0),qa[q.id]=b.getImageData(0,0,q.image.width,q.image.height).data),b=qa[q.id],h=4*(Math.floor(h)+Math.floor(k)*q.image.width),ba.setRGB(b[h]/
255,b[h+1]/255,b[h+2]/255),d(ba)):(r=1/r,q=(p*c-n*f)*r,n=(p*e-n*g)*r,c=(l*f-m*c)*r,e=(l*g-m*e)*r,a=a-q*h-c*k,h=b-n*h-e*k,M.save(),M.transform(q,n,c,e,a,h),M.fill(),M.restore())}}function f(a,b,c,d,e,f,g,h,k,l,n,m,p){var q,r;q=p.width-1;r=p.height-1;g*=q;h*=r;c-=a;d-=b;e-=a;f-=b;k=k*q-g;l=l*r-h;n=n*q-g;m=m*r-h;r=1/(k*m-n*l);q=(m*c-l*e)*r;l=(m*d-l*f)*r;c=(k*e-n*c)*r;d=(k*f-n*d)*r;a=a-q*g-c*h;b=b-l*g-d*h;M.save();M.transform(q,l,c,d,a,b);M.clip();M.drawImage(p,0,0);M.restore()}function g(a,b,c,d){ta[0]=
255*a.r|0;ta[1]=255*a.g|0;ta[2]=255*a.b|0;ta[4]=255*b.r|0;ta[5]=255*b.g|0;ta[6]=255*b.b|0;ta[8]=255*c.r|0;ta[9]=255*c.g|0;ta[10]=255*c.b|0;ta[12]=255*d.r|0;ta[13]=255*d.g|0;ta[14]=255*d.b|0;gb.putImageData(n,0,0);Ra.drawImage(Qa,0,0);return Ya}function h(a,b,c){var d=b.x-a.x,e=b.y-a.y,f=d*d+e*e;0!==f&&(c/=Math.sqrt(f),d*=c,e*=c,b.x+=d,b.y+=e,a.x-=d,a.y-=e)}function k(a){X!==a&&(X=M.globalAlpha=a)}function l(a){H!==a&&(a===THREE.NormalBlending?M.globalCompositeOperation="source-over":a===THREE.AdditiveBlending?
M.globalCompositeOperation="lighter":a===THREE.SubtractiveBlending&&(M.globalCompositeOperation="darker"),H=a)}function m(a){U!==a&&(U=M.lineWidth=a)}function p(a){O!==a&&(O=M.lineCap=a)}function q(a){V!==a&&(V=M.lineJoin=a)}function u(a){E!==a&&(E=M.strokeStyle=a)}function t(a){G!==a&&(G=M.fillStyle=a)}function r(a,b){if(ha!==a||ma!==b)M.setLineDash([a,b]),ha=a,ma=b}console.log("THREE.CanvasRenderer",THREE.REVISION);var w=THREE.Math.smoothstep;a=a||{};var x=this,v,z,F,J=new THREE.Projector,C=void 0!==
a.canvas?a.canvas:document.createElement("canvas"),A,y,B,K,M=C.getContext("2d"),S=new THREE.Color(0),P=0,X=1,H=0,E=null,G=null,U=null,O=null,V=null,ha=null,ma=0,ga,D,fa,I;new THREE.RenderableVertex;new THREE.RenderableVertex;var da,la,Ba,ca,na,Y,ba=new THREE.Color,W=new THREE.Color,Q=new THREE.Color,R=new THREE.Color,ka=new THREE.Color,ea=new THREE.Color,Ia=new THREE.Color,Fa=new THREE.Color,Ja={},qa={},za,Pa,Ga,ja,L,Ha,Sa,Ta,ab,ia,Na=new THREE.Box2,sa=new THREE.Box2,wa=new THREE.Box2,kb=new THREE.Color,
Fb=new THREE.Color,Ea=new THREE.Color,oa=new THREE.Vector3,Qa,gb,n,ta,Ya,Ra,Oa=16;Qa=document.createElement("canvas");Qa.width=Qa.height=2;gb=Qa.getContext("2d");gb.fillStyle="rgba(0,0,0,1)";gb.fillRect(0,0,2,2);n=gb.getImageData(0,0,2,2);ta=n.data;Ya=document.createElement("canvas");Ya.width=Ya.height=Oa;Ra=Ya.getContext("2d");Ra.translate(-Oa/2,-Oa/2);Ra.scale(Oa,Oa);Oa--;void 0===M.setLineDash&&(M.setLineDash=void 0!==M.mozDash?function(a){M.mozDash=null!==a[0]?a:null}:function(){});this.domElement=
C;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?window.devicePixelRatio:1;this.sortElements=this.sortObjects=this.autoClear=!0;this.info={render:{vertices:0,faces:0}};this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.setSize=function(a,b,c){A=a*this.devicePixelRatio;y=b*this.devicePixelRatio;B=Math.floor(A/2);K=Math.floor(y/2);C.width=A;C.height=y;1!==this.devicePixelRatio&&!1!==c&&(C.style.width=a+"px",C.style.height=
b+"px");Na.set(new THREE.Vector2(-B,-K),new THREE.Vector2(B,K));sa.set(new THREE.Vector2(-B,-K),new THREE.Vector2(B,K));X=1;H=0;V=O=U=G=E=null};this.setClearColor=function(a,b){S.set(a);P=void 0!==b?b:1;sa.set(new THREE.Vector2(-B,-K),new THREE.Vector2(B,K))};this.setClearColorHex=function(a,b){console.warn("DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.");this.setClearColor(a,b)};this.getMaxAnisotropy=function(){return 0};this.clear=function(){M.setTransform(1,0,
0,-1,B,K);!1===sa.empty()&&(sa.intersect(Na),sa.expandByScalar(2),1>P&&M.clearRect(sa.min.x|0,sa.min.y|0,sa.max.x-sa.min.x|0,sa.max.y-sa.min.y|0),0<P&&(l(THREE.NormalBlending),k(1),t("rgba("+Math.floor(255*S.r)+","+Math.floor(255*S.g)+","+Math.floor(255*S.b)+","+P+")"),M.fillRect(sa.min.x|0,sa.min.y|0,sa.max.x-sa.min.x|0,sa.max.y-sa.min.y|0)),sa.makeEmpty())};this.render=function(a,n){if(!1===n instanceof THREE.Camera)console.error("THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.");
else{!0===this.autoClear&&this.clear();M.setTransform(1,0,0,-1,B,K);x.info.render.vertices=0;x.info.render.faces=0;v=J.projectScene(a,n,this.sortObjects,this.sortElements);z=v.elements;F=v.lights;ga=n;kb.setRGB(0,0,0);Fb.setRGB(0,0,0);Ea.setRGB(0,0,0);for(var A=0,C=F.length;A<C;A++){var y=F[A],H=y.color;y instanceof THREE.AmbientLight?kb.add(H):y instanceof THREE.DirectionalLight?Fb.add(H):y instanceof THREE.PointLight&&Ea.add(H)}A=0;for(C=z.length;A<C;A++){var G=z[A],E=G.material;if(void 0!==E&&
!1!==E.visible){wa.makeEmpty();if(G instanceof THREE.RenderableParticle){D=G;D.x*=B;D.y*=K;var y=D,H=G,P=E;k(P.opacity);l(P.blending);var S=E=G=void 0,U=void 0,O=void 0,X=void 0,V=void 0;P instanceof THREE.ParticleBasicMaterial?null===P.map?(S=H.object.scale.x,U=H.object.scale.y,S=S*H.scale.x*B,U=U*H.scale.y*K,wa.min.set(y.x-S,y.y-U),wa.max.set(y.x+S,y.y+U),!1===Na.isIntersectionBox(wa)?wa.makeEmpty():(t(P.color.getStyle()),M.save(),M.translate(y.x,y.y),M.rotate(-H.rotation),M.scale(S,U),M.fillRect(-1,
-1,2,2),M.restore())):(O=P.map.image,X=O.width>>1,V=O.height>>1,S=H.scale.x*B,U=H.scale.y*K,G=S*X,E=U*V,wa.min.set(y.x-G,y.y-E),wa.max.set(y.x+G,y.y+E),!1===Na.isIntersectionBox(wa)?wa.makeEmpty():(M.save(),M.translate(y.x,y.y),M.rotate(-H.rotation),M.scale(S,-U),M.translate(-X,-V),M.drawImage(O,0,0),M.restore())):P instanceof THREE.ParticleCanvasMaterial&&(G=H.scale.x*B,E=H.scale.y*K,wa.min.set(y.x-G,y.y-E),wa.max.set(y.x+G,y.y+E),!1===Na.isIntersectionBox(wa)?wa.makeEmpty():(u(P.color.getStyle()),
t(P.color.getStyle()),M.save(),M.translate(y.x,y.y),M.rotate(-H.rotation),M.scale(G,E),P.program(M),M.restore()))}else if(G instanceof THREE.RenderableLine){if(D=G.v1,fa=G.v2,D.positionScreen.x*=B,D.positionScreen.y*=K,fa.positionScreen.x*=B,fa.positionScreen.y*=K,wa.setFromPoints([D.positionScreen,fa.positionScreen]),!0===Na.isIntersectionBox(wa))if(y=D,H=fa,P=G,G=E,k(G.opacity),l(G.blending),M.beginPath(),M.moveTo(y.positionScreen.x,y.positionScreen.y),M.lineTo(H.positionScreen.x,H.positionScreen.y),
G instanceof THREE.LineBasicMaterial){m(G.linewidth);p(G.linecap);q(G.linejoin);if(G.vertexColors!==THREE.VertexColors)u(G.color.getStyle());else if(E=P.vertexColors[0].getStyle(),P=P.vertexColors[1].getStyle(),E===P)u(E);else{try{var ha=M.createLinearGradient(y.positionScreen.x,y.positionScreen.y,H.positionScreen.x,H.positionScreen.y);ha.addColorStop(0,E);ha.addColorStop(1,P)}catch(ma){ha=E}u(ha)}M.stroke();wa.expandByScalar(2*G.linewidth)}else G instanceof THREE.LineDashedMaterial&&(m(G.linewidth),
p(G.linecap),q(G.linejoin),u(G.color.getStyle()),r(G.dashSize,G.gapSize),M.stroke(),wa.expandByScalar(2*G.linewidth),r(null,null))}else if(G instanceof THREE.RenderableFace3){D=G.v1;fa=G.v2;I=G.v3;if(-1>D.positionScreen.z||1<D.positionScreen.z)continue;if(-1>fa.positionScreen.z||1<fa.positionScreen.z)continue;if(-1>I.positionScreen.z||1<I.positionScreen.z)continue;D.positionScreen.x*=B;D.positionScreen.y*=K;fa.positionScreen.x*=B;fa.positionScreen.y*=K;I.positionScreen.x*=B;I.positionScreen.y*=K;
0<E.overdraw&&(h(D.positionScreen,fa.positionScreen,E.overdraw),h(fa.positionScreen,I.positionScreen,E.overdraw),h(I.positionScreen,D.positionScreen,E.overdraw));wa.setFromPoints([D.positionScreen,fa.positionScreen,I.positionScreen]);if(!0===Na.isIntersectionBox(wa)){y=D;H=fa;P=I;x.info.render.vertices+=3;x.info.render.faces++;k(E.opacity);l(E.blending);da=y.positionScreen.x;la=y.positionScreen.y;Ba=H.positionScreen.x;ca=H.positionScreen.y;na=P.positionScreen.x;Y=P.positionScreen.y;var S=da,U=la,
O=Ba,X=ca,V=na,qa=Y;M.beginPath();M.moveTo(S,U);M.lineTo(O,X);M.lineTo(V,qa);M.closePath();(E instanceof THREE.MeshLambertMaterial||E instanceof THREE.MeshPhongMaterial)&&null===E.map?(ea.copy(E.color),Ia.copy(E.emissive),E.vertexColors===THREE.FaceColors&&ea.multiply(G.color),!1===E.wireframe&&E.shading==THREE.SmoothShading&&3==G.vertexNormalsLength?(W.copy(kb),Q.copy(kb),R.copy(kb),b(G.v1.positionWorld,G.vertexNormalsModel[0],W),b(G.v2.positionWorld,G.vertexNormalsModel[1],Q),b(G.v3.positionWorld,
G.vertexNormalsModel[2],R),W.multiply(ea).add(Ia),Q.multiply(ea).add(Ia),R.multiply(ea).add(Ia),ka.addColors(Q,R).multiplyScalar(.5),Ga=g(W,Q,R,ka),f(da,la,Ba,ca,na,Y,0,0,1,0,0,1,Ga)):(ba.copy(kb),b(G.centroidModel,G.normalModel,ba),ba.multiply(ea).add(Ia),!0===E.wireframe?c(ba,E.wireframeLinewidth,E.wireframeLinecap,E.wireframeLinejoin):d(ba))):E instanceof THREE.MeshBasicMaterial||E instanceof THREE.MeshLambertMaterial||E instanceof THREE.MeshPhongMaterial?null!==E.map?E.map.mapping instanceof THREE.UVMapping&&
(ja=G.uvs[0],e(da,la,Ba,ca,na,Y,ja[0].x,ja[0].y,ja[1].x,ja[1].y,ja[2].x,ja[2].y,E.map)):null!==E.envMap?E.envMap.mapping instanceof THREE.SphericalReflectionMapping&&(oa.copy(G.vertexNormalsModelView[0]),L=.5*oa.x+.5,Ha=.5*oa.y+.5,oa.copy(G.vertexNormalsModelView[1]),Sa=.5*oa.x+.5,Ta=.5*oa.y+.5,oa.copy(G.vertexNormalsModelView[2]),ab=.5*oa.x+.5,ia=.5*oa.y+.5,e(da,la,Ba,ca,na,Y,L,Ha,Sa,Ta,ab,ia,E.envMap)):(ba.copy(E.color),E.vertexColors===THREE.FaceColors&&ba.multiply(G.color),!0===E.wireframe?c(ba,
E.wireframeLinewidth,E.wireframeLinecap,E.wireframeLinejoin):d(ba)):E instanceof THREE.MeshDepthMaterial?(za=ga.near,Pa=ga.far,W.r=W.g=W.b=1-w(y.positionScreen.z*y.positionScreen.w,za,Pa),Q.r=Q.g=Q.b=1-w(H.positionScreen.z*H.positionScreen.w,za,Pa),R.r=R.g=R.b=1-w(P.positionScreen.z*P.positionScreen.w,za,Pa),ka.addColors(Q,R).multiplyScalar(.5),Ga=g(W,Q,R,ka),f(da,la,Ba,ca,na,Y,0,0,1,0,0,1,Ga)):E instanceof THREE.MeshNormalMaterial&&(y=void 0,E.shading==THREE.FlatShading?(y=G.normalModelView,ba.setRGB(y.x,
y.y,y.z).multiplyScalar(.5).addScalar(.5),!0===E.wireframe?c(ba,E.wireframeLinewidth,E.wireframeLinecap,E.wireframeLinejoin):d(ba)):E.shading==THREE.SmoothShading&&(y=G.vertexNormalsModelView[0],W.setRGB(y.x,y.y,y.z).multiplyScalar(.5).addScalar(.5),y=G.vertexNormalsModelView[1],Q.setRGB(y.x,y.y,y.z).multiplyScalar(.5).addScalar(.5),y=G.vertexNormalsModelView[2],R.setRGB(y.x,y.y,y.z).multiplyScalar(.5).addScalar(.5),ka.addColors(Q,R).multiplyScalar(.5),Ga=g(W,Q,R,ka),f(da,la,Ba,ca,na,Y,0,0,1,0,0,
1,Ga)))}}sa.union(wa)}}M.setTransform(1,0,0,1,0,0)}}};
THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",
envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nvec3 shadowZ = vec3( shadowCoord.z );\nshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\nshadowKernel[0] *= vec3(0.25);\nshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\nshadowKernel[1] *= vec3(0.25);\nshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\nshadowKernel[2] *= vec3(0.25);\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvNormal = normalize( normalMatrix * normal );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",
value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",
value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},uRefractionRatio:{type:"f",value:.98},uReflectivity:{type:"f",value:.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};
THREE.WebGLRenderer=function(a){function b(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var f=d.attributes[e];if(!f.__webglInitialized||f.createUniqueBuffers){f.__webglInitialized=!0;var g=1;"v2"===f.type?g=2:"v3"===f.type?g=3:"v4"===f.type?g=4:"c"===f.type&&(g=3);f.size=g;f.array=new Float32Array(c*g);f.buffer=n.createBuffer();f.buffer.belongsToAttribute=e;f.needsUpdate=!0}a.__webglCustomAttributesList.push(f)}}}
function c(a,b){var c=b.geometry,g=a.faces3,h=3*g.length,k=1*g.length,l=3*g.length,g=d(b,a),m=f(g),p=e(g),q=g.vertexColors?g.vertexColors:!1;a.__vertexArray=new Float32Array(3*h);p&&(a.__normalArray=new Float32Array(3*h));c.hasTangents&&(a.__tangentArray=new Float32Array(4*h));q&&(a.__colorArray=new Float32Array(3*h));m&&(0<c.faceVertexUvs.length&&(a.__uvArray=new Float32Array(2*h)),1<c.faceVertexUvs.length&&(a.__uv2Array=new Float32Array(2*h)));b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&
(a.__skinIndexArray=new Float32Array(4*h),a.__skinWeightArray=new Float32Array(4*h));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*l);if(a.numMorphTargets)for(a.__morphTargetsArrays=[],c=0,m=a.numMorphTargets;c<m;c++)a.__morphTargetsArrays.push(new Float32Array(3*h));if(a.numMorphNormals)for(a.__morphNormalsArrays=[],c=0,m=a.numMorphNormals;c<m;c++)a.__morphNormalsArrays.push(new Float32Array(3*h));a.__webglFaceCount=3*k;a.__webglLineCount=2*l;if(g.attributes){void 0===a.__webglCustomAttributesList&&
(a.__webglCustomAttributesList=[]);for(var r in g.attributes){var k=g.attributes[r],l={},u;for(u in k)l[u]=k[u];if(!l.__webglInitialized||l.createUniqueBuffers)l.__webglInitialized=!0,c=1,"v2"===l.type?c=2:"v3"===l.type?c=3:"v4"===l.type?c=4:"c"===l.type&&(c=3),l.size=c,l.array=new Float32Array(h*c),l.buffer=n.createBuffer(),l.buffer.belongsToAttribute=r,k.needsUpdate=!0,l.__original=k;a.__webglCustomAttributesList.push(l)}}a.__inittedArrays=!0}function d(a,b){return a.material instanceof THREE.MeshFaceMaterial?
a.material.materials[b.materialIndex]:a.material}function e(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function f(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function g(a){sa[a]||(n.enableVertexAttribArray(a),sa[a]=!0)}function h(){for(var a in sa)sa[a]&&(n.disableVertexAttribArray(a),sa[a]=
!1)}function k(a,b){return a.z!==b.z?b.z-a.z:a.id-b.id}function l(a,b){return b[0]-a[0]}function m(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)ba=Ba=null,na=Y=ka=R=za=qa=ea=-1,Qa=!0,a[d].render(b,c,ia,Na),ba=Ba=null,na=Y=ka=R=za=qa=ea=-1,Qa=!0}function p(a,b,c,d,e,f,g,h){var k,l,n,m;b?(l=a.length-1,m=b=-1):(l=0,b=a.length,m=1);for(var p=l;p!==b;p+=m)if(k=a[p],k.render){l=k.object;n=k.buffer;if(h)k=h;else{k=k[c];if(!k)continue;g&&I.setBlending(k.blending,k.blendEquation,k.blendSrc,k.blendDst);
I.setDepthTest(k.depthTest);I.setDepthWrite(k.depthWrite);B(k.polygonOffset,k.polygonOffsetFactor,k.polygonOffsetUnits)}I.setMaterialFaces(k);n instanceof THREE.BufferGeometry?I.renderBufferDirect(d,e,f,k,n,l):I.renderBuffer(d,e,f,k,n,l)}}function q(a,b,c,d,e,f,g){for(var h,k,l=0,n=a.length;l<n;l++)if(h=a[l],k=h.object,k.visible){if(g)h=g;else{h=h[b];if(!h)continue;f&&I.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);I.setDepthTest(h.depthTest);I.setDepthWrite(h.depthWrite);B(h.polygonOffset,
h.polygonOffsetFactor,h.polygonOffsetUnits)}I.renderImmediateObject(c,d,e,h,k)}}function u(a,d){var e,f,g,h;if(void 0===a.__webglInit&&(a.__webglInit=!0,a._modelViewMatrix=new THREE.Matrix4,a._normalMatrix=new THREE.Matrix3,void 0!==a.geometry&&void 0===a.geometry.__webglInit&&(a.geometry.__webglInit=!0,a.geometry.addEventListener("dispose",Vb)),f=a.geometry,void 0!==f))if(f instanceof THREE.BufferGeometry){var k,l;for(k in f.attributes)l="index"===k?n.ELEMENT_ARRAY_BUFFER:n.ARRAY_BUFFER,h=f.attributes[k],
void 0===h.numItems&&(h.numItems=h.array.length),h.buffer=n.createBuffer(),n.bindBuffer(l,h.buffer),n.bufferData(l,h.array,n.STATIC_DRAW)}else if(a instanceof THREE.Mesh){g=a.material;if(void 0===f.geometryGroups){k=f;var m,p,q;l={};var r=k.morphTargets.length,u=k.morphNormals.length,v=g instanceof THREE.MeshFaceMaterial;k.geometryGroups={};g=0;for(m=k.faces.length;g<m;g++)p=k.faces[g],p=v?p.materialIndex:0,void 0===l[p]&&(l[p]={hash:p,counter:0}),q=l[p].hash+"_"+l[p].counter,void 0===k.geometryGroups[q]&&
(k.geometryGroups[q]={faces3:[],materialIndex:p,vertices:0,numMorphTargets:r,numMorphNormals:u}),65535<k.geometryGroups[q].vertices+3&&(l[p].counter+=1,q=l[p].hash+"_"+l[p].counter,void 0===k.geometryGroups[q]&&(k.geometryGroups[q]={faces3:[],materialIndex:p,vertices:0,numMorphTargets:r,numMorphNormals:u})),k.geometryGroups[q].faces3.push(g),k.geometryGroups[q].vertices+=3;k.geometryGroupsList=[];for(h in k.geometryGroups)k.geometryGroups[h].id=W++,k.geometryGroupsList.push(k.geometryGroups[h])}for(e in f.geometryGroups)if(h=
f.geometryGroups[e],!h.__webglVertexBuffer){k=h;k.__webglVertexBuffer=n.createBuffer();k.__webglNormalBuffer=n.createBuffer();k.__webglTangentBuffer=n.createBuffer();k.__webglColorBuffer=n.createBuffer();k.__webglUVBuffer=n.createBuffer();k.__webglUV2Buffer=n.createBuffer();k.__webglSkinIndicesBuffer=n.createBuffer();k.__webglSkinWeightsBuffer=n.createBuffer();k.__webglFaceBuffer=n.createBuffer();k.__webglLineBuffer=n.createBuffer();r=l=void 0;if(k.numMorphTargets)for(k.__webglMorphTargetsBuffers=
[],l=0,r=k.numMorphTargets;l<r;l++)k.__webglMorphTargetsBuffers.push(n.createBuffer());if(k.numMorphNormals)for(k.__webglMorphNormalsBuffers=[],l=0,r=k.numMorphNormals;l<r;l++)k.__webglMorphNormalsBuffers.push(n.createBuffer());I.info.memory.geometries++;c(h,a);f.verticesNeedUpdate=!0;f.morphTargetsNeedUpdate=!0;f.elementsNeedUpdate=!0;f.uvsNeedUpdate=!0;f.normalsNeedUpdate=!0;f.tangentsNeedUpdate=!0;f.colorsNeedUpdate=!0}}else a instanceof THREE.Ribbon?f.__webglVertexBuffer||(h=f,h.__webglVertexBuffer=
n.createBuffer(),h.__webglColorBuffer=n.createBuffer(),h.__webglNormalBuffer=n.createBuffer(),I.info.memory.geometries++,h=f,k=h.vertices.length,h.__vertexArray=new Float32Array(3*k),h.__colorArray=new Float32Array(3*k),h.__normalArray=new Float32Array(3*k),h.__webglVertexCount=k,b(h,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0,f.normalsNeedUpdate=!0):a instanceof THREE.Line?f.__webglVertexBuffer||(h=f,h.__webglVertexBuffer=n.createBuffer(),h.__webglColorBuffer=n.createBuffer(),h.__webglLineDistanceBuffer=
n.createBuffer(),I.info.memory.geometries++,h=f,k=h.vertices.length,h.__vertexArray=new Float32Array(3*k),h.__colorArray=new Float32Array(3*k),h.__lineDistanceArray=new Float32Array(1*k),h.__webglLineCount=k,b(h,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0,f.lineDistancesNeedUpdate=!0):a instanceof THREE.ParticleSystem&&!f.__webglVertexBuffer&&(h=f,h.__webglVertexBuffer=n.createBuffer(),h.__webglColorBuffer=n.createBuffer(),I.info.memory.geometries++,h=f,k=h.vertices.length,h.__vertexArray=new Float32Array(3*
k),h.__colorArray=new Float32Array(3*k),h.__sortArray=[],h.__webglParticleCount=k,b(h,a),f.verticesNeedUpdate=!0,f.colorsNeedUpdate=!0);if(void 0===a.__webglActive){if(a instanceof THREE.Mesh)if(f=a.geometry,f instanceof THREE.BufferGeometry)t(d.__webglObjects,f,a);else{if(f instanceof THREE.Geometry)for(e in f.geometryGroups)h=f.geometryGroups[e],t(d.__webglObjects,h,a)}else a instanceof THREE.Ribbon||a instanceof THREE.Line||a instanceof THREE.ParticleSystem?(f=a.geometry,t(d.__webglObjects,f,a)):
a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback?d.__webglObjectsImmediate.push({id:null,object:a,opaque:null,transparent:null,z:0}):a instanceof THREE.Sprite?d.__webglSprites.push(a):a instanceof THREE.LensFlare&&d.__webglFlares.push(a);a.__webglActive=!0}}function t(a,b,c){a.push({id:null,buffer:b,object:c,opaque:null,transparent:null,z:0})}function r(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function w(a){for(var b in a.attributes)a.attributes[b].needsUpdate=
!1}function x(a,b){a instanceof THREE.Mesh||a instanceof THREE.ParticleSystem||a instanceof THREE.Ribbon||a instanceof THREE.Line?v(b.__webglObjects,a):a instanceof THREE.Sprite?z(b.__webglSprites,a):a instanceof THREE.LensFlare?z(b.__webglFlares,a):(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)&&v(b.__webglObjectsImmediate,a);delete a.__webglActive}function v(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function z(a,b){for(var c=a.length-1;0<=c;c--)a[c]===
b&&a.splice(c,1)}function F(a,b,c,d,e){Q=0;d.needsUpdate&&(d.program&&Lb(d),I.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(I.maxMorphTargets));var f=!1,g=d.program,h=g.uniforms,k=d.uniforms;g!==Ba&&(n.useProgram(g),Ba=g,f=!0);d.id!==na&&(na=d.id,f=!0);if(f||a!==ba)n.uniformMatrix4fv(h.projectionMatrix,!1,a.projectionMatrix.elements),a!==ba&&(ba=a);if(d.skinning)if(Db&&e.useVertexTexture){if(null!==h.boneTexture){var l=
J();n.uniform1i(h.boneTexture,l);I.setTexture(e.boneTexture,l)}}else null!==h.boneGlobalMatrices&&n.uniformMatrix4fv(h.boneGlobalMatrices,!1,e.boneMatrices);if(f){c&&d.fog&&(k.fogColor.value=c.color,c instanceof THREE.Fog?(k.fogNear.value=c.near,k.fogFar.value=c.far):c instanceof THREE.FogExp2&&(k.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Qa){var m,p=l=0,q=0,r,u,v,t=gb,w=t.directional.colors,la=t.directional.positions,
z=t.point.colors,x=t.point.positions,y=t.point.distances,F=t.spot.colors,B=t.spot.positions,H=t.spot.distances,ab=t.spot.directions,K=t.spot.anglesCos,L=t.spot.exponents,M=t.hemi.skyColors,D=t.hemi.groundColors,ia=t.hemi.positions,Na=0,U=0,ca=0,W=0,R=0,O=0,sa=0,X=0,V=m=0;c=v=V=0;for(f=b.length;c<f;c++)if(m=b[c],!m.onlyShadow)if(r=m.color,u=m.intensity,v=m.distance,m instanceof THREE.AmbientLight)m.visible&&(I.gammaInput?(l+=r.r*r.r,p+=r.g*r.g,q+=r.b*r.b):(l+=r.r,p+=r.g,q+=r.b));else if(m instanceof
THREE.DirectionalLight){if(R+=1,m.visible&&(oa.getPositionFromMatrix(m.matrixWorld),Ea.getPositionFromMatrix(m.target.matrixWorld),oa.sub(Ea),oa.normalize(),0!==oa.x||0!==oa.y||0!==oa.z))m=3*Na,la[m]=oa.x,la[m+1]=oa.y,la[m+2]=oa.z,I.gammaInput?C(w,m,r,u*u):A(w,m,r,u),Na+=1}else m instanceof THREE.PointLight?(O+=1,m.visible&&(V=3*U,I.gammaInput?C(z,V,r,u*u):A(z,V,r,u),Ea.getPositionFromMatrix(m.matrixWorld),x[V]=Ea.x,x[V+1]=Ea.y,x[V+2]=Ea.z,y[U]=v,U+=1)):m instanceof THREE.SpotLight?(sa+=1,m.visible&&
(V=3*ca,I.gammaInput?C(F,V,r,u*u):A(F,V,r,u),Ea.getPositionFromMatrix(m.matrixWorld),B[V]=Ea.x,B[V+1]=Ea.y,B[V+2]=Ea.z,H[ca]=v,oa.copy(Ea),Ea.getPositionFromMatrix(m.target.matrixWorld),oa.sub(Ea),oa.normalize(),ab[V]=oa.x,ab[V+1]=oa.y,ab[V+2]=oa.z,K[ca]=Math.cos(m.angle),L[ca]=m.exponent,ca+=1)):m instanceof THREE.HemisphereLight&&(X+=1,m.visible&&(oa.getPositionFromMatrix(m.matrixWorld),oa.normalize(),0!==oa.x||0!==oa.y||0!==oa.z))&&(v=3*W,ia[v]=oa.x,ia[v+1]=oa.y,ia[v+2]=oa.z,r=m.color,m=m.groundColor,
I.gammaInput?(u*=u,C(M,v,r,u),C(D,v,m,u)):(A(M,v,r,u),A(D,v,m,u)),W+=1);c=3*Na;for(f=Math.max(w.length,3*R);c<f;c++)w[c]=0;c=3*U;for(f=Math.max(z.length,3*O);c<f;c++)z[c]=0;c=3*ca;for(f=Math.max(F.length,3*sa);c<f;c++)F[c]=0;c=3*W;for(f=Math.max(M.length,3*X);c<f;c++)M[c]=0;c=3*W;for(f=Math.max(D.length,3*X);c<f;c++)D[c]=0;t.directional.length=Na;t.point.length=U;t.spot.length=ca;t.hemi.length=W;t.ambient[0]=l;t.ambient[1]=p;t.ambient[2]=q;Qa=!1}c=gb;k.ambientLightColor.value=c.ambient;k.directionalLightColor.value=
c.directional.colors;k.directionalLightDirection.value=c.directional.positions;k.pointLightColor.value=c.point.colors;k.pointLightPosition.value=c.point.positions;k.pointLightDistance.value=c.point.distances;k.spotLightColor.value=c.spot.colors;k.spotLightPosition.value=c.spot.positions;k.spotLightDistance.value=c.spot.distances;k.spotLightDirection.value=c.spot.directions;k.spotLightAngleCos.value=c.spot.anglesCos;k.spotLightExponent.value=c.spot.exponents;k.hemisphereLightSkyColor.value=c.hemi.skyColors;
k.hemisphereLightGroundColor.value=c.hemi.groundColors;k.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){k.opacity.value=d.opacity;I.gammaInput?k.diffuse.value.copyGammaToLinear(d.color):k.diffuse.value=d.color;k.map.value=d.map;k.lightMap.value=d.lightMap;k.specularMap.value=d.specularMap;d.bumpMap&&(k.bumpMap.value=d.bumpMap,k.bumpScale.value=d.bumpScale);d.normalMap&&(k.normalMap.value=
d.normalMap,k.normalScale.value.copy(d.normalScale));var Y;d.map?Y=d.map:d.specularMap?Y=d.specularMap:d.normalMap?Y=d.normalMap:d.bumpMap&&(Y=d.bumpMap);void 0!==Y&&(c=Y.offset,Y=Y.repeat,k.offsetRepeat.value.set(c.x,c.y,Y.x,Y.y));k.envMap.value=d.envMap;k.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;k.reflectivity.value=d.reflectivity;k.refractionRatio.value=d.refractionRatio;k.combine.value=d.combine;k.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof
THREE.LineBasicMaterial?(k.diffuse.value=d.color,k.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(k.diffuse.value=d.color,k.opacity.value=d.opacity,k.dashSize.value=d.dashSize,k.totalSize.value=d.dashSize+d.gapSize,k.scale.value=d.scale):d instanceof THREE.ParticleBasicMaterial?(k.psColor.value=d.color,k.opacity.value=d.opacity,k.size.value=d.size,k.scale.value=G.height/2,k.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(k.shininess.value=d.shininess,I.gammaInput?(k.ambient.value.copyGammaToLinear(d.ambient),
k.emissive.value.copyGammaToLinear(d.emissive),k.specular.value.copyGammaToLinear(d.specular)):(k.ambient.value=d.ambient,k.emissive.value=d.emissive,k.specular.value=d.specular),d.wrapAround&&k.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(I.gammaInput?(k.ambient.value.copyGammaToLinear(d.ambient),k.emissive.value.copyGammaToLinear(d.emissive)):(k.ambient.value=d.ambient,k.emissive.value=d.emissive),d.wrapAround&&k.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?
(k.mNear.value=a.near,k.mFar.value=a.far,k.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(k.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&k.shadowMatrix)for(c=Y=0,f=b.length;c<f;c++)l=b[c],l.castShadow&&(l instanceof THREE.SpotLight||l instanceof THREE.DirectionalLight&&!l.shadowCascade)&&(k.shadowMap.value[Y]=l.shadowMap,k.shadowMapSize.value[Y]=l.shadowMapSize,k.shadowMatrix.value[Y]=l.shadowMatrix,k.shadowDarkness.value[Y]=l.shadowDarkness,k.shadowBias.value[Y]=
l.shadowBias,Y++);b=d.uniformsList;k=0;for(Y=b.length;k<Y;k++)if(f=g.uniforms[b[k][1]])if(c=b[k][0],p=c.type,l=c.value,"i"===p)n.uniform1i(f,l);else if("f"===p)n.uniform1f(f,l);else if("v2"===p)n.uniform2f(f,l.x,l.y);else if("v3"===p)n.uniform3f(f,l.x,l.y,l.z);else if("v4"===p)n.uniform4f(f,l.x,l.y,l.z,l.w);else if("c"===p)n.uniform3f(f,l.r,l.g,l.b);else if("iv1"===p)n.uniform1iv(f,l);else if("iv"===p)n.uniform3iv(f,l);else if("fv1"===p)n.uniform1fv(f,l);else if("fv"===p)n.uniform3fv(f,l);else if("v2v"===
p){void 0===c._array&&(c._array=new Float32Array(2*l.length));p=0;for(q=l.length;p<q;p++)t=2*p,c._array[t]=l[p].x,c._array[t+1]=l[p].y;n.uniform2fv(f,c._array)}else if("v3v"===p){void 0===c._array&&(c._array=new Float32Array(3*l.length));p=0;for(q=l.length;p<q;p++)t=3*p,c._array[t]=l[p].x,c._array[t+1]=l[p].y,c._array[t+2]=l[p].z;n.uniform3fv(f,c._array)}else if("v4v"===p){void 0===c._array&&(c._array=new Float32Array(4*l.length));p=0;for(q=l.length;p<q;p++)t=4*p,c._array[t]=l[p].x,c._array[t+1]=
l[p].y,c._array[t+2]=l[p].z,c._array[t+3]=l[p].w;n.uniform4fv(f,c._array)}else if("m4"===p)void 0===c._array&&(c._array=new Float32Array(16)),l.flattenToArray(c._array),n.uniformMatrix4fv(f,!1,c._array);else if("m4v"===p){void 0===c._array&&(c._array=new Float32Array(16*l.length));p=0;for(q=l.length;p<q;p++)l[p].flattenToArrayOffset(c._array,16*p);n.uniformMatrix4fv(f,!1,c._array)}else if("t"===p){if(t=l,l=J(),n.uniform1i(f,l),t)if(t.image instanceof Array&&6===t.image.length){if(c=t,f=l,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||
(c.addEventListener("dispose",Eb),c.image.__webglTextureCube=n.createTexture(),I.info.memory.textures++);n.activeTexture(n.TEXTURE0+f);n.bindTexture(n.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,c.flipY);f=c instanceof THREE.CompressedTexture;l=[];for(p=0;6>p;p++)I.autoScaleCubemaps&&!f?(q=p,t=c.image[p],la=qc,t.width<=la&&t.height<=la||(z=Math.max(t.width,t.height),w=Math.floor(t.width*la/z),la=Math.floor(t.height*la/z),z=document.createElement("canvas"),z.width=
w,z.height=la,z.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,w,la),t=z),l[q]=t):l[p]=c.image[p];p=l[0];q=S(p.width)&&S(p.height);t=E(c.format);w=E(c.type);P(n.TEXTURE_CUBE_MAP,c,q);for(p=0;6>p;p++)if(f)for(z=l[p].mipmaps,x=0,y=z.length;x<y;x++)la=z[x],n.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+p,x,t,la.width,la.height,0,la.data);else n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+p,0,t,t,w,l[p]);c.generateMipmaps&&q&&n.generateMipmap(n.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else n.activeTexture(n.TEXTURE0+
f),n.bindTexture(n.TEXTURE_CUBE_MAP,c.image.__webglTextureCube)}else t instanceof THREE.WebGLRenderTargetCube?(c=t,n.activeTexture(n.TEXTURE0+l),n.bindTexture(n.TEXTURE_CUBE_MAP,c.__webglTexture)):I.setTexture(t,l)}else if("tv"===p){void 0===c._array&&(c._array=[]);p=0;for(q=c.value.length;p<q;p++)c._array[p]=J();n.uniform1iv(f,c._array);p=0;for(q=c.value.length;p<q;p++)t=c.value[p],l=c._array[p],t&&I.setTexture(t,l)}else console.warn("THREE.WebGLRenderer: Unknown uniform type: "+p);(d instanceof
THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==h.cameraPosition&&(Ea.getPositionFromMatrix(a.matrixWorld),n.uniform3f(h.cameraPosition,Ea.x,Ea.y,Ea.z));(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==h.viewMatrix&&n.uniformMatrix4fv(h.viewMatrix,!1,a.matrixWorldInverse.elements)}n.uniformMatrix4fv(h.modelViewMatrix,!1,e._modelViewMatrix.elements);h.normalMatrix&&n.uniformMatrix3fv(h.normalMatrix,
!1,e._normalMatrix.elements);null!==h.modelMatrix&&n.uniformMatrix4fv(h.modelMatrix,!1,e.matrixWorld.elements);return g}function J(){var a=Q;a>=Tb&&console.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Tb);Q+=1;return a}function C(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function A(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function y(a){a!==L&&(n.lineWidth(a),L=a)}function B(a,b,c){Pa!==a&&(a?n.enable(n.POLYGON_OFFSET_FILL):n.disable(n.POLYGON_OFFSET_FILL),
Pa=a);!a||Ga===b&&ja===c||(n.polygonOffset(b,c),Ga=b,ja=c)}function K(a){a=a.split("\n");for(var b=0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function M(a,b){var c;"fragment"===a?c=n.createShader(n.FRAGMENT_SHADER):"vertex"===a&&(c=n.createShader(n.VERTEX_SHADER));n.shaderSource(c,b);n.compileShader(c);return n.getShaderParameter(c,n.COMPILE_STATUS)?c:(console.error(n.getShaderInfoLog(c)),console.error(K(b)),null)}function S(a){return 0===(a&a-1)}function P(a,b,c){c?(n.texParameteri(a,
n.TEXTURE_WRAP_S,E(b.wrapS)),n.texParameteri(a,n.TEXTURE_WRAP_T,E(b.wrapT)),n.texParameteri(a,n.TEXTURE_MAG_FILTER,E(b.magFilter)),n.texParameteri(a,n.TEXTURE_MIN_FILTER,E(b.minFilter))):(n.texParameteri(a,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(a,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(a,n.TEXTURE_MAG_FILTER,H(b.magFilter)),n.texParameteri(a,n.TEXTURE_MIN_FILTER,H(b.minFilter)));Ra&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy)&&(n.texParameterf(a,Ra.TEXTURE_MAX_ANISOTROPY_EXT,
Math.min(b.anisotropy,Jb)),b.__oldAnisotropy=b.anisotropy)}function X(a,b){n.bindRenderbuffer(n.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_COMPONENT16,b.width,b.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,b.width,b.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,a)):n.renderbufferStorage(n.RENDERBUFFER,
n.RGBA4,b.width,b.height)}function H(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?n.NEAREST:n.LINEAR}function E(a){if(a===THREE.RepeatWrapping)return n.REPEAT;if(a===THREE.ClampToEdgeWrapping)return n.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return n.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return n.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return n.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return n.NEAREST_MIPMAP_LINEAR;
if(a===THREE.LinearFilter)return n.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return n.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return n.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return n.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return n.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return n.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return n.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return n.BYTE;if(a===THREE.ShortType)return n.SHORT;
if(a===THREE.UnsignedShortType)return n.UNSIGNED_SHORT;if(a===THREE.IntType)return n.INT;if(a===THREE.UnsignedIntType)return n.UNSIGNED_INT;if(a===THREE.FloatType)return n.FLOAT;if(a===THREE.AlphaFormat)return n.ALPHA;if(a===THREE.RGBFormat)return n.RGB;if(a===THREE.RGBAFormat)return n.RGBA;if(a===THREE.LuminanceFormat)return n.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return n.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return n.FUNC_ADD;if(a===THREE.SubtractEquation)return n.FUNC_SUBTRACT;if(a===
THREE.ReverseSubtractEquation)return n.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return n.ZERO;if(a===THREE.OneFactor)return n.ONE;if(a===THREE.SrcColorFactor)return n.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return n.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return n.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return n.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return n.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return n.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return n.DST_COLOR;
if(a===THREE.OneMinusDstColorFactor)return n.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return n.SRC_ALPHA_SATURATE;if(void 0!==Oa){if(a===THREE.RGB_S3TC_DXT1_Format)return Oa.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return Oa.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);
a=a||{};var G=void 0!==a.canvas?a.canvas:document.createElement("canvas"),U=void 0!==a.precision?a.precision:"highp",O=void 0!==a.alpha?a.alpha:!0,V=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,ha=void 0!==a.antialias?a.antialias:!1,ma=void 0!==a.stencil?a.stencil:!0,ga=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,D=new THREE.Color(0),fa=0;void 0!==a.clearColor&&(console.warn("DEPRECATED: clearColor in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead."),
D.setHex(a.clearColor));void 0!==a.clearAlpha&&(console.warn("DEPRECATED: clearAlpha in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead."),fa=a.clearAlpha);this.domElement=G;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?window.devicePixelRatio:1;this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=
this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var I=this,da=[],la=0,Ba=null,ca=null,na=-1,Y=null,ba=null,W=0,Q=0,R=-1,ka=-1,ea=-1,Ia=
-1,Fa=-1,Ja=-1,qa=-1,za=-1,Pa=null,Ga=null,ja=null,L=null,Ha=0,Sa=0,Ta=0,ab=0,ia=0,Na=0,sa={},wa=new THREE.Frustum,kb=new THREE.Matrix4,Fb=new THREE.Matrix4,Ea=new THREE.Vector3,oa=new THREE.Vector3,Qa=!0,gb={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},n,ta,Ya,Ra,Oa;(function(){try{var a=
{alpha:O,premultipliedAlpha:V,antialias:ha,stencil:ma,preserveDrawingBuffer:ga};n=G.getContext("webgl",a)||G.getContext("experimental-webgl",a);if(null===n)throw"Error creating WebGL context.";}catch(b){console.error(b)}ta=n.getExtension("OES_texture_float");n.getExtension("OES_texture_float_linear");Ya=n.getExtension("OES_standard_derivatives");Ra=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
Oa=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");ta||console.log("THREE.WebGLRenderer: Float textures not supported.");Ya||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");Ra||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");Oa||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");void 0===n.getShaderPrecisionFormat&&
(n.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})})();n.clearColor(0,0,0,1);n.clearDepth(1);n.clearStencil(0);n.enable(n.DEPTH_TEST);n.depthFunc(n.LEQUAL);n.frontFace(n.CCW);n.cullFace(n.BACK);n.enable(n.CULL_FACE);n.enable(n.BLEND);n.blendEquation(n.FUNC_ADD);n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA);n.clearColor(D.r,D.g,D.b,fa);this.context=n;var Tb=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS),pc=n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS);n.getParameter(n.MAX_TEXTURE_SIZE);
var qc=n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE),Jb=Ra?n.getParameter(Ra.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,yb=0<pc,Db=yb&&ta;Oa&&n.getParameter(n.COMPRESSED_TEXTURE_FORMATS);var rc=n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.HIGH_FLOAT),sc=n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.MEDIUM_FLOAT);n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.LOW_FLOAT);var tc=n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.HIGH_FLOAT),uc=n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.MEDIUM_FLOAT);n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,
n.LOW_FLOAT);n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.HIGH_INT);n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.MEDIUM_INT);n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.LOW_INT);n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.HIGH_INT);n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.MEDIUM_INT);n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.LOW_INT);var vc=0<rc.precision&&0<tc.precision,Ub=0<sc.precision&&0<uc.precision;"highp"!==U||vc||(Ub?(U="mediump",console.warn("WebGLRenderer: highp not supported, using mediump")):
(U="lowp",console.warn("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"!==U||Ub||(U="lowp",console.warn("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return n};this.supportsVertexTextures=function(){return yb};this.supportsFloatTextures=function(){return ta};this.supportsStandardDerivatives=function(){return Ya};this.supportsCompressedTextureS3TC=function(){return Oa};this.getMaxAnisotropy=function(){return Jb};this.getPrecision=function(){return U};
this.setSize=function(a,b,c){G.width=a*this.devicePixelRatio;G.height=b*this.devicePixelRatio;1!==this.devicePixelRatio&&!1!==c&&(G.style.width=a+"px",G.style.height=b+"px");this.setViewport(0,0,G.width,G.height)};this.setViewport=function(a,b,c,d){Ha=void 0!==a?a:0;Sa=void 0!==b?b:0;Ta=void 0!==c?c:G.width;ab=void 0!==d?d:G.height;n.viewport(Ha,Sa,Ta,ab)};this.setScissor=function(a,b,c,d){n.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?n.enable(n.SCISSOR_TEST):n.disable(n.SCISSOR_TEST)};
this.setClearColor=function(a,b){D.set(a);fa=void 0!==b?b:1;n.clearColor(D.r,D.g,D.b,fa)};this.setClearColorHex=function(a,b){console.warn("DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.");this.setClearColor(a,b)};this.getClearColor=function(){return D};this.getClearAlpha=function(){return fa};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=n.COLOR_BUFFER_BIT;if(void 0===b||b)d|=n.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=n.STENCIL_BUFFER_BIT;n.clear(d)};this.clearTarget=
function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){Ba=null;na=Y=za=qa=ea=-1;Qa=!0;ka=R=-1;this.shadowMapPlugin.update(a,b)};var Vb=function(a){a=a.target;a.removeEventListener("dispose",Vb);a.__webglInit=void 0;if(a instanceof THREE.BufferGeometry){var b=a.attributes,c;for(c in b)void 0!==b[c].buffer&&n.deleteBuffer(b[c].buffer);
I.info.memory.geometries--}else if(void 0!==a.geometryGroups)for(b in a.geometryGroups){c=a.geometryGroups[b];if(void 0!==c.numMorphTargets)for(var d=0,e=c.numMorphTargets;d<e;d++)n.deleteBuffer(c.__webglMorphTargetsBuffers[d]);if(void 0!==c.numMorphNormals)for(d=0,e=c.numMorphNormals;d<e;d++)n.deleteBuffer(c.__webglMorphNormalsBuffers[d]);Kb(c)}else Kb(a)},Eb=function(a){a=a.target;a.removeEventListener("dispose",Eb);a.image&&a.image.__webglTextureCube?n.deleteTexture(a.image.__webglTextureCube):
a.__webglInit&&(a.__webglInit=!1,n.deleteTexture(a.__webglTexture));I.info.memory.textures--},Wb=function(a){a=a.target;a.removeEventListener("dispose",Wb);if(a&&a.__webglTexture)if(n.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)n.deleteFramebuffer(a.__webglFramebuffer[b]),n.deleteRenderbuffer(a.__webglRenderbuffer[b]);else n.deleteFramebuffer(a.__webglFramebuffer),n.deleteRenderbuffer(a.__webglRenderbuffer);I.info.memory.textures--},Xb=function(a){a=
a.target;a.removeEventListener("dispose",Xb);Lb(a)},Kb=function(a){void 0!==a.__webglVertexBuffer&&n.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&n.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&n.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&n.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&n.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&n.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&
n.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&n.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==a.__webglFaceBuffer&&n.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&n.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&n.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)n.deleteBuffer(a.__webglCustomAttributesList[b].buffer);I.info.memory.geometries--},
Lb=function(a){var b=a.program;if(void 0!==b){a.program=void 0;var c,d,e=!1;a=0;for(c=da.length;a<c;a++)if(d=da[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=da.length;a<c;a++)d=da[a],d.program!==b&&e.push(d);da=e;n.deleteProgram(b);I.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=n.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=n.createBuffer());
a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=n.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=n.createBuffer());a.hasPositions&&(n.bindBuffer(n.ARRAY_BUFFER,a.__webglVertexBuffer),n.bufferData(n.ARRAY_BUFFER,a.positionArray,n.DYNAMIC_DRAW),n.enableVertexAttribArray(b.attributes.position),n.vertexAttribPointer(b.attributes.position,3,n.FLOAT,!1,0,0));if(a.hasNormals){n.bindBuffer(n.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,f,g,h,k,
l,p,m,q,r,u=3*a.count;for(r=0;r<u;r+=9)q=a.normalArray,d=q[r],e=q[r+1],f=q[r+2],g=q[r+3],k=q[r+4],p=q[r+5],h=q[r+6],l=q[r+7],m=q[r+8],d=(d+g+h)/3,e=(e+k+l)/3,f=(f+p+m)/3,q[r]=d,q[r+1]=e,q[r+2]=f,q[r+3]=d,q[r+4]=e,q[r+5]=f,q[r+6]=d,q[r+7]=e,q[r+8]=f}n.bufferData(n.ARRAY_BUFFER,a.normalArray,n.DYNAMIC_DRAW);n.enableVertexAttribArray(b.attributes.normal);n.vertexAttribPointer(b.attributes.normal,3,n.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(n.bindBuffer(n.ARRAY_BUFFER,a.__webglUvBuffer),n.bufferData(n.ARRAY_BUFFER,
a.uvArray,n.DYNAMIC_DRAW),n.enableVertexAttribArray(b.attributes.uv),n.vertexAttribPointer(b.attributes.uv,2,n.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(n.bindBuffer(n.ARRAY_BUFFER,a.__webglColorBuffer),n.bufferData(n.ARRAY_BUFFER,a.colorArray,n.DYNAMIC_DRAW),n.enableVertexAttribArray(b.attributes.color),n.vertexAttribPointer(b.attributes.color,3,n.FLOAT,!1,0,0));n.drawArrays(n.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){if(!1!==d.visible){var k,
l,p,m;k=F(a,b,c,d,f);b=k.attributes;a=e.attributes;c=!1;k=16777215*e.id+2*k.id+(d.wireframe?1:0);k!==Y&&(Y=k,c=!0);c&&h();if(f instanceof THREE.Mesh)if(f=a.index){e=e.offsets;1<e.length&&(c=!0);for(var q=0,r=e.length;q<r;q++){var u=e[q].index;if(c){for(l in b)p=b[l],k=a[l],0<=p&&(k?(m=k.itemSize,n.bindBuffer(n.ARRAY_BUFFER,k.buffer),g(p),n.vertexAttribPointer(p,m,n.FLOAT,!1,0,u*m*4)):d.defaultAttributeValues&&(2===d.defaultAttributeValues[l].length?n.vertexAttrib2fv(p,d.defaultAttributeValues[l]):
3===d.defaultAttributeValues[l].length&&n.vertexAttrib3fv(p,d.defaultAttributeValues[l])));n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,f.buffer)}n.drawElements(n.TRIANGLES,e[q].count,n.UNSIGNED_SHORT,2*e[q].start);I.info.render.calls++;I.info.render.vertices+=e[q].count;I.info.render.faces+=e[q].count/3}}else{if(c)for(l in b)"index"!==l&&(p=b[l],k=a[l],0<=p&&(k?(m=k.itemSize,n.bindBuffer(n.ARRAY_BUFFER,k.buffer),g(p),n.vertexAttribPointer(p,m,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[l]&&
(2===d.defaultAttributeValues[l].length?n.vertexAttrib2fv(p,d.defaultAttributeValues[l]):3===d.defaultAttributeValues[l].length&&n.vertexAttrib3fv(p,d.defaultAttributeValues[l]))));d=e.attributes.position;n.drawArrays(n.TRIANGLES,0,d.numItems/3);I.info.render.calls++;I.info.render.vertices+=d.numItems/3;I.info.render.faces+=d.numItems/3/3}else if(f instanceof THREE.ParticleSystem){if(c){for(l in b)p=b[l],k=a[l],0<=p&&(k?(m=k.itemSize,n.bindBuffer(n.ARRAY_BUFFER,k.buffer),g(p),n.vertexAttribPointer(p,
m,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[l]&&(2===d.defaultAttributeValues[l].length?n.vertexAttrib2fv(p,d.defaultAttributeValues[l]):3===d.defaultAttributeValues[l].length&&n.vertexAttrib3fv(p,d.defaultAttributeValues[l])));d=a.position;n.drawArrays(n.POINTS,0,d.numItems/3);I.info.render.calls++;I.info.render.points+=d.numItems/3}}else if(f instanceof THREE.Line&&c){for(l in b)p=b[l],k=a[l],0<=p&&(k?(m=k.itemSize,n.bindBuffer(n.ARRAY_BUFFER,k.buffer),g(p),n.vertexAttribPointer(p,
m,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&d.defaultAttributeValues[l]&&(2===d.defaultAttributeValues[l].length?n.vertexAttrib2fv(p,d.defaultAttributeValues[l]):3===d.defaultAttributeValues[l].length&&n.vertexAttrib3fv(p,d.defaultAttributeValues[l])));l=f.type===THREE.LineStrip?n.LINE_STRIP:n.LINES;y(d.linewidth);d=a.position;n.drawArrays(l,0,d.numItems/3);I.info.render.calls++;I.info.render.points+=d.numItems}}};this.renderBuffer=function(a,b,c,d,e,f){if(!1!==d.visible){var k,p;c=F(a,b,c,d,f);
a=c.attributes;b=!1;c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==Y&&(Y=c,b=!0);b&&h();if(!d.morphTargets&&0<=a.position)b&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglVertexBuffer),g(a.position),n.vertexAttribPointer(a.position,3,n.FLOAT,!1,0,0));else if(f.morphTargetBase){c=d.program.attributes;-1!==f.morphTargetBase&&0<=c.position?(n.bindBuffer(n.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[f.morphTargetBase]),g(c.position),n.vertexAttribPointer(c.position,3,n.FLOAT,!1,0,0)):0<=c.position&&(n.bindBuffer(n.ARRAY_BUFFER,
e.__webglVertexBuffer),g(c.position),n.vertexAttribPointer(c.position,3,n.FLOAT,!1,0,0));if(f.morphTargetForcedOrder.length){var m=0;p=f.morphTargetForcedOrder;for(k=f.morphTargetInfluences;m<d.numSupportedMorphTargets&&m<p.length;)0<=c["morphTarget"+m]&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[p[m]]),g(c["morphTarget"+m]),n.vertexAttribPointer(c["morphTarget"+m],3,n.FLOAT,!1,0,0)),0<=c["morphNormal"+m]&&d.morphNormals&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[p[m]]),
g(c["morphNormal"+m]),n.vertexAttribPointer(c["morphNormal"+m],3,n.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[m]=k[p[m]],m++}else{p=[];k=f.morphTargetInfluences;var q,r=k.length;for(q=0;q<r;q++)m=k[q],0<m&&p.push([m,q]);p.length>d.numSupportedMorphTargets?(p.sort(l),p.length=d.numSupportedMorphTargets):p.length>d.numSupportedMorphNormals?p.sort(l):0===p.length&&p.push([0,0]);for(m=0;m<d.numSupportedMorphTargets;)p[m]?(q=p[m][1],0<=c["morphTarget"+m]&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[q]),
g(c["morphTarget"+m]),n.vertexAttribPointer(c["morphTarget"+m],3,n.FLOAT,!1,0,0)),0<=c["morphNormal"+m]&&d.morphNormals&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[q]),g(c["morphNormal"+m]),n.vertexAttribPointer(c["morphNormal"+m],3,n.FLOAT,!1,0,0)),f.__webglMorphTargetInfluences[m]=k[q]):f.__webglMorphTargetInfluences[m]=0,m++}null!==d.program.uniforms.morphTargetInfluences&&n.uniform1fv(d.program.uniforms.morphTargetInfluences,f.__webglMorphTargetInfluences)}if(b){if(e.__webglCustomAttributesList)for(k=
0,p=e.__webglCustomAttributesList.length;k<p;k++)c=e.__webglCustomAttributesList[k],0<=a[c.buffer.belongsToAttribute]&&(n.bindBuffer(n.ARRAY_BUFFER,c.buffer),g(a[c.buffer.belongsToAttribute]),n.vertexAttribPointer(a[c.buffer.belongsToAttribute],c.size,n.FLOAT,!1,0,0));0<=a.color&&(0<f.geometry.colors.length||0<f.geometry.faces.length?(n.bindBuffer(n.ARRAY_BUFFER,e.__webglColorBuffer),g(a.color),n.vertexAttribPointer(a.color,3,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&n.vertexAttrib3fv(a.color,d.defaultAttributeValues.color));
0<=a.normal&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglNormalBuffer),g(a.normal),n.vertexAttribPointer(a.normal,3,n.FLOAT,!1,0,0));0<=a.tangent&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglTangentBuffer),g(a.tangent),n.vertexAttribPointer(a.tangent,4,n.FLOAT,!1,0,0));0<=a.uv&&(f.geometry.faceVertexUvs[0]?(n.bindBuffer(n.ARRAY_BUFFER,e.__webglUVBuffer),g(a.uv),n.vertexAttribPointer(a.uv,2,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&n.vertexAttrib2fv(a.uv,d.defaultAttributeValues.uv));0<=a.uv2&&(f.geometry.faceVertexUvs[1]?
(n.bindBuffer(n.ARRAY_BUFFER,e.__webglUV2Buffer),g(a.uv2),n.vertexAttribPointer(a.uv2,2,n.FLOAT,!1,0,0)):d.defaultAttributeValues&&n.vertexAttrib2fv(a.uv2,d.defaultAttributeValues.uv2));d.skinning&&0<=a.skinIndex&&0<=a.skinWeight&&(n.bindBuffer(n.ARRAY_BUFFER,e.__webglSkinIndicesBuffer),g(a.skinIndex),n.vertexAttribPointer(a.skinIndex,4,n.FLOAT,!1,0,0),n.bindBuffer(n.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),g(a.skinWeight),n.vertexAttribPointer(a.skinWeight,4,n.FLOAT,!1,0,0));0<=a.lineDistance&&(n.bindBuffer(n.ARRAY_BUFFER,
e.__webglLineDistanceBuffer),g(a.lineDistance),n.vertexAttribPointer(a.lineDistance,1,n.FLOAT,!1,0,0))}f instanceof THREE.Mesh?(d.wireframe?(y(d.wireframeLinewidth),b&&n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),n.drawElements(n.LINES,e.__webglLineCount,n.UNSIGNED_SHORT,0)):(b&&n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),n.drawElements(n.TRIANGLES,e.__webglFaceCount,n.UNSIGNED_SHORT,0)),I.info.render.calls++,I.info.render.vertices+=e.__webglFaceCount,I.info.render.faces+=
e.__webglFaceCount/3):f instanceof THREE.Line?(f=f.type===THREE.LineStrip?n.LINE_STRIP:n.LINES,y(d.linewidth),n.drawArrays(f,0,e.__webglLineCount),I.info.render.calls++):f instanceof THREE.ParticleSystem?(n.drawArrays(n.POINTS,0,e.__webglParticleCount),I.info.render.calls++,I.info.render.points+=e.__webglParticleCount):f instanceof THREE.Ribbon&&(n.drawArrays(n.TRIANGLE_STRIP,0,e.__webglVertexCount),I.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
else{var e,f,g,h,l=a.__lights,r=a.fog;na=-1;Qa=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);kb.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);wa.setFromMatrix(kb);this.autoUpdateObjects&&this.initWebGLObjects(a);m(this.renderPluginsPre,a,b);I.info.render.calls=0;I.info.render.vertices=0;I.info.render.faces=0;I.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,
this.autoClearDepth,this.autoClearStencil);h=a.__webglObjects;d=0;for(e=h.length;d<e;d++)if(f=h[d],g=f.object,f.id=d,f.render=!1,g.visible&&(!(g instanceof THREE.Mesh||g instanceof THREE.ParticleSystem)||!g.frustumCulled||wa.intersectsObject(g))){var u=g;u._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,u.matrixWorld);u._normalMatrix.getNormalMatrix(u._modelViewMatrix);var u=f,t=u.buffer,v=void 0,w=v=void 0,w=u.object.material;if(w instanceof THREE.MeshFaceMaterial)v=t.materialIndex,v=w.materials[v],
v.transparent?(u.transparent=v,u.opaque=null):(u.opaque=v,u.transparent=null);else if(v=w)v.transparent?(u.transparent=v,u.opaque=null):(u.opaque=v,u.transparent=null);f.render=!0;!0===this.sortObjects&&(null!==g.renderDepth?f.z=g.renderDepth:(Ea.getPositionFromMatrix(g.matrixWorld),Ea.applyProjection(kb),f.z=Ea.z))}this.sortObjects&&h.sort(k);h=a.__webglObjectsImmediate;d=0;for(e=h.length;d<e;d++)f=h[d],g=f.object,g.visible&&(g._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,g.matrixWorld),
g._normalMatrix.getNormalMatrix(g._modelViewMatrix),g=f.object.material,g.transparent?(f.transparent=g,f.opaque=null):(f.opaque=g,f.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),B(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),p(a.__webglObjects,!1,"",b,l,r,!0,d),q(a.__webglObjectsImmediate,"",b,l,r,!1,d)):(d=null,this.setBlending(THREE.NoBlending),
p(a.__webglObjects,!0,"opaque",b,l,r,!1,d),q(a.__webglObjectsImmediate,"opaque",b,l,r,!1,d),p(a.__webglObjects,!1,"transparent",b,l,r,!0,d),q(a.__webglObjectsImmediate,"transparent",b,l,r,!0,d));m(this.renderPluginsPost,a,b);c&&c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter&&(c instanceof THREE.WebGLRenderTargetCube?(n.bindTexture(n.TEXTURE_CUBE_MAP,c.__webglTexture),n.generateMipmap(n.TEXTURE_CUBE_MAP),n.bindTexture(n.TEXTURE_CUBE_MAP,null)):(n.bindTexture(n.TEXTURE_2D,
c.__webglTexture),n.generateMipmap(n.TEXTURE_2D),n.bindTexture(n.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=F(a,b,c,d,e);Y=-1;I.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,n,wa):e.render(function(a){I.renderBufferImmediate(a,f,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;)u(a.__objectsAdded[0],
a),a.__objectsAdded.splice(0,1);for(;a.__objectsRemoved.length;)x(a.__objectsRemoved[0],a),a.__objectsRemoved.splice(0,1);for(var b=0,g=a.__webglObjects.length;b<g;b++){var h=a.__webglObjects[b].object;void 0===h.__webglInit&&(void 0!==h.__webglActive&&x(h,a),u(h,a));var k=h,p=k.geometry,m=void 0,q=void 0,t=void 0;if(p instanceof THREE.BufferGeometry){var v=n.DYNAMIC_DRAW,la=!p.dynamic,z=p.attributes,y=void 0,A=void 0;for(y in z)A=z[y],A.needsUpdate&&("index"===y?(n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,
A.buffer),n.bufferData(n.ELEMENT_ARRAY_BUFFER,A.array,v)):(n.bindBuffer(n.ARRAY_BUFFER,A.buffer),n.bufferData(n.ARRAY_BUFFER,A.array,v)),A.needsUpdate=!1),la&&!A.dynamic&&(A.array=null)}else if(k instanceof THREE.Mesh){for(var C=0,F=p.geometryGroupsList.length;C<F;C++)if(m=p.geometryGroupsList[C],t=d(k,m),p.buffersNeedUpdate&&c(m,k),q=t.attributes&&r(t),p.verticesNeedUpdate||p.morphTargetsNeedUpdate||p.elementsNeedUpdate||p.uvsNeedUpdate||p.normalsNeedUpdate||p.colorsNeedUpdate||p.tangentsNeedUpdate||
q){var B=m,G=k,E=n.DYNAMIC_DRAW,J=!p.dynamic,H=t;if(B.__inittedArrays){var ab=e(H),K=H.vertexColors?H.vertexColors:!1,L=f(H),M=ab===THREE.SmoothShading,D=void 0,ia=void 0,P=void 0,I=void 0,Na=void 0,S=void 0,ca=void 0,U=void 0,W=void 0,Ba=void 0,na=void 0,R=void 0,Q=void 0,O=void 0,Y=void 0,V=void 0,sa=void 0,X=void 0,ba=void 0,ea=void 0,fa=void 0,ka=void 0,ga=void 0,ha=void 0,ja=void 0,ma=void 0,oa=void 0,qa=void 0,wa=void 0,da=void 0,za=void 0,Fa=void 0,Ja=void 0,Ha=void 0,ta=void 0,Oa=void 0,Ia=
void 0,Ga=void 0,Qa=void 0,Ra=void 0,lb=0,mb=0,Sa=0,Ta=0,Ya=0,nb=0,$a=0,Pa=0,hb=0,Da=0,Ka=0,T=0,Za=void 0,ob=B.__vertexArray,gb=B.__uvArray,yb=B.__uv2Array,zb=B.__normalArray,bb=B.__tangentArray,pb=B.__colorArray,cb=B.__skinIndexArray,db=B.__skinWeightArray,Db=B.__morphTargetsArrays,Eb=B.__morphNormalsArrays,wc=B.__webglCustomAttributesList,N=void 0,Yb=B.__faceArray,Ab=B.__lineArray,Ua=G.geometry,Tb=Ua.elementsNeedUpdate,Jb=Ua.uvsNeedUpdate,Ub=Ua.normalsNeedUpdate,Vb=Ua.tangentsNeedUpdate,Wb=Ua.colorsNeedUpdate,
Xb=Ua.morphTargetsNeedUpdate,xc=Ua.vertices,ra=B.faces3,qb=Ua.faces,Kb=Ua.faceVertexUvs[0],Lb=Ua.faceVertexUvs[1],yc=Ua.skinIndices,Zb=Ua.skinWeights,$b=Ua.morphTargets,Ec=Ua.morphNormals;if(Ua.verticesNeedUpdate){D=0;for(ia=ra.length;D<ia;D++)I=qb[ra[D]],R=xc[I.a],Q=xc[I.b],O=xc[I.c],ob[mb]=R.x,ob[mb+1]=R.y,ob[mb+2]=R.z,ob[mb+3]=Q.x,ob[mb+4]=Q.y,ob[mb+5]=Q.z,ob[mb+6]=O.x,ob[mb+7]=O.y,ob[mb+8]=O.z,mb+=9;n.bindBuffer(n.ARRAY_BUFFER,B.__webglVertexBuffer);n.bufferData(n.ARRAY_BUFFER,ob,E)}if(Xb)for(ta=
0,Oa=$b.length;ta<Oa;ta++){D=Ka=0;for(ia=ra.length;D<ia;D++)Qa=ra[D],I=qb[Qa],R=$b[ta].vertices[I.a],Q=$b[ta].vertices[I.b],O=$b[ta].vertices[I.c],Ia=Db[ta],Ia[Ka]=R.x,Ia[Ka+1]=R.y,Ia[Ka+2]=R.z,Ia[Ka+3]=Q.x,Ia[Ka+4]=Q.y,Ia[Ka+5]=Q.z,Ia[Ka+6]=O.x,Ia[Ka+7]=O.y,Ia[Ka+8]=O.z,H.morphNormals&&(M?(Ra=Ec[ta].vertexNormals[Qa],X=Ra.a,ba=Ra.b,ea=Ra.c):ea=ba=X=Ec[ta].faceNormals[Qa],Ga=Eb[ta],Ga[Ka]=X.x,Ga[Ka+1]=X.y,Ga[Ka+2]=X.z,Ga[Ka+3]=ba.x,Ga[Ka+4]=ba.y,Ga[Ka+5]=ba.z,Ga[Ka+6]=ea.x,Ga[Ka+7]=ea.y,Ga[Ka+8]=
ea.z),Ka+=9;n.bindBuffer(n.ARRAY_BUFFER,B.__webglMorphTargetsBuffers[ta]);n.bufferData(n.ARRAY_BUFFER,Db[ta],E);H.morphNormals&&(n.bindBuffer(n.ARRAY_BUFFER,B.__webglMorphNormalsBuffers[ta]),n.bufferData(n.ARRAY_BUFFER,Eb[ta],E))}if(Zb.length){D=0;for(ia=ra.length;D<ia;D++)I=qb[ra[D]],ha=Zb[I.a],ja=Zb[I.b],ma=Zb[I.c],db[Da]=ha.x,db[Da+1]=ha.y,db[Da+2]=ha.z,db[Da+3]=ha.w,db[Da+4]=ja.x,db[Da+5]=ja.y,db[Da+6]=ja.z,db[Da+7]=ja.w,db[Da+8]=ma.x,db[Da+9]=ma.y,db[Da+10]=ma.z,db[Da+11]=ma.w,oa=yc[I.a],qa=
yc[I.b],wa=yc[I.c],cb[Da]=oa.x,cb[Da+1]=oa.y,cb[Da+2]=oa.z,cb[Da+3]=oa.w,cb[Da+4]=qa.x,cb[Da+5]=qa.y,cb[Da+6]=qa.z,cb[Da+7]=qa.w,cb[Da+8]=wa.x,cb[Da+9]=wa.y,cb[Da+10]=wa.z,cb[Da+11]=wa.w,Da+=12;0<Da&&(n.bindBuffer(n.ARRAY_BUFFER,B.__webglSkinIndicesBuffer),n.bufferData(n.ARRAY_BUFFER,cb,E),n.bindBuffer(n.ARRAY_BUFFER,B.__webglSkinWeightsBuffer),n.bufferData(n.ARRAY_BUFFER,db,E))}if(Wb&&K){D=0;for(ia=ra.length;D<ia;D++)I=qb[ra[D]],ca=I.vertexColors,U=I.color,3===ca.length&&K===THREE.VertexColors?(fa=
ca[0],ka=ca[1],ga=ca[2]):ga=ka=fa=U,pb[hb]=fa.r,pb[hb+1]=fa.g,pb[hb+2]=fa.b,pb[hb+3]=ka.r,pb[hb+4]=ka.g,pb[hb+5]=ka.b,pb[hb+6]=ga.r,pb[hb+7]=ga.g,pb[hb+8]=ga.b,hb+=9;0<hb&&(n.bindBuffer(n.ARRAY_BUFFER,B.__webglColorBuffer),n.bufferData(n.ARRAY_BUFFER,pb,E))}if(Vb&&Ua.hasTangents){D=0;for(ia=ra.length;D<ia;D++)I=qb[ra[D]],W=I.vertexTangents,Y=W[0],V=W[1],sa=W[2],bb[$a]=Y.x,bb[$a+1]=Y.y,bb[$a+2]=Y.z,bb[$a+3]=Y.w,bb[$a+4]=V.x,bb[$a+5]=V.y,bb[$a+6]=V.z,bb[$a+7]=V.w,bb[$a+8]=sa.x,bb[$a+9]=sa.y,bb[$a+10]=
sa.z,bb[$a+11]=sa.w,$a+=12;n.bindBuffer(n.ARRAY_BUFFER,B.__webglTangentBuffer);n.bufferData(n.ARRAY_BUFFER,bb,E)}if(Ub&&ab){D=0;for(ia=ra.length;D<ia;D++)if(I=qb[ra[D]],Na=I.vertexNormals,S=I.normal,3===Na.length&&M)for(da=0;3>da;da++)Fa=Na[da],zb[nb]=Fa.x,zb[nb+1]=Fa.y,zb[nb+2]=Fa.z,nb+=3;else for(da=0;3>da;da++)zb[nb]=S.x,zb[nb+1]=S.y,zb[nb+2]=S.z,nb+=3;n.bindBuffer(n.ARRAY_BUFFER,B.__webglNormalBuffer);n.bufferData(n.ARRAY_BUFFER,zb,E)}if(Jb&&Kb&&L){D=0;for(ia=ra.length;D<ia;D++)if(P=ra[D],Ba=
Kb[P],void 0!==Ba)for(da=0;3>da;da++)Ja=Ba[da],gb[Sa]=Ja.x,gb[Sa+1]=Ja.y,Sa+=2;0<Sa&&(n.bindBuffer(n.ARRAY_BUFFER,B.__webglUVBuffer),n.bufferData(n.ARRAY_BUFFER,gb,E))}if(Jb&&Lb&&L){D=0;for(ia=ra.length;D<ia;D++)if(P=ra[D],na=Lb[P],void 0!==na)for(da=0;3>da;da++)Ha=na[da],yb[Ta]=Ha.x,yb[Ta+1]=Ha.y,Ta+=2;0<Ta&&(n.bindBuffer(n.ARRAY_BUFFER,B.__webglUV2Buffer),n.bufferData(n.ARRAY_BUFFER,yb,E))}if(Tb){D=0;for(ia=ra.length;D<ia;D++)Yb[Ya]=lb,Yb[Ya+1]=lb+1,Yb[Ya+2]=lb+2,Ya+=3,Ab[Pa]=lb,Ab[Pa+1]=lb+1,Ab[Pa+
2]=lb,Ab[Pa+3]=lb+2,Ab[Pa+4]=lb+1,Ab[Pa+5]=lb+2,Pa+=6,lb+=3;n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,B.__webglFaceBuffer);n.bufferData(n.ELEMENT_ARRAY_BUFFER,Yb,E);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,B.__webglLineBuffer);n.bufferData(n.ELEMENT_ARRAY_BUFFER,Ab,E)}if(wc)for(da=0,za=wc.length;da<za;da++)if(N=wc[da],N.__original.needsUpdate){T=0;if(1===N.size)if(void 0===N.boundTo||"vertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)I=qb[ra[D]],N.array[T]=N.value[I.a],N.array[T+1]=N.value[I.b],N.array[T+
2]=N.value[I.c],T+=3;else{if("faces"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)Za=N.value[ra[D]],N.array[T]=Za,N.array[T+1]=Za,N.array[T+2]=Za,T+=3}else if(2===N.size)if(void 0===N.boundTo||"vertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)I=qb[ra[D]],R=N.value[I.a],Q=N.value[I.b],O=N.value[I.c],N.array[T]=R.x,N.array[T+1]=R.y,N.array[T+2]=Q.x,N.array[T+3]=Q.y,N.array[T+4]=O.x,N.array[T+5]=O.y,T+=6;else{if("faces"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)O=Q=R=Za=N.value[ra[D]],N.array[T]=R.x,
N.array[T+1]=R.y,N.array[T+2]=Q.x,N.array[T+3]=Q.y,N.array[T+4]=O.x,N.array[T+5]=O.y,T+=6}else if(3===N.size){var Ca;Ca="c"===N.type?["r","g","b"]:["x","y","z"];if(void 0===N.boundTo||"vertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)I=qb[ra[D]],R=N.value[I.a],Q=N.value[I.b],O=N.value[I.c],N.array[T]=R[Ca[0]],N.array[T+1]=R[Ca[1]],N.array[T+2]=R[Ca[2]],N.array[T+3]=Q[Ca[0]],N.array[T+4]=Q[Ca[1]],N.array[T+5]=Q[Ca[2]],N.array[T+6]=O[Ca[0]],N.array[T+7]=O[Ca[1]],N.array[T+8]=O[Ca[2]],T+=9;else if("faces"===
N.boundTo)for(D=0,ia=ra.length;D<ia;D++)O=Q=R=Za=N.value[ra[D]],N.array[T]=R[Ca[0]],N.array[T+1]=R[Ca[1]],N.array[T+2]=R[Ca[2]],N.array[T+3]=Q[Ca[0]],N.array[T+4]=Q[Ca[1]],N.array[T+5]=Q[Ca[2]],N.array[T+6]=O[Ca[0]],N.array[T+7]=O[Ca[1]],N.array[T+8]=O[Ca[2]],T+=9;else if("faceVertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)Za=N.value[ra[D]],R=Za[0],Q=Za[1],O=Za[2],N.array[T]=R[Ca[0]],N.array[T+1]=R[Ca[1]],N.array[T+2]=R[Ca[2]],N.array[T+3]=Q[Ca[0]],N.array[T+4]=Q[Ca[1]],N.array[T+5]=Q[Ca[2]],
N.array[T+6]=O[Ca[0]],N.array[T+7]=O[Ca[1]],N.array[T+8]=O[Ca[2]],T+=9}else if(4===N.size)if(void 0===N.boundTo||"vertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)I=qb[ra[D]],R=N.value[I.a],Q=N.value[I.b],O=N.value[I.c],N.array[T]=R.x,N.array[T+1]=R.y,N.array[T+2]=R.z,N.array[T+3]=R.w,N.array[T+4]=Q.x,N.array[T+5]=Q.y,N.array[T+6]=Q.z,N.array[T+7]=Q.w,N.array[T+8]=O.x,N.array[T+9]=O.y,N.array[T+10]=O.z,N.array[T+11]=O.w,T+=12;else if("faces"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)O=Q=R=Za=N.value[ra[D]],
N.array[T]=R.x,N.array[T+1]=R.y,N.array[T+2]=R.z,N.array[T+3]=R.w,N.array[T+4]=Q.x,N.array[T+5]=Q.y,N.array[T+6]=Q.z,N.array[T+7]=Q.w,N.array[T+8]=O.x,N.array[T+9]=O.y,N.array[T+10]=O.z,N.array[T+11]=O.w,T+=12;else if("faceVertices"===N.boundTo)for(D=0,ia=ra.length;D<ia;D++)Za=N.value[ra[D]],R=Za[0],Q=Za[1],O=Za[2],N.array[T]=R.x,N.array[T+1]=R.y,N.array[T+2]=R.z,N.array[T+3]=R.w,N.array[T+4]=Q.x,N.array[T+5]=Q.y,N.array[T+6]=Q.z,N.array[T+7]=Q.w,N.array[T+8]=O.x,N.array[T+9]=O.y,N.array[T+10]=O.z,
N.array[T+11]=O.w,T+=12;n.bindBuffer(n.ARRAY_BUFFER,N.buffer);n.bufferData(n.ARRAY_BUFFER,N.array,E)}J&&(delete B.__inittedArrays,delete B.__colorArray,delete B.__normalArray,delete B.__tangentArray,delete B.__uvArray,delete B.__uv2Array,delete B.__faceArray,delete B.__vertexArray,delete B.__lineArray,delete B.__skinIndexArray,delete B.__skinWeightArray)}}p.verticesNeedUpdate=!1;p.morphTargetsNeedUpdate=!1;p.elementsNeedUpdate=!1;p.uvsNeedUpdate=!1;p.normalsNeedUpdate=!1;p.colorsNeedUpdate=!1;p.tangentsNeedUpdate=
!1;p.buffersNeedUpdate=!1;t.attributes&&w(t)}else if(k instanceof THREE.Ribbon){t=d(k,p);q=t.attributes&&r(t);if(p.verticesNeedUpdate||p.colorsNeedUpdate||p.normalsNeedUpdate||q){var eb=p,ac=n.DYNAMIC_DRAW,Mb=void 0,Nb=void 0,Ob=void 0,bc=void 0,ua=void 0,cc=void 0,dc=void 0,ec=void 0,Fc=void 0,La=void 0,Gb=void 0,xa=void 0,Va=void 0,Gc=eb.vertices,Hc=eb.colors,Ic=eb.normals,pc=Gc.length,qc=Hc.length,rc=Ic.length,fc=eb.__vertexArray,gc=eb.__colorArray,hc=eb.__normalArray,sc=eb.colorsNeedUpdate,tc=
eb.normalsNeedUpdate,zc=eb.__webglCustomAttributesList;if(eb.verticesNeedUpdate){for(Mb=0;Mb<pc;Mb++)bc=Gc[Mb],ua=3*Mb,fc[ua]=bc.x,fc[ua+1]=bc.y,fc[ua+2]=bc.z;n.bindBuffer(n.ARRAY_BUFFER,eb.__webglVertexBuffer);n.bufferData(n.ARRAY_BUFFER,fc,ac)}if(sc){for(Nb=0;Nb<qc;Nb++)cc=Hc[Nb],ua=3*Nb,gc[ua]=cc.r,gc[ua+1]=cc.g,gc[ua+2]=cc.b;n.bindBuffer(n.ARRAY_BUFFER,eb.__webglColorBuffer);n.bufferData(n.ARRAY_BUFFER,gc,ac)}if(tc){for(Ob=0;Ob<rc;Ob++)dc=Ic[Ob],ua=3*Ob,hc[ua]=dc.x,hc[ua+1]=dc.y,hc[ua+2]=dc.z;
n.bindBuffer(n.ARRAY_BUFFER,eb.__webglNormalBuffer);n.bufferData(n.ARRAY_BUFFER,hc,ac)}if(zc)for(ec=0,Fc=zc.length;ec<Fc;ec++)if(xa=zc[ec],xa.needsUpdate&&(void 0===xa.boundTo||"vertices"===xa.boundTo)){ua=0;Gb=xa.value.length;if(1===xa.size)for(La=0;La<Gb;La++)xa.array[La]=xa.value[La];else if(2===xa.size)for(La=0;La<Gb;La++)Va=xa.value[La],xa.array[ua]=Va.x,xa.array[ua+1]=Va.y,ua+=2;else if(3===xa.size)if("c"===xa.type)for(La=0;La<Gb;La++)Va=xa.value[La],xa.array[ua]=Va.r,xa.array[ua+1]=Va.g,xa.array[ua+
2]=Va.b,ua+=3;else for(La=0;La<Gb;La++)Va=xa.value[La],xa.array[ua]=Va.x,xa.array[ua+1]=Va.y,xa.array[ua+2]=Va.z,ua+=3;else if(4===xa.size)for(La=0;La<Gb;La++)Va=xa.value[La],xa.array[ua]=Va.x,xa.array[ua+1]=Va.y,xa.array[ua+2]=Va.z,xa.array[ua+3]=Va.w,ua+=4;n.bindBuffer(n.ARRAY_BUFFER,xa.buffer);n.bufferData(n.ARRAY_BUFFER,xa.array,ac)}}p.verticesNeedUpdate=!1;p.colorsNeedUpdate=!1;p.normalsNeedUpdate=!1;t.attributes&&w(t)}else if(k instanceof THREE.Line){t=d(k,p);q=t.attributes&&r(t);if(p.verticesNeedUpdate||
p.colorsNeedUpdate||p.lineDistancesNeedUpdate||q){var fb=p,ic=n.DYNAMIC_DRAW,Pb=void 0,Qb=void 0,Rb=void 0,jc=void 0,Aa=void 0,kc=void 0,Jc=fb.vertices,Kc=fb.colors,Lc=fb.lineDistances,uc=Jc.length,vc=Kc.length,Rc=Lc.length,lc=fb.__vertexArray,mc=fb.__colorArray,Mc=fb.__lineDistanceArray,Sc=fb.colorsNeedUpdate,Tc=fb.lineDistancesNeedUpdate,Ac=fb.__webglCustomAttributesList,nc=void 0,Nc=void 0,Ma=void 0,Hb=void 0,Wa=void 0,ya=void 0;if(fb.verticesNeedUpdate){for(Pb=0;Pb<uc;Pb++)jc=Jc[Pb],Aa=3*Pb,lc[Aa]=
jc.x,lc[Aa+1]=jc.y,lc[Aa+2]=jc.z;n.bindBuffer(n.ARRAY_BUFFER,fb.__webglVertexBuffer);n.bufferData(n.ARRAY_BUFFER,lc,ic)}if(Sc){for(Qb=0;Qb<vc;Qb++)kc=Kc[Qb],Aa=3*Qb,mc[Aa]=kc.r,mc[Aa+1]=kc.g,mc[Aa+2]=kc.b;n.bindBuffer(n.ARRAY_BUFFER,fb.__webglColorBuffer);n.bufferData(n.ARRAY_BUFFER,mc,ic)}if(Tc){for(Rb=0;Rb<Rc;Rb++)Mc[Rb]=Lc[Rb];n.bindBuffer(n.ARRAY_BUFFER,fb.__webglLineDistanceBuffer);n.bufferData(n.ARRAY_BUFFER,Mc,ic)}if(Ac)for(nc=0,Nc=Ac.length;nc<Nc;nc++)if(ya=Ac[nc],ya.needsUpdate&&(void 0===
ya.boundTo||"vertices"===ya.boundTo)){Aa=0;Hb=ya.value.length;if(1===ya.size)for(Ma=0;Ma<Hb;Ma++)ya.array[Ma]=ya.value[Ma];else if(2===ya.size)for(Ma=0;Ma<Hb;Ma++)Wa=ya.value[Ma],ya.array[Aa]=Wa.x,ya.array[Aa+1]=Wa.y,Aa+=2;else if(3===ya.size)if("c"===ya.type)for(Ma=0;Ma<Hb;Ma++)Wa=ya.value[Ma],ya.array[Aa]=Wa.r,ya.array[Aa+1]=Wa.g,ya.array[Aa+2]=Wa.b,Aa+=3;else for(Ma=0;Ma<Hb;Ma++)Wa=ya.value[Ma],ya.array[Aa]=Wa.x,ya.array[Aa+1]=Wa.y,ya.array[Aa+2]=Wa.z,Aa+=3;else if(4===ya.size)for(Ma=0;Ma<Hb;Ma++)Wa=
ya.value[Ma],ya.array[Aa]=Wa.x,ya.array[Aa+1]=Wa.y,ya.array[Aa+2]=Wa.z,ya.array[Aa+3]=Wa.w,Aa+=4;n.bindBuffer(n.ARRAY_BUFFER,ya.buffer);n.bufferData(n.ARRAY_BUFFER,ya.array,ic)}}p.verticesNeedUpdate=!1;p.colorsNeedUpdate=!1;p.lineDistancesNeedUpdate=!1;t.attributes&&w(t)}else if(k instanceof THREE.ParticleSystem){t=d(k,p);q=t.attributes&&r(t);if(p.verticesNeedUpdate||p.colorsNeedUpdate||k.sortParticles||q){var rb=p,Bc=n.DYNAMIC_DRAW,Sb=k,Xa=void 0,sb=void 0,tb=void 0,aa=void 0,ub=void 0,xb=void 0,
oc=rb.vertices,Cc=oc.length,Dc=rb.colors,Oc=Dc.length,Bb=rb.__vertexArray,Cb=rb.__colorArray,vb=rb.__sortArray,Pc=rb.verticesNeedUpdate,Qc=rb.colorsNeedUpdate,wb=rb.__webglCustomAttributesList,ib=void 0,Ib=void 0,pa=void 0,jb=void 0,va=void 0,Z=void 0;if(Sb.sortParticles){Fb.copy(kb);Fb.multiply(Sb.matrixWorld);for(Xa=0;Xa<Cc;Xa++)tb=oc[Xa],Ea.copy(tb),Ea.applyProjection(Fb),vb[Xa]=[Ea.z,Xa];vb.sort(l);for(Xa=0;Xa<Cc;Xa++)tb=oc[vb[Xa][1]],aa=3*Xa,Bb[aa]=tb.x,Bb[aa+1]=tb.y,Bb[aa+2]=tb.z;for(sb=0;sb<
Oc;sb++)aa=3*sb,xb=Dc[vb[sb][1]],Cb[aa]=xb.r,Cb[aa+1]=xb.g,Cb[aa+2]=xb.b;if(wb)for(ib=0,Ib=wb.length;ib<Ib;ib++)if(Z=wb[ib],void 0===Z.boundTo||"vertices"===Z.boundTo)if(aa=0,jb=Z.value.length,1===Z.size)for(pa=0;pa<jb;pa++)ub=vb[pa][1],Z.array[pa]=Z.value[ub];else if(2===Z.size)for(pa=0;pa<jb;pa++)ub=vb[pa][1],va=Z.value[ub],Z.array[aa]=va.x,Z.array[aa+1]=va.y,aa+=2;else if(3===Z.size)if("c"===Z.type)for(pa=0;pa<jb;pa++)ub=vb[pa][1],va=Z.value[ub],Z.array[aa]=va.r,Z.array[aa+1]=va.g,Z.array[aa+2]=
va.b,aa+=3;else for(pa=0;pa<jb;pa++)ub=vb[pa][1],va=Z.value[ub],Z.array[aa]=va.x,Z.array[aa+1]=va.y,Z.array[aa+2]=va.z,aa+=3;else if(4===Z.size)for(pa=0;pa<jb;pa++)ub=vb[pa][1],va=Z.value[ub],Z.array[aa]=va.x,Z.array[aa+1]=va.y,Z.array[aa+2]=va.z,Z.array[aa+3]=va.w,aa+=4}else{if(Pc)for(Xa=0;Xa<Cc;Xa++)tb=oc[Xa],aa=3*Xa,Bb[aa]=tb.x,Bb[aa+1]=tb.y,Bb[aa+2]=tb.z;if(Qc)for(sb=0;sb<Oc;sb++)xb=Dc[sb],aa=3*sb,Cb[aa]=xb.r,Cb[aa+1]=xb.g,Cb[aa+2]=xb.b;if(wb)for(ib=0,Ib=wb.length;ib<Ib;ib++)if(Z=wb[ib],Z.needsUpdate&&
(void 0===Z.boundTo||"vertices"===Z.boundTo))if(jb=Z.value.length,aa=0,1===Z.size)for(pa=0;pa<jb;pa++)Z.array[pa]=Z.value[pa];else if(2===Z.size)for(pa=0;pa<jb;pa++)va=Z.value[pa],Z.array[aa]=va.x,Z.array[aa+1]=va.y,aa+=2;else if(3===Z.size)if("c"===Z.type)for(pa=0;pa<jb;pa++)va=Z.value[pa],Z.array[aa]=va.r,Z.array[aa+1]=va.g,Z.array[aa+2]=va.b,aa+=3;else for(pa=0;pa<jb;pa++)va=Z.value[pa],Z.array[aa]=va.x,Z.array[aa+1]=va.y,Z.array[aa+2]=va.z,aa+=3;else if(4===Z.size)for(pa=0;pa<jb;pa++)va=Z.value[pa],
Z.array[aa]=va.x,Z.array[aa+1]=va.y,Z.array[aa+2]=va.z,Z.array[aa+3]=va.w,aa+=4}if(Pc||Sb.sortParticles)n.bindBuffer(n.ARRAY_BUFFER,rb.__webglVertexBuffer),n.bufferData(n.ARRAY_BUFFER,Bb,Bc);if(Qc||Sb.sortParticles)n.bindBuffer(n.ARRAY_BUFFER,rb.__webglColorBuffer),n.bufferData(n.ARRAY_BUFFER,Cb,Bc);if(wb)for(ib=0,Ib=wb.length;ib<Ib;ib++)if(Z=wb[ib],Z.needsUpdate||Sb.sortParticles)n.bindBuffer(n.ARRAY_BUFFER,Z.buffer),n.bufferData(n.ARRAY_BUFFER,Z.array,Bc)}p.verticesNeedUpdate=!1;p.colorsNeedUpdate=
!1;t.attributes&&w(t)}}};this.initMaterial=function(a,b,c,d){var e,f,g,h;a.addEventListener("dispose",Xb);var k,l,p,m,q;a instanceof THREE.MeshDepthMaterial?q="depth":a instanceof THREE.MeshNormalMaterial?q="normal":a instanceof THREE.MeshBasicMaterial?q="basic":a instanceof THREE.MeshLambertMaterial?q="lambert":a instanceof THREE.MeshPhongMaterial?q="phong":a instanceof THREE.LineBasicMaterial?q="basic":a instanceof THREE.LineDashedMaterial?q="dashed":a instanceof THREE.ParticleBasicMaterial&&(q=
"particle_basic");if(q){var r=THREE.ShaderLib[q];a.uniforms=THREE.UniformsUtils.clone(r.uniforms);a.vertexShader=r.vertexShader;a.fragmentShader=r.fragmentShader}var t=e=0,u=0,v=r=0;for(f=b.length;v<f;v++)g=b[v],g.onlyShadow||(g instanceof THREE.DirectionalLight&&e++,g instanceof THREE.PointLight&&t++,g instanceof THREE.SpotLight&&u++,g instanceof THREE.HemisphereLight&&r++);f=t;g=u;h=r;u=r=0;for(t=b.length;u<t;u++)v=b[u],v.castShadow&&(v instanceof THREE.SpotLight&&r++,v instanceof THREE.DirectionalLight&&
!v.shadowCascade&&r++);m=r;Db&&d&&d.useVertexTexture?p=1024:(b=n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),p=b);a:{u=a.fragmentShader;t=a.vertexShader;r=a.uniforms;b=a.attributes;v=a.defines;c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,
normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:p,useVertexTexture:Db&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:f,maxSpotLights:g,maxHemiLights:h,
maxShadows:m,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide};d=a.index0AttributeName;var w,z,x;e=[];q?e.push(q):(e.push(u),e.push(t));for(z in v)e.push(z),e.push(v[z]);for(w in c)e.push(w),e.push(c[w]);q=e.join();w=0;for(z=da.length;w<
z;w++)if(e=da[w],e.code===q){e.usedTimes++;l=e.program;break a}w="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?w="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(w="SHADOWMAP_TYPE_PCF_SOFT");z=[];for(x in v)e=v[x],!1!==e&&(e="#define "+x+" "+e,z.push(e));e=z.join("\n");x=n.createProgram();z=["precision "+U+" float;","precision "+U+" int;",e,yb?"#define VERTEX_TEXTURES":"",I.gammaInput?"#define GAMMA_INPUT":"",I.gammaOutput?"#define GAMMA_OUTPUT":"",I.physicallyBasedShading?
"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?
"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+w:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
w=["precision "+U+" float;","precision "+U+" int;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",e,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",I.gammaInput?"#define GAMMA_INPUT":"",I.gammaOutput?"#define GAMMA_OUTPUT":"",I.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":
"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+w:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");z=M("vertex",z+t);w=M("fragment",w+u);n.attachShader(x,z);n.attachShader(x,w);d&&n.bindAttribLocation(x,0,d);n.linkProgram(x);n.getProgramParameter(x,n.LINK_STATUS)||(console.error("Could not initialise shader\nVALIDATE_STATUS: "+n.getProgramParameter(x,
n.VALIDATE_STATUS)+", gl error ["+n.getError()+"]"),console.error("Program Info Log: "+n.getProgramInfoLog(x)));n.deleteShader(w);n.deleteShader(z);x.uniforms={};x.attributes={};var y;w="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?w.push("boneTexture"):w.push("boneGlobalMatrices");for(y in r)w.push(y);y=w;w=0;for(z=y.length;w<z;w++)r=y[w],x.uniforms[r]=n.getUniformLocation(x,r);w="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");
for(y=0;y<c.maxMorphTargets;y++)w.push("morphTarget"+y);for(y=0;y<c.maxMorphNormals;y++)w.push("morphNormal"+y);for(l in b)w.push(l);l=w;y=0;for(b=l.length;y<b;y++)w=l[y],x.attributes[w]=n.getAttribLocation(x,w);x.id=la++;da.push({program:x,code:q,usedTimes:1});I.info.memory.programs=da.length;l=x}a.program=l;y=a.program.attributes;if(a.morphTargets)for(a.numSupportedMorphTargets=0,b="morphTarget",l=0;l<this.maxMorphTargets;l++)x=b+l,0<=y[x]&&a.numSupportedMorphTargets++;if(a.morphNormals)for(a.numSupportedMorphNormals=
0,b="morphNormal",l=0;l<this.maxMorphNormals;l++)x=b+l,0<=y[x]&&a.numSupportedMorphNormals++;a.uniformsList=[];for(k in a.uniforms)a.uniformsList.push([a.uniforms[k],k])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?n.disable(n.CULL_FACE):(b===THREE.FrontFaceDirectionCW?n.frontFace(n.CW):n.frontFace(n.CCW),a===THREE.CullFaceBack?n.cullFace(n.BACK):a===THREE.CullFaceFront?n.cullFace(n.FRONT):n.cullFace(n.FRONT_AND_BACK),n.enable(n.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===
THREE.DoubleSide;a=a.side===THREE.BackSide;R!==b&&(b?n.disable(n.CULL_FACE):n.enable(n.CULL_FACE),R=b);ka!==a&&(a?n.frontFace(n.CW):n.frontFace(n.CCW),ka=a)};this.setDepthTest=function(a){qa!==a&&(a?n.enable(n.DEPTH_TEST):n.disable(n.DEPTH_TEST),qa=a)};this.setDepthWrite=function(a){za!==a&&(n.depthMask(a),za=a)};this.setBlending=function(a,b,c,d){a!==ea&&(a===THREE.NoBlending?n.disable(n.BLEND):a===THREE.AdditiveBlending?(n.enable(n.BLEND),n.blendEquation(n.FUNC_ADD),n.blendFunc(n.SRC_ALPHA,n.ONE)):
a===THREE.SubtractiveBlending?(n.enable(n.BLEND),n.blendEquation(n.FUNC_ADD),n.blendFunc(n.ZERO,n.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(n.enable(n.BLEND),n.blendEquation(n.FUNC_ADD),n.blendFunc(n.ZERO,n.SRC_COLOR)):a===THREE.CustomBlending?n.enable(n.BLEND):(n.enable(n.BLEND),n.blendEquationSeparate(n.FUNC_ADD,n.FUNC_ADD),n.blendFuncSeparate(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA)),ea=a);if(a===THREE.CustomBlending){if(b!==Ia&&(n.blendEquation(E(b)),Ia=b),c!==Fa||
d!==Ja)n.blendFunc(E(c),E(d)),Fa=c,Ja=d}else Ja=Fa=Ia=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Eb),a.__webglTexture=n.createTexture(),I.info.memory.textures++);n.activeTexture(n.TEXTURE0+b);n.bindTexture(n.TEXTURE_2D,a.__webglTexture);n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,a.flipY);n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);n.pixelStorei(n.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=S(c.width)&&
S(c.height),e=E(a.format),f=E(a.type);P(n.TEXTURE_2D,a,d);var g=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<g.length&&d){for(var h=0,k=g.length;h<k;h++)c=g[h],n.texImage2D(n.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data);a.generateMipmaps=!1}else n.texImage2D(n.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data);else if(a instanceof THREE.CompressedTexture)for(h=0,k=g.length;h<k;h++)c=g[h],n.compressedTexImage2D(n.TEXTURE_2D,h,e,c.width,c.height,0,c.data);else if(0<g.length&&d){h=0;for(k=g.length;h<
k;h++)c=g[h],n.texImage2D(n.TEXTURE_2D,h,e,e,f,c);a.generateMipmaps=!1}else n.texImage2D(n.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&n.generateMipmap(n.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else n.activeTexture(n.TEXTURE0+b),n.bindTexture(n.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",
Wb);a.__webglTexture=n.createTexture();I.info.memory.textures++;var c=S(a.width)&&S(a.height),d=E(a.format),e=E(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];n.bindTexture(n.TEXTURE_CUBE_MAP,a.__webglTexture);P(n.TEXTURE_CUBE_MAP,a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=n.createFramebuffer();a.__webglRenderbuffer[f]=n.createRenderbuffer();n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var g=a,h=n.TEXTURE_CUBE_MAP_POSITIVE_X+f;n.bindFramebuffer(n.FRAMEBUFFER,
a.__webglFramebuffer[f]);n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,h,g.__webglTexture,0);X(a.__webglRenderbuffer[f],a)}c&&n.generateMipmap(n.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=n.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:n.createRenderbuffer(),n.bindTexture(n.TEXTURE_2D,a.__webglTexture),P(n.TEXTURE_2D,a,c),n.texImage2D(n.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=n.TEXTURE_2D,n.bindFramebuffer(n.FRAMEBUFFER,a.__webglFramebuffer),
n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,a.__webglRenderbuffer):X(a.__webglRenderbuffer,a),c&&n.generateMipmap(n.TEXTURE_2D);b?n.bindTexture(n.TEXTURE_CUBE_MAP,null):n.bindTexture(n.TEXTURE_2D,null);n.bindRenderbuffer(n.RENDERBUFFER,
null);n.bindFramebuffer(n.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=Ta,a=ab,d=Ha,e=Sa);b!==ca&&(n.bindFramebuffer(n.FRAMEBUFFER,b),n.viewport(d,e,c,a),ca=b);ia=c;Na=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;
return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};
THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};
THREE.RenderableFace3=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.material=this.color=null;this.uvs=[[]];this.z=
0};THREE.RenderableObject=function(){this.id=0;this.object=null;this.z=0};THREE.RenderableParticle=function(){this.id=0;this.object=null;this.z=this.y=this.x=0;this.rotation=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.id=0;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.vertexColors=[new THREE.Color,new THREE.Color];this.material=null;this.z=0};
THREE.GeometryUtils={merge:function(a,b,c){var d,e,f=a.vertices.length,g=b instanceof THREE.Mesh?b.geometry:b,h=a.vertices,k=g.vertices,l=a.faces,m=g.faces;a=a.faceVertexUvs[0];g=g.faceVertexUvs[0];void 0===c&&(c=0);b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,e=(new THREE.Matrix3).getNormalMatrix(d));b=0;for(var p=k.length;b<p;b++){var q=k[b].clone();d&&q.applyMatrix4(d);h.push(q)}b=0;for(p=m.length;b<p;b++){var q=m[b],u,t,r=q.vertexNormals,w=q.vertexColors;u=new THREE.Face3(q.a+
f,q.b+f,q.c+f);u.normal.copy(q.normal);e&&u.normal.applyMatrix3(e).normalize();h=0;for(k=r.length;h<k;h++)t=r[h].clone(),e&&t.applyMatrix3(e).normalize(),u.vertexNormals.push(t);u.color.copy(q.color);h=0;for(k=w.length;h<k;h++)t=w[h],u.vertexColors.push(t.clone());u.materialIndex=q.materialIndex+c;u.centroid.copy(q.centroid);d&&u.centroid.applyMatrix4(d);l.push(u)}b=0;for(p=g.length;b<p;b++){c=g[b];d=[];h=0;for(k=c.length;h<k;h++)d.push(new THREE.Vector2(c[h].x,c[h].y));a.push(d)}},randomPointInTriangle:function(){var a=
new THREE.Vector3;return function(b,c,d){var e=new THREE.Vector3,f=THREE.Math.random16(),g=THREE.Math.random16();1<f+g&&(f=1-f,g=1-g);var h=1-f-g;e.copy(b);e.multiplyScalar(f);a.copy(c);a.multiplyScalar(g);e.add(a);a.copy(d);a.multiplyScalar(h);e.add(a);return e}}(),randomPointInFace:function(a,b,c){return THREE.GeometryUtils.randomPointInTriangle(b.vertices[a.a],b.vertices[a.b],b.vertices[a.c])},randomPointsInGeometry:function(a,b){function c(a){function b(c,d){if(d<c)return c;var e=c+Math.floor((d-
c)/2);return l[e]>a?b(c,e-1):l[e]<a?b(e+1,d):e}return b(0,l.length-1)}var d,e,f=a.faces,g=a.vertices,h=f.length,k=0,l=[],m,p,q;for(e=0;e<h;e++)d=f[e],m=g[d.a],p=g[d.b],q=g[d.c],d._area=THREE.GeometryUtils.triangleArea(m,p,q),k+=d._area,l[e]=k;d=[];for(e=0;e<b;e++)g=THREE.Math.random16()*k,g=c(g),d[e]=THREE.GeometryUtils.randomPointInFace(f[g],a,!0);return d},triangleArea:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){a.subVectors(d,c);b.subVectors(e,c);a.cross(b);return.5*
a.length()}}(),center:function(a){a.computeBoundingBox();var b=a.boundingBox,c=new THREE.Vector3;c.addVectors(b.min,b.max);c.multiplyScalar(-.5);a.applyMatrix((new THREE.Matrix4).makeTranslation(c.x,c.y,c.z));a.computeBoundingBox();return c},triangulateQuads:function(a){var b,c,d,e,f=[],g=[];b=0;for(c=a.faceVertexUvs.length;b<c;b++)g[b]=[];b=0;for(c=a.faces.length;b<c;b++)for(f.push(a.faces[b]),d=0,e=a.faceVertexUvs.length;d<e;d++)g[d].push(a.faceVertexUvs[d][b]);a.faces=f;a.faceVertexUvs=g;a.computeCentroids();
a.computeFaceNormals();a.computeVertexNormals();a.hasTangents&&a.computeTangents()}};
THREE.ImageUtils={crossOrigin:"anonymous",loadTexture:function(a,b,c,d){d=new Image;var e=new THREE.Texture(d,b);b=new THREE.ImageLoader;b.crossOrigin=this.crossOrigin;b.load(a,function(a){e.image=a;e.needsUpdate=!0;c&&c(e)});e.sourceFile=a;return e},loadCompressedTexture:function(a,b,c,d){var e=new THREE.CompressedTexture;e.mapping=b;var f=new XMLHttpRequest;f.onload=function(){var a=THREE.ImageUtils.parseDDS(f.response,!0);e.format=a.format;e.mipmaps=a.mipmaps;e.image.width=a.width;e.image.height=
a.height;e.generateMipmaps=!1;e.needsUpdate=!0;c&&c(e)};f.onerror=d;f.open("GET",a,!0);f.responseType="arraybuffer";f.send(null);return e},loadTextureCube:function(a,b,c,d){var e=[];e.loadCount=0;var f=new THREE.Texture;f.image=e;void 0!==b&&(f.mapping=b);f.flipY=!1;b=0;for(var g=a.length;b<g;++b){var h=new Image;e[b]=h;h.onload=function(){e.loadCount+=1;6===e.loadCount&&(f.needsUpdate=!0,c&&c(f))};h.onerror=d;h.crossOrigin=this.crossOrigin;h.src=a[b]}return f},loadCompressedTextureCube:function(a,
b,c,d){var e=[];e.loadCount=0;var f=new THREE.CompressedTexture;f.image=e;void 0!==b&&(f.mapping=b);f.flipY=!1;f.generateMipmaps=!1;b=function(a,b){return function(){var d=THREE.ImageUtils.parseDDS(a.response,!0);b.format=d.format;b.mipmaps=d.mipmaps;b.width=d.width;b.height=d.height;e.loadCount+=1;6===e.loadCount&&(f.format=d.format,f.needsUpdate=!0,c&&c(f))}};if(a instanceof Array)for(var g=0,h=a.length;g<h;++g){var k={};e[g]=k;var l=new XMLHttpRequest;l.onload=b(l,k);l.onerror=d;k=a[g];l.open("GET",
k,!0);l.responseType="arraybuffer";l.send(null)}else l=new XMLHttpRequest,l.onload=function(){var a=THREE.ImageUtils.parseDDS(l.response,!0);if(a.isCubemap){for(var b=a.mipmaps.length/a.mipmapCount,d=0;d<b;d++){e[d]={mipmaps:[]};for(var g=0;g<a.mipmapCount;g++)e[d].mipmaps.push(a.mipmaps[d*a.mipmapCount+g]),e[d].format=a.format,e[d].width=a.width,e[d].height=a.height}f.format=a.format;f.needsUpdate=!0;c&&c(f)}},l.onerror=d,l.open("GET",a,!0),l.responseType="arraybuffer",l.send(null);return f},parseDDS:function(a,
b){function c(a){return a.charCodeAt(0)+(a.charCodeAt(1)<<8)+(a.charCodeAt(2)<<16)+(a.charCodeAt(3)<<24)}var d={mipmaps:[],width:0,height:0,format:null,mipmapCount:1},e=c("DXT1"),f=c("DXT3"),g=c("DXT5"),h=new Int32Array(a,0,31);if(542327876!==h[0])return console.error("ImageUtils.parseDDS(): Invalid magic number in DDS header"),d;if(!h[20]&4)return console.error("ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code"),d;var k=h[21];switch(k){case e:e=8;d.format=THREE.RGB_S3TC_DXT1_Format;
break;case f:e=16;d.format=THREE.RGBA_S3TC_DXT3_Format;break;case g:e=16;d.format=THREE.RGBA_S3TC_DXT5_Format;break;default:return console.error("ImageUtils.parseDDS(): Unsupported FourCC code: ",String.fromCharCode(k&255,k>>8&255,k>>16&255,k>>24&255)),d}d.mipmapCount=1;h[2]&131072&&!1!==b&&(d.mipmapCount=Math.max(1,h[7]));d.isCubemap=h[28]&512?!0:!1;d.width=h[4];d.height=h[3];for(var h=h[1]+4,f=d.width,g=d.height,k=d.isCubemap?6:1,l=0;l<k;l++){for(var m=0;m<d.mipmapCount;m++){var p=Math.max(4,f)/
4*Math.max(4,g)/4*e,q={data:new Uint8Array(a,h,p),width:f,height:g};d.mipmaps.push(q);h+=p;f=Math.max(.5*f,1);g=Math.max(.5*g,1)}f=d.width;g=d.height}return d},getNormalMap:function(a,b){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var h=g.getImageData(0,0,d,e).data,k=g.createImageData(d,e),l=k.data,m=0;m<d;m++)for(var p=
0;p<e;p++){var q=0>p-1?0:p-1,u=p+1>e-1?e-1:p+1,t=0>m-1?0:m-1,r=m+1>d-1?d-1:m+1,w=[],x=[0,0,h[4*(p*d+m)]/255*b];w.push([-1,0,h[4*(p*d+t)]/255*b]);w.push([-1,-1,h[4*(q*d+t)]/255*b]);w.push([0,-1,h[4*(q*d+m)]/255*b]);w.push([1,-1,h[4*(q*d+r)]/255*b]);w.push([1,0,h[4*(p*d+r)]/255*b]);w.push([1,1,h[4*(u*d+r)]/255*b]);w.push([0,1,h[4*(u*d+m)]/255*b]);w.push([-1,1,h[4*(u*d+t)]/255*b]);q=[];t=w.length;for(u=0;u<t;u++){var r=w[u],v=w[(u+1)%t],r=[r[0]-x[0],r[1]-x[1],r[2]-x[2]],v=[v[0]-x[0],v[1]-x[1],v[2]-x[2]];
q.push(c([r[1]*v[2]-r[2]*v[1],r[2]*v[0]-r[0]*v[2],r[0]*v[1]-r[1]*v[0]]))}w=[0,0,0];for(u=0;u<q.length;u++)w[0]+=q[u][0],w[1]+=q[u][1],w[2]+=q[u][2];w[0]/=q.length;w[1]/=q.length;w[2]/=q.length;x=4*(p*d+m);l[x]=(w[0]+1)/2*255|0;l[x+1]=(w[1]+1)/2*255|0;l[x+2]=255*w[2]|0;l[x+3]=255}g.putImageData(k,0,0);return f},generateDataTexture:function(a,b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var h=0;h<d;h++)e[3*h]=f,e[3*h+1]=g,e[3*h+2]=c;a=new THREE.DataTexture(e,
a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};THREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Object3D,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){return this.faces[this.face][this.weight][this.style]},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=a},drawText:function(a){var b=this.getFace(),c=this.size/b.resolution,d=0,e=
String(a).split(""),f=e.length,g=[];for(a=0;a<f;a++){var h=new THREE.Path,h=this.extractGlyphPoints(e[a],b,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,h,k,l,m,p,q,u,t,r,w,x=b.glyphs[a]||b.glyphs["?"];if(x){if(x.o)for(b=x._cachedOutline||(x._cachedOutline=x.o.split(" ")),l=b.length,a=0;a<l;)switch(k=b[a++],k){case "m":k=b[a++]*c+d;m=b[a++]*c;e.moveTo(k,m);break;case "l":k=b[a++]*c+d;m=b[a++]*c;e.lineTo(k,m);break;case "q":k=b[a++]*
c+d;m=b[a++]*c;u=b[a++]*c+d;t=b[a++]*c;e.quadraticCurveTo(u,t,k,m);if(g=f[f.length-1])for(p=g.x,q=g.y,g=1,h=this.divisions;g<=h;g++){var v=g/h;THREE.Shape.Utils.b2(v,p,u,k);THREE.Shape.Utils.b2(v,q,t,m)}break;case "b":if(k=b[a++]*c+d,m=b[a++]*c,u=b[a++]*c+d,t=b[a++]*-c,r=b[a++]*c+d,w=b[a++]*-c,e.bezierCurveTo(k,m,u,t,r,w),g=f[f.length-1])for(p=g.x,q=g.y,g=1,h=this.divisions;g<=h;g++)v=g/h,THREE.Shape.Utils.b3(v,p,u,r,k),THREE.Shape.Utils.b3(v,q,t,w,m)}return{offset:x.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(a,b){b=b||{};var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(a).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],h=[],k,l,m;if(0<b(a))for(l=0;l<e;l++)g[l]=l;else for(l=0;l<e;l++)g[l]=e-1-l;var p=2*e;for(l=e-1;2<e;){if(0>=p--){console.log("Warning, unable to triangulate polygon!");break}k=l;e<=k&&(k=0);l=k+1;e<=l&&(l=0);m=l+1;e<=m&&(m=0);var q;a:{var u=q=void 0,t=void 0,r=void 0,w=void 0,x=void 0,v=void 0,z=void 0,F=void 0,
u=a[g[k]].x,t=a[g[k]].y,r=a[g[l]].x,w=a[g[l]].y,x=a[g[m]].x,v=a[g[m]].y;if(1E-10>(r-u)*(v-t)-(w-t)*(x-u))q=!1;else{var J=void 0,C=void 0,A=void 0,y=void 0,B=void 0,K=void 0,M=void 0,S=void 0,P=void 0,X=void 0,P=S=M=F=z=void 0,J=x-r,C=v-w,A=u-x,y=t-v,B=r-u,K=w-t;for(q=0;q<e;q++)if(q!==k&&q!==l&&q!==m&&(z=a[g[q]].x,F=a[g[q]].y,M=z-u,S=F-t,P=z-r,X=F-w,z-=x,F-=v,P=J*X-C*P,M=B*S-K*M,S=A*F-y*z,-1E-10<=P&&-1E-10<=S&&-1E-10<=M)){q=!1;break a}q=!0}}if(q){f.push([a[g[k]],a[g[l]],a[g[m]]]);h.push([g[k],g[l],
g[m]]);k=l;for(m=l+1;m<e;k++,m++)g[k]=g[m];e--;p=2*e}}return d?h:f};a.Triangulate.area=b;return a})(THREE.FontUtils);THREE.typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.Curve=function(){};THREE.Curve.prototype.getPoint=function(a){console.log("Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){a=this.getUtoTmapping(a);return this.getPoint(a)};
THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};
THREE.Curve.prototype.getLengths=function(a){a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};
THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getTangent=function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()};
THREE.Curve.prototype.getTangentAt=function(a){a=this.getUtoTmapping(a);return this.getTangent(a)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=.5*(c-a);d=.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};
THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};THREE.CurvePath.prototype.getPoint=function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e,f,g;b=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var h,k,l,m,p=a[0]instanceof THREE.Vector3;m=p?new THREE.Vector3:new THREE.Vector2;k=0;for(l=a.length;k<l;k++)h=a[k],h.x>b?b=h.x:h.x<e&&(e=h.x),h.y>c?c=h.y:h.y<f&&(f=h.y),p&&(h.z>d?d=h.z:h.z<g&&(g=h.z)),m.add(h);a={minX:e,minY:f,maxX:b,maxY:c,centroid:m.divideScalar(l)};p&&(a.maxZ=d,a.minZ=g);return a};
THREE.CurvePath.prototype.createPointsGeometry=function(a){a=this.getPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){a=this.getSpacedPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vector3(a[c].x,a[c].y,a[c].z||0));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,h,k;d=0;for(e=a.length;d<e;d++)f=a[d],g=f.x,h=f.y,k=g/c.maxX,k=b.getUtoTmapping(k,g),g=b.getPoint(k),h=b.getNormalVector(k).multiplyScalar(h),f.x=g.x+h.x,f.y=g.y+h.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.quaternionWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.quaternionObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.quaternionObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.quaternionWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.quaternionObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;
THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};
THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args,h=new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(h);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(a,b,c,d,e,f,g){var h=this.actions[this.actions.length-1].args;this.absellipse(a+h[h.length-2],b+h[h.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(a,b,c,d,e,f,g){var h=Array.prototype.slice.call(arguments),k=new THREE.EllipseCurve(a,b,c,d,e,f,g);this.curves.push(k);k=k.getPoint(g?1:0);h.push(k.x);h.push(k.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:h})};
THREE.Path.prototype.getSpacedPoints=function(a,b){a||(a=40);for(var c=[],d=0;d<a;d++)c.push(this.getPoint(d/a));return c};
THREE.Path.prototype.getPoints=function(a,b){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(a,b);a=a||12;var c=[],d,e,f,g,h,k,l,m,p,q,u,t,r;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];k=f[3];p=f[0];q=f[1];0<c.length?(g=c[c.length-1],u=g.x,
t=g.y):(g=this.actions[d-1].args,u=g[g.length-2],t=g[g.length-1]);for(f=1;f<=a;f++)r=f/a,g=THREE.Shape.Utils.b2(r,u,p,h),r=THREE.Shape.Utils.b2(r,t,q,k),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];k=f[5];p=f[0];q=f[1];l=f[2];m=f[3];0<c.length?(g=c[c.length-1],u=g.x,t=g.y):(g=this.actions[d-1].args,u=g[g.length-2],t=g[g.length-1]);for(f=1;f<=a;f++)r=f/a,g=THREE.Shape.Utils.b3(r,u,p,l,h),r=THREE.Shape.Utils.b3(r,t,q,m,k),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;r=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=a*f[0].length;r=r.concat(f[0]);r=new THREE.SplineCurve(r);for(f=1;f<=g;f++)c.push(r.getPointAt(f/g));break;case THREE.PathActions.ARC:h=f[0];k=f[1];q=f[2];l=f[3];g=f[4];p=!!f[5];u=g-l;t=2*a;for(f=1;f<=t;f++)r=f/t,p||(r=1-r),r=l+r*u,g=h+q*Math.cos(r),r=k+q*Math.sin(r),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.ELLIPSE:for(h=f[0],k=f[1],q=f[2],m=f[3],l=f[4],g=f[5],p=!!f[6],u=g-l,t=2*a,f=1;f<=t;f++)r=f/t,p||
(r=1-r),r=l+r*u,g=h+q*Math.cos(r),r=k+m*Math.sin(r),c.push(new THREE.Vector2(g,r))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);b&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(a){var b,c,d,e,f=[],g=new THREE.Path;b=0;for(c=this.actions.length;b<c;b++)d=this.actions[b],e=d.args,d=d.action,d==THREE.PathActions.MOVE_TO&&0!=g.actions.length&&(f.push(g),g=new THREE.Path),g[d].apply(g,e);0!=g.actions.length&&f.push(g);if(0==f.length)return[];var h;e=[];if(1==f.length)return d=f[0],h=new THREE.Shape,h.actions=d.actions,h.curves=d.curves,e.push(h),e;b=!THREE.Shape.Utils.isClockWise(f[0].getPoints());if(a?!b:b)for(h=new THREE.Shape,b=0,c=f.length;b<
c;b++)d=f[b],g=THREE.Shape.Utils.isClockWise(d.getPoints()),(g=a?!g:g)?(h.actions=d.actions,h.curves=d.curves,e.push(h),h=new THREE.Shape):h.holes.push(d);else{h=void 0;b=0;for(c=f.length;b<c;b++)d=f[b],g=THREE.Shape.Utils.isClockWise(d.getPoints()),(g=a?!g:g)?(h&&e.push(h),h=new THREE.Shape,h.actions=d.actions,h.curves=d.curves):h.holes.push(d);e.push(h)}return e};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);
THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)};THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};
THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};THREE.Shape.prototype.extractPoints=function(a){return this.useSpacedPoints?this.extractAllSpacedPoints(a):this.extractAllPoints(a)};THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={removeHoles:function(a,b){var c=a.concat(),d=c.concat(),e,f,g,h,k,l,m,p,q,u,t=[];for(k=0;k<b.length;k++){l=b[k];Array.prototype.push.apply(d,l);f=Number.POSITIVE_INFINITY;for(e=0;e<l.length;e++)for(q=l[e],u=[],p=0;p<c.length;p++)m=c[p],m=q.distanceToSquared(m),u.push(m),m<f&&(f=m,g=e,h=p);e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:l.length-1;var r=[l[g],c[h],c[e]];p=THREE.FontUtils.Triangulate.area(r);var w=[l[g],l[f],c[h]];q=THREE.FontUtils.Triangulate.area(w);u=h;m=g;h+=1;g+=-1;0>h&&
(h+=c.length);h%=c.length;0>g&&(g+=l.length);g%=l.length;e=0<=h-1?h-1:c.length-1;f=0<=g-1?g-1:l.length-1;r=[l[g],c[h],c[e]];r=THREE.FontUtils.Triangulate.area(r);w=[l[g],l[f],c[h]];w=THREE.FontUtils.Triangulate.area(w);p+q>r+w&&(h=u,g=m,0>h&&(h+=c.length),h%=c.length,0>g&&(g+=l.length),g%=l.length,e=0<=h-1?h-1:c.length-1,f=0<=g-1?g-1:l.length-1);p=c.slice(0,h);q=c.slice(h);u=l.slice(g);m=l.slice(0,g);f=[l[g],l[f],c[h]];t.push([l[g],c[h],c[e]]);t.push(f);c=p.concat(u).concat(m).concat(q)}return{shape:c,
isolatedPts:t,allpoints:d}},triangulateShape:function(a,b){var c=THREE.Shape.Utils.removeHoles(a,b),d=c.allpoints,e=c.isolatedPts,c=THREE.FontUtils.Triangulate(c.shape,!1),f,g,h,k,l={};f=0;for(g=d.length;f<g;f++)k=d[f].x+":"+d[f].y,void 0!==l[k]&&console.log("Duplicate point",k),l[k]=f;f=0;for(g=c.length;f<g;f++)for(h=c[f],d=0;3>d;d++)k=h[d].x+":"+h[d].y,k=l[k],void 0!==k&&(h[d]=k);f=0;for(g=e.length;f<g;f++)for(h=e[f],d=0;3>d;d++)k=h[d].x+":"+h[d].y,k=l[k],void 0!==k&&(h[d]=k);return c.concat(e)},
isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,b)+this.b3p1(a,c)+this.b3p2(a,d)+
this.b3p3(a,e)}};THREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};THREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};
THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return new THREE.Vector2(b,a)};
THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);a=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);
THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};
THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.getPoint=function(a){var b=new THREE.Vector2,c=[],d=this.points,e;e=(d.length-1)*a;a=Math.floor(e);e-=a;c[0]=0==a?a:a-1;c[1]=a;c[2]=a>d.length-2?d.length-1:a+1;c[3]=a>d.length-3?d.length-1:a+2;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);return b};
THREE.EllipseCurve=function(a,b,c,d,e,f,g){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;this.aClockwise||(a=1-a);b=this.aStartAngle+a*b;a=this.aX+this.xRadius*Math.cos(b);b=this.aY+this.yRadius*Math.sin(b);return new THREE.Vector2(a,b)};
THREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});
THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b,c;b=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);c=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);a=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return new THREE.Vector3(b,c,a)});
THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b,c;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);c=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);a=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return new THREE.Vector3(b,c,a)});
THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;a*=d.length-1;e=Math.floor(a);a-=e;c[0]=0==e?e:e-1;c[1]=e;c[2]=e>d.length-2?d.length-1:e+1;c[3]=e>d.length-3?d.length-1:e+2;e=d[c[0]];var f=d[c[1]],g=d[c[2]],c=d[c[3]];b.x=THREE.Curve.Utils.interpolate(e.x,f.x,g.x,c.x,a);b.y=THREE.Curve.Utils.interpolate(e.y,f.y,g.y,c.y,a);b.z=THREE.Curve.Utils.interpolate(e.z,f.z,g.z,c.z,a);return b});
THREE.ClosedSplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=new THREE.Vector3,c=[],d=this.points,e;e=(d.length-0)*a;a=Math.floor(e);e-=a;a+=0<a?0:(Math.floor(Math.abs(a)/d.length)+1)*d.length;c[0]=(a-1)%d.length;c[1]=a%d.length;c[2]=(a+1)%d.length;c[3]=(a+2)%d.length;b.x=THREE.Curve.Utils.interpolate(d[c[0]].x,d[c[1]].x,d[c[2]].x,d[c[3]].x,e);b.y=THREE.Curve.Utils.interpolate(d[c[0]].y,d[c[1]].y,d[c[2]].y,d[c[3]].y,e);b.z=THREE.Curve.Utils.interpolate(d[c[0]].z,
d[c[1]].z,d[c[2]].z,d[c[3]].z,e);return b});
THREE.AnimationHandler=function(){var a=[],b={},c={update:function(b){for(var c=0;c<a.length;c++)a[c].update(b)},addToUpdate:function(b){-1===a.indexOf(b)&&a.push(b)},removeFromUpdate:function(b){b=a.indexOf(b);-1!==b&&a.splice(b,1)},add:function(a){void 0!==b[a.name]&&console.log("THREE.AnimationHandler.add: Warning! "+a.name+" already exists in library. Overwriting.");b[a.name]=a;if(!0!==a.initialized){for(var c=0;c<a.hierarchy.length;c++){for(var d=0;d<a.hierarchy[c].keys.length;d++)if(0>a.hierarchy[c].keys[d].time&&
(a.hierarchy[c].keys[d].time=0),void 0!==a.hierarchy[c].keys[d].rot&&!(a.hierarchy[c].keys[d].rot instanceof THREE.Quaternion)){var h=a.hierarchy[c].keys[d].rot;a.hierarchy[c].keys[d].rot=new THREE.Quaternion(h[0],h[1],h[2],h[3])}if(a.hierarchy[c].keys.length&&void 0!==a.hierarchy[c].keys[0].morphTargets){h={};for(d=0;d<a.hierarchy[c].keys.length;d++)for(var k=0;k<a.hierarchy[c].keys[d].morphTargets.length;k++){var l=a.hierarchy[c].keys[d].morphTargets[k];h[l]=-1}a.hierarchy[c].usedMorphTargets=h;
for(d=0;d<a.hierarchy[c].keys.length;d++){var m={};for(l in h){for(k=0;k<a.hierarchy[c].keys[d].morphTargets.length;k++)if(a.hierarchy[c].keys[d].morphTargets[k]===l){m[l]=a.hierarchy[c].keys[d].morphTargetsInfluences[k];break}k===a.hierarchy[c].keys[d].morphTargets.length&&(m[l]=0)}a.hierarchy[c].keys[d].morphTargetsInfluences=m}}for(d=1;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].time===a.hierarchy[c].keys[d-1].time&&(a.hierarchy[c].keys.splice(d,1),d--);for(d=0;d<a.hierarchy[c].keys.length;d++)a.hierarchy[c].keys[d].index=
d}d=parseInt(a.length*a.fps,10);a.JIT={};a.JIT.hierarchy=[];for(c=0;c<a.hierarchy.length;c++)a.JIT.hierarchy.push(Array(d));a.initialized=!0}},get:function(a){if("string"===typeof a){if(b[a])return b[a];console.log("THREE.AnimationHandler.get: Couldn't find animation "+a);return null}},parse:function(a){var b=[];if(a instanceof THREE.SkinnedMesh)for(var c=0;c<a.bones.length;c++)b.push(a.bones[c]);else d(a,b);return b}},d=function(a,b){b.push(a);for(var c=0;c<a.children.length;c++)d(a.children[c],
b)};c.LINEAR=0;c.CATMULLROM=1;c.CATMULLROM_FORWARD=2;return c}();THREE.Animation=function(a,b,c){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=this.isPaused=!0;this.interpolationType=void 0!==c?c:THREE.AnimationHandler.LINEAR;this.points=[];this.target=new THREE.Vector3};
THREE.Animation.prototype.play=function(a,b){if(!1===this.isPlaying){this.isPlaying=!0;this.loop=void 0!==a?a:!0;this.currentTime=void 0!==b?b:0;var c,d=this.hierarchy.length,e;for(c=0;c<d;c++){e=this.hierarchy[c];e.matrixAutoUpdate=!0;void 0===e.animationCache&&(e.animationCache={},e.animationCache.prevKey={pos:0,rot:0,scl:0},e.animationCache.nextKey={pos:0,rot:0,scl:0},e.animationCache.originalMatrix=e instanceof THREE.Bone?e.skinMatrix:e.matrix);var f=e.animationCache.prevKey;e=e.animationCache.nextKey;
f.pos=this.data.hierarchy[c].keys[0];f.rot=this.data.hierarchy[c].keys[0];f.scl=this.data.hierarchy[c].keys[0];e.pos=this.getNextKeyWith("pos",c,1);e.rot=this.getNextKeyWith("rot",c,1);e.scl=this.getNextKeyWith("scl",c,1)}this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};THREE.Animation.prototype.pause=function(){!0===this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.Animation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this)};
THREE.Animation.prototype.update=function(a){if(!1!==this.isPlaying){var b=["pos","rot","scl"],c,d,e,f,g,h,k,l,m;m=this.currentTime+=a*this.timeScale;l=this.currentTime%=this.data.length;parseInt(Math.min(l*this.data.fps,this.data.length*this.data.fps),10);for(var p=0,q=this.hierarchy.length;p<q;p++){a=this.hierarchy[p];k=a.animationCache;for(var u=0;3>u;u++){c=b[u];g=k.prevKey[c];h=k.nextKey[c];if(h.time<=m){if(l<m)if(this.loop)for(g=this.data.hierarchy[p].keys[0],h=this.getNextKeyWith(c,p,1);h.time<
l;)g=h,h=this.getNextKeyWith(c,p,h.index+1);else{this.stop();return}else{do g=h,h=this.getNextKeyWith(c,p,h.index+1);while(h.time<l)}k.prevKey[c]=g;k.nextKey[c]=h}a.matrixAutoUpdate=!0;a.matrixWorldNeedsUpdate=!0;d=(l-g.time)/(h.time-g.time);e=g[c];f=h[c];if(0>d||1<d)console.log("THREE.Animation.update: Warning! Scale out of bounds:"+d+" on bone "+p),d=0>d?0:1;if("pos"===c)if(c=a.position,this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+
(f[2]-e[2])*d;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)this.points[0]=this.getPrevKeyWith("pos",p,g.index-1).pos,this.points[1]=e,this.points[2]=f,this.points[3]=this.getNextKeyWith("pos",p,h.index+1).pos,d=.33*d+.33,e=this.interpolateCatmullRom(this.points,d),c.x=e[0],c.y=e[1],c.z=e[2],this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(d=this.interpolateCatmullRom(this.points,1.01*d),this.target.set(d[0],
d[1],d[2]),this.target.sub(c),this.target.y=0,this.target.normalize(),d=Math.atan2(this.target.x,this.target.z),a.rotation.set(0,d,0))}else"rot"===c?THREE.Quaternion.slerp(e,f,a.quaternion,d):"scl"===c&&(c=a.scale,c.x=e[0]+(f[0]-e[0])*d,c.y=e[1]+(f[1]-e[1])*d,c.z=e[2]+(f[2]-e[2])*d)}}}};
THREE.Animation.prototype.interpolateCatmullRom=function(a,b){var c=[],d=[],e,f,g,h,k,l;e=(a.length-1)*b;f=Math.floor(e);e-=f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>a.length-2?f:f+1;c[3]=f>a.length-3?f:f+2;f=a[c[0]];h=a[c[1]];k=a[c[2]];l=a[c[3]];c=e*e;g=e*c;d[0]=this.interpolate(f[0],h[0],k[0],l[0],e,c,g);d[1]=this.interpolate(f[1],h[1],k[1],l[1],e,c,g);d[2]=this.interpolate(f[2],h[2],k[2],l[2],e,c,g);return d};
THREE.Animation.prototype.interpolate=function(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b};THREE.Animation.prototype.getNextKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]};
THREE.Animation.prototype.getPrevKeyWith=function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]};
THREE.KeyFrameAnimation=function(a,b,c){this.root=a;this.data=THREE.AnimationHandler.get(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=.001;this.isPlaying=!1;this.loop=this.isPaused=!0;this.JITCompile=void 0!==c?c:!0;a=0;for(b=this.hierarchy.length;a<b;a++){c=this.data.hierarchy[a].sids;var d=this.hierarchy[a];if(this.data.hierarchy[a].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,a,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[a].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype.play=function(a,b){if(!this.isPlaying){this.isPlaying=!0;this.loop=void 0!==a?a:!0;this.currentTime=void 0!==b?b:0;this.startTimeMs=b;this.startTime=1E7;this.endTime=-this.startTime;var c,d=this.hierarchy.length,e,f;for(c=0;c<d;c++)e=this.hierarchy[c],f=this.data.hierarchy[c],void 0===f.animationCache&&(f.animationCache={},f.animationCache.prevKey=null,f.animationCache.nextKey=null,f.animationCache.originalMatrix=e instanceof THREE.Bone?e.skinMatrix:e.matrix),e=this.data.hierarchy[c].keys,
e.length&&(f.animationCache.prevKey=e[0],f.animationCache.nextKey=e[1],this.startTime=Math.min(e[0].time,this.startTime),this.endTime=Math.max(e[e.length-1].time,this.endTime));this.update(0)}this.isPaused=!1;THREE.AnimationHandler.addToUpdate(this)};THREE.KeyFrameAnimation.prototype.pause=function(){this.isPaused?THREE.AnimationHandler.addToUpdate(this):THREE.AnimationHandler.removeFromUpdate(this);this.isPaused=!this.isPaused};
THREE.KeyFrameAnimation.prototype.stop=function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.removeFromUpdate(this);for(var a=0;a<this.data.hierarchy.length;a++){var b=this.hierarchy[a],c=this.data.hierarchy[a];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;b instanceof THREE.Bone?(d.copy(b.skinMatrix),b.skinMatrix=d):(d.copy(b.matrix),b.matrix=d);delete c.animationCache}}};
THREE.KeyFrameAnimation.prototype.update=function(a){if(this.isPlaying){var b,c,d,e,f=this.data.JIT.hierarchy,g,h,k;h=this.currentTime+=a*this.timeScale;g=this.currentTime%=this.data.length;g<this.startTimeMs&&(g=this.currentTime=this.startTimeMs+g);e=parseInt(Math.min(g*this.data.fps,this.data.length*this.data.fps),10);if((k=g<h)&&!this.loop){a=0;for(var l=this.hierarchy.length;a<l;a++){var m=this.data.hierarchy[a].keys,f=this.data.hierarchy[a].sids;d=m.length-1;e=this.hierarchy[a];if(m.length){for(m=
0;m<f.length;m++)g=f[m],(h=this.getPrevKeyWith(g,a,d))&&h.apply(g);this.data.hierarchy[a].node.updateMatrix();e.matrixWorldNeedsUpdate=!0}}this.stop()}else if(!(g<this.startTime)){a=0;for(l=this.hierarchy.length;a<l;a++){d=this.hierarchy[a];b=this.data.hierarchy[a];var m=b.keys,p=b.animationCache;if(this.JITCompile&&void 0!==f[a][e])d instanceof THREE.Bone?(d.skinMatrix=f[a][e],d.matrixWorldNeedsUpdate=!1):(d.matrix=f[a][e],d.matrixWorldNeedsUpdate=!0);else if(m.length){this.JITCompile&&p&&(d instanceof
THREE.Bone?d.skinMatrix=p.originalMatrix:d.matrix=p.originalMatrix);b=p.prevKey;c=p.nextKey;if(b&&c){if(c.time<=h){if(k&&this.loop)for(b=m[0],c=m[1];c.time<g;)b=c,c=m[b.index+1];else if(!k)for(var q=m.length-1;c.time<g&&c.index!==q;)b=c,c=m[b.index+1];p.prevKey=b;p.nextKey=c}c.time>=g?b.interpolate(c,g):b.interpolate(c,c.time)}this.data.hierarchy[a].node.updateMatrix();d.matrixWorldNeedsUpdate=!0}}if(this.JITCompile&&void 0===f[0][e])for(this.hierarchy[0].updateMatrixWorld(!0),a=0;a<this.hierarchy.length;a++)f[a][e]=
this.hierarchy[a]instanceof THREE.Bone?this.hierarchy[a].skinMatrix.clone():this.hierarchy[a].matrix.clone()}}};THREE.KeyFrameAnimation.prototype.getNextKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]};THREE.KeyFrameAnimation.prototype.getPrevKeyWith=function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]};
THREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));this.add(g);var h=new THREE.PerspectiveCamera(90,
1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,q=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=
2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.generateMipmaps=q;c.activeCubeFace=5;a.render(b,k,c)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CombinedCamera=function(a,b,c,d,e,f,g){THREE.Camera.call(this);this.fov=c;this.left=-a/2;this.right=a/2;this.top=b/2;this.bottom=-b/2;this.cameraO=new THREE.OrthographicCamera(a/-2,a/2,b/2,b/-2,f,g);this.cameraP=new THREE.PerspectiveCamera(c,a/b,d,e);this.zoom=1;this.toPerspective()};
THREE.CombinedCamera.prototype=Object.create(THREE.Camera.prototype);THREE.CombinedCamera.prototype.toPerspective=function(){this.near=this.cameraP.near;this.far=this.cameraP.far;this.cameraP.fov=this.fov/this.zoom;this.cameraP.updateProjectionMatrix();this.projectionMatrix=this.cameraP.projectionMatrix;this.inPerspectiveMode=!0;this.inOrthographicMode=!1};
THREE.CombinedCamera.prototype.toOrthographic=function(){var a=this.cameraP.aspect,b=(this.cameraP.near+this.cameraP.far)/2,b=Math.tan(this.fov/2)*b,a=2*b*a/2,b=b/this.zoom,a=a/this.zoom;this.cameraO.left=-a;this.cameraO.right=a;this.cameraO.top=b;this.cameraO.bottom=-b;this.cameraO.updateProjectionMatrix();this.near=this.cameraO.near;this.far=this.cameraO.far;this.projectionMatrix=this.cameraO.projectionMatrix;this.inPerspectiveMode=!1;this.inOrthographicMode=!0};
THREE.CombinedCamera.prototype.setSize=function(a,b){this.cameraP.aspect=a/b;this.left=-a/2;this.right=a/2;this.top=b/2;this.bottom=-b/2};THREE.CombinedCamera.prototype.setFov=function(a){this.fov=a;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.updateProjectionMatrix=function(){this.inPerspectiveMode?this.toPerspective():(this.toPerspective(),this.toOrthographic())};
THREE.CombinedCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);var c=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.setFov(c);return c};THREE.CombinedCamera.prototype.setZoom=function(a){this.zoom=a;this.inPerspectiveMode?this.toPerspective():this.toOrthographic()};THREE.CombinedCamera.prototype.toFrontView=function(){this.rotation.x=0;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toBackView=function(){this.rotation.x=0;this.rotation.y=Math.PI;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toLeftView=function(){this.rotation.x=0;this.rotation.y=-Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toRightView=function(){this.rotation.x=0;this.rotation.y=Math.PI/2;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CombinedCamera.prototype.toTopView=function(){this.rotation.x=-Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};THREE.CombinedCamera.prototype.toBottomView=function(){this.rotation.x=Math.PI/2;this.rotation.y=0;this.rotation.z=0;this.rotationAutoUpdate=!1};
THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);a=a||50;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;b=void 0!==b?Math.max(3,b):8;var e,f=[];e=new THREE.Vector3;var g=new THREE.Vector2(.5,.5);this.vertices.push(e);f.push(g);for(e=0;e<=b;e++){var h=new THREE.Vector3,k=c+e/b*d;h.x=a*Math.cos(k);h.y=a*Math.sin(k);this.vertices.push(h);f.push(new THREE.Vector2((h.x/a+1)/2,(h.y/a+1)/2))}c=new THREE.Vector3(0,0,1);for(e=1;e<=b;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c,c,c])),this.faceVertexUvs[0].push([f[e],
f[e+1],g]);this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CubeGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,r){var w,x=h.widthSegments,v=h.heightSegments,z=e/2,F=f/2,J=h.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)w="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)w="y",v=h.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)w="x",x=h.depthSegments;var C=x+1,A=v+1,y=e/x,B=f/v,K=new THREE.Vector3;K[w]=0<g?1:-1;for(e=0;e<A;e++)for(f=0;f<C;f++){var M=new THREE.Vector3;M[a]=(f*y-z)*c;M[b]=(e*B-F)*d;M[w]=g;h.vertices.push(M)}for(e=
0;e<v;e++)for(f=0;f<x;f++)F=f+C*e,a=f+C*(e+1),b=f+1+C*(e+1),c=f+1+C*e,d=new THREE.Vector2(f/x,1-e/v),g=new THREE.Vector2(f/x,1-(e+1)/v),w=new THREE.Vector2((f+1)/x,1-(e+1)/v),z=new THREE.Vector2((f+1)/x,1-e/v),F=new THREE.Face3(F+J,a+J,c+J),F.normal.copy(K),F.vertexNormals.push(K.clone(),K.clone(),K.clone()),F.materialIndex=r,h.faces.push(F),h.faceVertexUvs[0].push([d,g,z]),F=new THREE.Face3(a+J,b+J,c+J),F.normal.copy(K),F.vertexNormals.push(K.clone(),K.clone(),K.clone()),F.materialIndex=r,h.faces.push(F),
h.faceVertexUvs[0].push([g.clone(),w,z.clone()])}THREE.Geometry.call(this);var h=this;this.width=a;this.height=b;this.depth=c;this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;a=this.width/2;b=this.height/2;c=this.depth/2;g("z","y",-1,-1,this.depth,this.height,a,0);g("z","y",1,-1,this.depth,this.height,-a,1);g("x","z",1,1,this.width,this.depth,b,2);g("x","z",1,-1,this.width,this.depth,-b,3);g("x","y",1,-1,this.width,this.height,c,4);g("x","y",-1,-1,this.width,this.height,-c,
5);this.computeCentroids();this.mergeVertices()};THREE.CubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.CylinderGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.radiusTop=a=void 0!==a?a:20;this.radiusBottom=b=void 0!==b?b:20;this.height=c=void 0!==c?c:100;this.radialSegments=d=d||8;this.heightSegments=e=e||1;this.openEnded=f=void 0!==f?f:!1;var g=c/2,h,k,l=[],m=[];for(k=0;k<=e;k++){var p=[],q=[],u=k/e,t=u*(b-a)+a;for(h=0;h<=d;h++){var r=h/d,w=new THREE.Vector3;w.x=t*Math.sin(r*Math.PI*2);w.y=-u*c+g;w.z=t*Math.cos(r*Math.PI*2);this.vertices.push(w);p.push(this.vertices.length-1);q.push(new THREE.Vector2(r,
1-u))}l.push(p);m.push(q)}c=(b-a)/c;for(h=0;h<d;h++)for(0!==a?(p=this.vertices[l[0][h]].clone(),q=this.vertices[l[0][h+1]].clone()):(p=this.vertices[l[1][h]].clone(),q=this.vertices[l[1][h+1]].clone()),p.setY(Math.sqrt(p.x*p.x+p.z*p.z)*c).normalize(),q.setY(Math.sqrt(q.x*q.x+q.z*q.z)*c).normalize(),k=0;k<e;k++){var u=l[k][h],t=l[k+1][h],r=l[k+1][h+1],w=l[k][h+1],x=p.clone(),v=p.clone(),z=q.clone(),F=q.clone(),J=m[k][h].clone(),C=m[k+1][h].clone(),A=m[k+1][h+1].clone(),y=m[k][h+1].clone();this.faces.push(new THREE.Face3(u,
t,w,[x,v,F]));this.faceVertexUvs[0].push([J,C,y]);this.faces.push(new THREE.Face3(t,r,w,[v,z,F]));this.faceVertexUvs[0].push([C,A,y])}if(!1===f&&0<a)for(this.vertices.push(new THREE.Vector3(0,g,0)),h=0;h<d;h++)u=l[0][h],t=l[0][h+1],r=this.vertices.length-1,x=new THREE.Vector3(0,1,0),v=new THREE.Vector3(0,1,0),z=new THREE.Vector3(0,1,0),J=m[0][h].clone(),C=m[0][h+1].clone(),A=new THREE.Vector2(C.u,0),this.faces.push(new THREE.Face3(u,t,r,[x,v,z])),this.faceVertexUvs[0].push([J,C,A]);if(!1===f&&0<b)for(this.vertices.push(new THREE.Vector3(0,
-g,0)),h=0;h<d;h++)u=l[k][h+1],t=l[k][h],r=this.vertices.length-1,x=new THREE.Vector3(0,-1,0),v=new THREE.Vector3(0,-1,0),z=new THREE.Vector3(0,-1,0),J=m[k][h+1].clone(),C=m[k][h].clone(),A=new THREE.Vector2(C.u,1),this.faces.push(new THREE.Face3(u,t,r,[x,v,z])),this.faceVertexUvs[0].push([J,C,A]);this.computeCentroids();this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry=function(a,b){"undefined"!==typeof a&&(THREE.Geometry.call(this),a=a instanceof Array?a:[a],this.shapebb=a[a.length-1].getBoundingBox(),this.addShapeList(a,b),this.computeCentroids(),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||console.log("die");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=THREE.ExtrudeGeometry.__v1,e=THREE.ExtrudeGeometry.__v2,f=THREE.ExtrudeGeometry.__v3,g=THREE.ExtrudeGeometry.__v4,h=THREE.ExtrudeGeometry.__v5,k=THREE.ExtrudeGeometry.__v6;d.set(a.x-b.x,a.y-b.y);e.set(a.x-c.x,a.y-c.y);d=d.normalize();e=e.normalize();f.set(-d.y,d.x);g.set(e.y,-e.x);h.copy(a).add(f);k.copy(a).add(g);if(h.equals(k))return g.clone();
h.copy(b).add(f);k.copy(c).add(g);f=d.dot(g);g=k.sub(h).dot(g);0===f&&(console.log("Either infinite or no solutions!"),0===g?console.log("Its finite solutions."):console.log("Too bad, no solutions."));g/=f;return 0>g?(b=Math.atan2(b.y-a.y,b.x-a.x),a=Math.atan2(c.y-a.y,c.x-a.x),b>a&&(a+=2*Math.PI),c=(b+a)/2,a=-Math.cos(c),c=-Math.sin(c),new THREE.Vector2(a,c)):d.multiplyScalar(g).add(h).sub(a).clone()}function e(c,d){var e,f;for(D=c.length;0<=--D;){e=D;f=D-1;0>f&&(f=c.length-1);for(var g=0,h=u+2*m,
g=0;g<h;g++){var k=ha*g,l=ha*(g+1),p=d+e+k,k=d+f+k,q=d+f+l,l=d+e+l,r=c,t=g,w=h,x=e,y=f,p=p+S,k=k+S,q=q+S,l=l+S;M.faces.push(new THREE.Face3(p,k,l,null,null,v));M.faces.push(new THREE.Face3(k,q,l,null,null,v));p=z.generateSideWallUV(M,a,r,b,p,k,q,l,t,w,x,y);M.faceVertexUvs[0].push([p[0],p[1],p[3]]);M.faceVertexUvs[0].push([p[1],p[2],p[3]])}}}function f(a,b,c){M.vertices.push(new THREE.Vector3(a,b,c))}function g(c,d,e,f){c+=S;d+=S;e+=S;M.faces.push(new THREE.Face3(c,d,e,null,null,x));c=f?z.generateBottomUV(M,
a,b,c,d,e):z.generateTopUV(M,a,b,c,d,e);M.faceVertexUvs[0].push(c)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,m=void 0!==b.bevelSegments?b.bevelSegments:3,p=void 0!==b.bevelEnabled?b.bevelEnabled:!0,q=void 0!==b.curveSegments?b.curveSegments:12,u=void 0!==b.steps?b.steps:1,t=b.extrudePath,r,w=!1,x=b.material,v=b.extrudeMaterial,z=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,F,J,C,A;t&&(r=
t.getSpacedPoints(u),w=!0,p=!1,F=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(t,u,!1),J=new THREE.Vector3,C=new THREE.Vector3,A=new THREE.Vector3);p||(l=k=m=0);var y,B,K,M=this,S=this.vertices.length,t=a.extractPoints(q),q=t.shape,P=t.holes;if(t=!THREE.Shape.Utils.isClockWise(q)){q=q.reverse();B=0;for(K=P.length;B<K;B++)y=P[B],THREE.Shape.Utils.isClockWise(y)&&(P[B]=y.reverse());t=!1}var X=THREE.Shape.Utils.triangulateShape(q,P),H=q;B=0;for(K=P.length;B<K;B++)y=P[B],q=q.concat(y);
var E,G,U,O,V,ha=q.length,ma,ga=X.length,t=[],D=0;U=H.length;E=U-1;for(G=D+1;D<U;D++,E++,G++)E===U&&(E=0),G===U&&(G=0),t[D]=d(H[D],H[E],H[G]);var fa=[],I,da=t.concat();B=0;for(K=P.length;B<K;B++){y=P[B];I=[];D=0;U=y.length;E=U-1;for(G=D+1;D<U;D++,E++,G++)E===U&&(E=0),G===U&&(G=0),I[D]=d(y[D],y[E],y[G]);fa.push(I);da=da.concat(I)}for(E=0;E<m;E++){U=E/m;O=k*(1-U);G=l*Math.sin(U*Math.PI/2);D=0;for(U=H.length;D<U;D++)V=c(H[D],t[D],G),f(V.x,V.y,-O);B=0;for(K=P.length;B<K;B++)for(y=P[B],I=fa[B],D=0,U=y.length;D<
U;D++)V=c(y[D],I[D],G),f(V.x,V.y,-O)}G=l;for(D=0;D<ha;D++)V=p?c(q[D],da[D],G):q[D],w?(C.copy(F.normals[0]).multiplyScalar(V.x),J.copy(F.binormals[0]).multiplyScalar(V.y),A.copy(r[0]).add(C).add(J),f(A.x,A.y,A.z)):f(V.x,V.y,0);for(U=1;U<=u;U++)for(D=0;D<ha;D++)V=p?c(q[D],da[D],G):q[D],w?(C.copy(F.normals[U]).multiplyScalar(V.x),J.copy(F.binormals[U]).multiplyScalar(V.y),A.copy(r[U]).add(C).add(J),f(A.x,A.y,A.z)):f(V.x,V.y,h/u*U);for(E=m-1;0<=E;E--){U=E/m;O=k*(1-U);G=l*Math.sin(U*Math.PI/2);D=0;for(U=
H.length;D<U;D++)V=c(H[D],t[D],G),f(V.x,V.y,h+O);B=0;for(K=P.length;B<K;B++)for(y=P[B],I=fa[B],D=0,U=y.length;D<U;D++)V=c(y[D],I[D],G),w?f(V.x,V.y+r[u-1].y,r[u-1].x+O):f(V.x,V.y,h+O)}(function(){if(p){var a;a=0*ha;for(D=0;D<ga;D++)ma=X[D],g(ma[2]+a,ma[1]+a,ma[0]+a,!0);a=u+2*m;a*=ha;for(D=0;D<ga;D++)ma=X[D],g(ma[0]+a,ma[1]+a,ma[2]+a,!1)}else{for(D=0;D<ga;D++)ma=X[D],g(ma[2],ma[1],ma[0],!0);for(D=0;D<ga;D++)ma=X[D],g(ma[0]+ha*u,ma[1]+ha*u,ma[2]+ha*u,!1)}})();(function(){var a=0;e(H,a);a+=H.length;B=
0;for(K=P.length;B<K;B++)y=P[B],e(y,a),a+=y.length})()};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d,e,f){b=a.vertices[e].x;e=a.vertices[e].y;c=a.vertices[f].x;f=a.vertices[f].y;return[new THREE.Vector2(a.vertices[d].x,a.vertices[d].y),new THREE.Vector2(b,e),new THREE.Vector2(c,f)]},generateBottomUV:function(a,b,c,d,e,f){return this.generateTopUV(a,b,c,d,e,f)},generateSideWallUV:function(a,b,c,d,e,f,g,h,k,l,m,p){b=a.vertices[e].x;c=a.vertices[e].y;e=a.vertices[e].z;d=a.vertices[f].x;k=a.vertices[f].y;f=a.vertices[f].z;l=a.vertices[g].x;
m=a.vertices[g].y;g=a.vertices[g].z;p=a.vertices[h].x;var q=a.vertices[h].y;a=a.vertices[h].z;return.01>Math.abs(c-k)?[new THREE.Vector2(b,1-e),new THREE.Vector2(d,1-f),new THREE.Vector2(l,1-g),new THREE.Vector2(p,1-a)]:[new THREE.Vector2(c,1-e),new THREE.Vector2(k,1-f),new THREE.Vector2(m,1-g),new THREE.Vector2(q,1-a)]}};THREE.ExtrudeGeometry.__v1=new THREE.Vector2;THREE.ExtrudeGeometry.__v2=new THREE.Vector2;THREE.ExtrudeGeometry.__v3=new THREE.Vector2;THREE.ExtrudeGeometry.__v4=new THREE.Vector2;
THREE.ExtrudeGeometry.__v5=new THREE.Vector2;THREE.ExtrudeGeometry.__v6=new THREE.Vector2;THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);!1===a instanceof Array&&(a=[a]);this.shapebb=a[a.length-1].getBoundingBox();this.addShapeList(a,b);this.computeCentroids();this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};
THREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.Shape.Utils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.Shape.Utils.isClockWise(g)&&(l[e]=g.reverse());var m=THREE.Shape.Utils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],
k=k.concat(g);l=k.length;f=m.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=m[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateBottomUV(this,a,b,k,g,l))};
THREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);b=b||12;c=c||0;d=d||2*Math.PI;for(var e=1/(a.length-1),f=1/b,g=0,h=b;g<=h;g++)for(var k=c+g*f*d,l=Math.cos(k),m=Math.sin(k),k=0,p=a.length;k<p;k++){var q=a[k],u=new THREE.Vector3;u.x=l*q.x-m*q.y;u.y=m*q.x+l*q.y;u.z=q.z;this.vertices.push(u)}c=a.length;g=0;for(h=b;g<h;g++)for(k=0,p=a.length-1;k<p;k++){b=m=k+c*g;d=m+c;var l=m+1+c,m=m+1,q=g*f,u=k*e,t=q+f,r=u+e;this.faces.push(new THREE.Face3(b,d,m));this.faceVertexUvs[0].push([new THREE.Vector2(q,
u),new THREE.Vector2(t,u),new THREE.Vector2(q,r)]);this.faces.push(new THREE.Face3(d,l,m));this.faceVertexUvs[0].push([new THREE.Vector2(t,u),new THREE.Vector2(t,r),new THREE.Vector2(q,r)])}this.mergeVertices();this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.width=a;this.height=b;this.widthSegments=c||1;this.heightSegments=d||1;var e=a/2,f=b/2;c=this.widthSegments;d=this.heightSegments;var g=c+1,h=d+1,k=this.width/c,l=this.height/d,m=new THREE.Vector3(0,0,1);for(a=0;a<h;a++)for(b=0;b<g;b++)this.vertices.push(new THREE.Vector3(b*k-e,-(a*l-f),0));for(a=0;a<d;a++)for(b=0;b<c;b++){var p=b+g*a,e=b+g*(a+1),f=b+1+g*(a+1),h=b+1+g*a,k=new THREE.Vector2(b/c,1-a/d),l=new THREE.Vector2(b/c,1-(a+
1)/d),q=new THREE.Vector2((b+1)/c,1-(a+1)/d),u=new THREE.Vector2((b+1)/c,1-a/d),p=new THREE.Face3(p,e,h);p.normal.copy(m);p.vertexNormals.push(m.clone(),m.clone(),m.clone());this.faces.push(p);this.faceVertexUvs[0].push([k,l,u]);p=new THREE.Face3(e,f,h);p.normal.copy(m);p.vertexNormals.push(m.clone(),m.clone(),m.clone());this.faces.push(p);this.faceVertexUvs[0].push([l.clone(),q,u.clone()])}this.computeCentroids()};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);a=a||0;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(3,d):8;var g=[],h=a,k=(b-a)/d;for(a=0;a<=d;a++){for(b=0;b<=c;b++){var l=new THREE.Vector3,m=e+b/c*f;l.x=h*Math.cos(m);l.y=h*Math.sin(m);this.vertices.push(l);g.push(new THREE.Vector2((l.x/h+1)/2,-(l.y/h+1)/2+1))}h+=k}e=new THREE.Vector3(0,0,1);for(a=0;a<d;a++)for(f=a*c,b=0;b<=c;b++){var m=b+f,k=m+a,l=m+c+a,p=m+c+1+a;this.faces.push(new THREE.Face3(k,
l,p,[e,e,e]));this.faceVertexUvs[0].push([g[k],g[l],g[p]]);k=m+a;l=m+c+1+a;p=m+1+a;this.faces.push(new THREE.Face3(k,l,p,[e,e,e]));this.faceVertexUvs[0].push([g[k],g[l],g[p]])}this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,h)};THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.radius=a=a||50;this.widthSegments=b=Math.max(3,Math.floor(b)||8);this.heightSegments=c=Math.max(2,Math.floor(c)||6);this.phiStart=d=void 0!==d?d:0;this.phiLength=e=void 0!==e?e:2*Math.PI;this.thetaStart=f=void 0!==f?f:0;this.thetaLength=g=void 0!==g?g:Math.PI;var h,k,l=[],m=[];for(k=0;k<=c;k++){var p=[],q=[];for(h=0;h<=b;h++){var u=h/b,t=k/c,r=new THREE.Vector3;r.x=-a*Math.cos(d+u*e)*Math.sin(f+t*g);r.y=a*Math.cos(f+t*g);
r.z=a*Math.sin(d+u*e)*Math.sin(f+t*g);this.vertices.push(r);p.push(this.vertices.length-1);q.push(new THREE.Vector2(u,1-t))}l.push(p);m.push(q)}for(k=0;k<this.heightSegments;k++)for(h=0;h<this.widthSegments;h++){b=l[k][h+1];c=l[k][h];d=l[k+1][h];e=l[k+1][h+1];f=this.vertices[b].clone().normalize();g=this.vertices[c].clone().normalize();var p=this.vertices[d].clone().normalize(),q=this.vertices[e].clone().normalize(),u=m[k][h+1].clone(),t=m[k][h].clone(),r=m[k+1][h].clone(),w=m[k+1][h+1].clone();Math.abs(this.vertices[b].y)===
this.radius?(this.faces.push(new THREE.Face3(b,d,e,[f,p,q])),this.faceVertexUvs[0].push([u,r,w])):Math.abs(this.vertices[d].y)===this.radius?(this.faces.push(new THREE.Face3(b,c,d,[f,g,p])),this.faceVertexUvs[0].push([u,t,r])):(this.faces.push(new THREE.Face3(b,c,e,[f,g,q])),this.faceVertexUvs[0].push([u,t,w]),this.faces.push(new THREE.Face3(c,d,e,[g,p,q])),this.faceVertexUvs[0].push([t.clone(),r,w.clone()]))}this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,
a)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TextGeometry=function(a,b){b=b||{};var c=THREE.FontUtils.generateShapes(a,b);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b)};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.radius=a||100;this.tube=b||40;this.radialSegments=c||8;this.tubularSegments=d||6;this.arc=e||2*Math.PI;e=new THREE.Vector3;a=[];b=[];for(c=0;c<=this.radialSegments;c++)for(d=0;d<=this.tubularSegments;d++){var f=d/this.tubularSegments*this.arc,g=c/this.radialSegments*Math.PI*2;e.x=this.radius*Math.cos(f);e.y=this.radius*Math.sin(f);var h=new THREE.Vector3;h.x=(this.radius+this.tube*Math.cos(g))*Math.cos(f);h.y=(this.radius+this.tube*
Math.cos(g))*Math.sin(f);h.z=this.tube*Math.sin(g);this.vertices.push(h);a.push(new THREE.Vector2(d/this.tubularSegments,c/this.radialSegments));b.push(h.clone().sub(e).normalize())}for(c=1;c<=this.radialSegments;c++)for(d=1;d<=this.tubularSegments;d++){e=(this.tubularSegments+1)*c+d-1;var f=(this.tubularSegments+1)*(c-1)+d-1,g=(this.tubularSegments+1)*(c-1)+d,h=(this.tubularSegments+1)*c+d,k=new THREE.Face3(e,f,h,[b[e],b[f],b[h]]);k.normal.add(b[e]);k.normal.add(b[f]);k.normal.add(b[h]);k.normal.normalize();
this.faces.push(k);this.faceVertexUvs[0].push([a[e].clone(),a[f].clone(),a[h].clone()]);k=new THREE.Face3(f,g,h,[b[f],b[g],b[h]]);k.normal.add(b[f]);k.normal.add(b[g]);k.normal.add(b[h]);k.normal.normalize();this.faces.push(k);this.faceVertexUvs[0].push([a[f].clone(),a[g].clone(),a[h].clone()])}this.computeCentroids()};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function h(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=b/c;b=Math.cos(a);f*=d*(2+b)*.5;g=d*(2+b)*g*.5;d=e*d*Math.sin(a)*.5;return new THREE.Vector3(f,g,d)}THREE.Geometry.call(this);this.radius=a||100;this.tube=b||40;this.radialSegments=c||64;this.tubularSegments=d||8;this.p=e||2;this.q=f||3;this.heightScale=g||1;this.grid=Array(this.radialSegments);c=new THREE.Vector3;d=new THREE.Vector3;e=new THREE.Vector3;for(a=0;a<this.radialSegments;++a)for(this.grid[a]=
Array(this.tubularSegments),b=a/this.radialSegments*2*this.p*Math.PI,f=h(b,this.q,this.p,this.radius,this.heightScale),b=h(b+.01,this.q,this.p,this.radius,this.heightScale),c.subVectors(b,f),d.addVectors(b,f),e.crossVectors(c,d),d.crossVectors(e,c),e.normalize(),d.normalize(),b=0;b<this.tubularSegments;++b){var k=b/this.tubularSegments*2*Math.PI;g=-this.tube*Math.cos(k);var k=this.tube*Math.sin(k),l=new THREE.Vector3;l.x=f.x+g*d.x+k*e.x;l.y=f.y+g*d.y+k*e.y;l.z=f.z+g*d.z+k*e.z;this.grid[a][b]=this.vertices.push(l)-
1}for(a=0;a<this.radialSegments;++a)for(b=0;b<this.tubularSegments;++b){e=(a+1)%this.radialSegments;f=(b+1)%this.tubularSegments;c=this.grid[a][b];d=this.grid[e][b];e=this.grid[e][f];f=this.grid[a][f];g=new THREE.Vector2(a/this.radialSegments,b/this.tubularSegments);var k=new THREE.Vector2((a+1)/this.radialSegments,b/this.tubularSegments),l=new THREE.Vector2((a+1)/this.radialSegments,(b+1)/this.tubularSegments),m=new THREE.Vector2(a/this.radialSegments,(b+1)/this.tubularSegments);this.faces.push(new THREE.Face3(c,
d,f));this.faceVertexUvs[0].push([g,k,m]);this.faces.push(new THREE.Face3(d,e,f));this.faceVertexUvs[0].push([k.clone(),l,m.clone()])}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.path=a;this.segments=b||64;this.radius=c||1;this.radialSegments=d||8;this.closed=e||!1;this.grid=[];var f,g;d=this.segments+1;var h,k,l;e=new THREE.Vector3;var m,p;b=new THREE.TubeGeometry.FrenetFrames(this.path,this.segments,this.closed);m=b.normals;p=b.binormals;this.tangents=b.tangents;this.normals=m;this.binormals=p;for(b=0;b<d;b++)for(this.grid[b]=[],c=b/(d-1),l=a.getPointAt(c),f=m[b],g=p[b],c=0;c<this.radialSegments;c++)h=
c/this.radialSegments*2*Math.PI,k=-this.radius*Math.cos(h),h=this.radius*Math.sin(h),e.copy(l),e.x+=k*f.x+h*g.x,e.y+=k*f.y+h*g.y,e.z+=k*f.z+h*g.z,this.grid[b][c]=this.vertices.push(new THREE.Vector3(e.x,e.y,e.z))-1;for(b=0;b<this.segments;b++)for(c=0;c<this.radialSegments;c++)e=this.closed?(b+1)%this.segments:b+1,m=(c+1)%this.radialSegments,a=this.grid[b][c],d=this.grid[e][c],e=this.grid[e][m],m=this.grid[b][m],p=new THREE.Vector2(b/this.segments,c/this.radialSegments),f=new THREE.Vector2((b+1)/this.segments,
c/this.radialSegments),g=new THREE.Vector2((b+1)/this.segments,(c+1)/this.radialSegments),k=new THREE.Vector2(b/this.segments,(c+1)/this.radialSegments),this.faces.push(new THREE.Face3(a,d,m)),this.faceVertexUvs[0].push([p,f,k]),this.faces.push(new THREE.Face3(d,e,m)),this.faceVertexUvs[0].push([f.clone(),g,k.clone()]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.FrenetFrames=function(a,b,c){new THREE.Vector3;var d=new THREE.Vector3;new THREE.Vector3;var e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,m,p;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)m=l/(b-1),e[l]=a.getTangentAt(m),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);m=Math.abs(e[0].y);p=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));m<=a&&(a=m,d.set(0,1,0));p<=a&&d.set(0,0,1);h.crossVectors(e[0],
d).normalize();f[0].crossVectors(e[0],h);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),1E-4<h.length()&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],
f[l])};
THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c){var d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);d.centroid.add(a).add(b).add(c).divideScalar(3);k.faces.push(d);d=d.centroid;d=Math.atan2(d.z,-d.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,
c,d)])}function g(a,b){var c=Math.pow(2,b);Math.pow(4,b);for(var d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],p=0;p<=c;p++){l[p]=[];for(var m=e(d.clone().lerp(h,p/c)),q=e(g.clone().lerp(h,p/c)),t=c-p,u=0;u<=t;u++)l[p][u]=0==u&&p==c?m:e(m.clone().lerp(q,u/t))}for(p=0;p<c;p++)for(u=0;u<2*(c-p)-1;u++)d=Math.floor(u/2),0==u%2?f(l[p][d+1],l[p+1][d],l[p][d]):f(l[p][d+1],l[p+1][d+1],l[p+1][d])}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/
2/Math.PI+.5,a.y));return a.clone()}THREE.Geometry.call(this);c=c||1;d=d||0;for(var k=this,l=0,m=a.length;l<m;l++)e(new THREE.Vector3(a[l][0],a[l][1],a[l][2]));a=this.vertices;for(var p=[],l=0,m=b.length;l<m;l++){var q=a[b[l][0]],u=a[b[l][1]],t=a[b[l][2]];p[l]=new THREE.Face3(q.index,u.index,t.index,[q.clone(),u.clone(),t.clone()])}l=0;for(m=p.length;l<m;l++)g(p[l],d);l=0;for(m=this.faceVertexUvs[0].length;l<m;l++)b=this.faceVertexUvs[0][l],d=b[0].x,a=b[1].x,p=b[2].x,q=Math.max(d,Math.max(a,p)),u=
Math.min(d,Math.min(a,p)),.9<q&&.1>u&&(.2>d&&(b[0].x+=1),.2>a&&(b[1].x+=1),.2>p&&(b[2].x+=1));l=0;for(m=this.vertices.length;l<m;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry=function(a,b){this.radius=a;this.detail=b;var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[[-1,c,0],[1,c,0],[-1,-c,0],[1,-c,0],[0,-1,c],[0,1,c],[0,-1,-c],[0,1,-c],[c,0,-1],[c,0,1],[-c,0,-1],[-c,0,1]],[[0,11,5],[0,5,1],[0,1,7],[0,7,10],[0,10,11],[1,5,9],[5,11,4],[11,10,2],[10,7,6],[7,1,8],[3,9,4],[3,4,2],[3,2,6],[3,6,8],[3,8,9],[4,9,5],[2,4,11],[6,2,10],[8,6,7],[9,8,1]],a,b)};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[[1,0,0],[-1,0,0],[0,1,0],[0,-1,0],[0,0,1],[0,0,-1]],[[0,2,4],[0,4,3],[0,3,5],[0,5,2],[1,2,5],[1,5,3],[1,3,4],[1,4,2]],a,b)};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[[1,1,1],[-1,-1,1],[-1,1,-1],[1,-1,-1]],[[2,1,0],[0,3,2],[1,3,0],[2,3,1]],a,b)};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,m=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var p,q,u,t;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*m+h,d=g*m+h+1,l=(g+1)*m+h+1,k=(g+1)*m+h,p=new THREE.Vector2(h/b,g/c),q=new THREE.Vector2((h+1)/b,g/c),u=new THREE.Vector2((h+1)/b,(g+1)/c),t=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,d,k)),f.push([p,q,t]),e.push(new THREE.Face3(d,l,k)),
f.push([q.clone(),u,t.clone()]);this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.AxisHelper=function(a){a=a||1;var b=new THREE.Geometry;b.vertices.push(new THREE.Vector3,new THREE.Vector3(a,0,0),new THREE.Vector3,new THREE.Vector3(0,a,0),new THREE.Vector3,new THREE.Vector3(0,0,a));b.colors.push(new THREE.Color(16711680),new THREE.Color(16755200),new THREE.Color(65280),new THREE.Color(11206400),new THREE.Color(255),new THREE.Color(43775));a=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,b,a,THREE.LinePieces)};
THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);
THREE.ArrowHelper=function(a,b,c,d){THREE.Object3D.call(this);void 0===d&&(d=16776960);void 0===c&&(c=1);this.position=b;b=new THREE.Geometry;b.vertices.push(new THREE.Vector3(0,0,0));b.vertices.push(new THREE.Vector3(0,1,0));this.line=new THREE.Line(b,new THREE.LineBasicMaterial({color:d}));this.line.matrixAutoUpdate=!1;this.add(this.line);b=new THREE.CylinderGeometry(0,.05,.25,5,1);b.applyMatrix((new THREE.Matrix4).makeTranslation(0,.875,0));this.cone=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:d}));
this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(a);this.setLength(c)};THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a){this.scale.set(a,a,a)};
THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.setHex(a);this.cone.material.color.setHex(a)};
THREE.BoxHelper=function(a){var b=[new THREE.Vector3(1,1,1),new THREE.Vector3(-1,1,1),new THREE.Vector3(-1,-1,1),new THREE.Vector3(1,-1,1),new THREE.Vector3(1,1,-1),new THREE.Vector3(-1,1,-1),new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,-1,-1)];this.vertices=b;var c=new THREE.Geometry;c.vertices.push(b[0],b[1],b[1],b[2],b[2],b[3],b[3],b[0],b[4],b[5],b[5],b[6],b[6],b[7],b[7],b[4],b[0],b[4],b[1],b[5],b[2],b[6],b[3],b[7]);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);
void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype);
THREE.BoxHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.vertices;d[0].set(b.x,b.y,b.z);d[1].set(c.x,b.y,b.z);d[2].set(c.x,c.y,b.z);d[3].set(b.x,c.y,b.z);d[4].set(b.x,b.y,c.z);d[5].set(c.x,b.y,c.z);d[6].set(c.x,c.y,c.z);d[7].set(b.x,c.y,c.z);this.geometry.computeBoundingSphere();this.geometry.verticesNeedUpdate=!0;this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};
THREE.BoundingBoxHelper=function(a,b){var c=b||8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.CubeGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Camera,c=new THREE.Projector;return function(){function d(d,g,h,k){a.set(g,h,k);c.unprojectVector(a,b);d=e.pointMap[d];if(void 0!==d)for(g=0,h=d.length;g<h;g++)e.geometry.vertices[d[g]].copy(a)}var e=this;b.projectionMatrix.copy(this.camera.projectionMatrix);d("c",0,0,-1);d("t",0,0,1);d("n1",-1,-1,-1);d("n2",1,-1,-1);d("n3",-1,1,-1);d("n4",1,1,-1);d("f1",-1,-1,1);d("f2",1,-1,1);d("f3",-1,1,1);d("f4",1,1,1);d("u1",.7,
1.1,-1);d("u2",-.7,1.1,-1);d("u3",0,2,-1);d("cf1",-1,0,1);d("cf2",1,0,1);d("cf3",0,-1,1);d("cf4",0,1,1);d("cn1",-1,0,-1);d("cn2",1,0,-1);d("cn3",0,-1,-1);d("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0}}();
THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;var c=new THREE.PlaneGeometry(b,b),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Mesh(c,d);this.add(this.lightPlane);c=new THREE.Geometry;c.vertices.push(new THREE.Vector3);c.vertices.push(new THREE.Vector3);c.computeLineDistances();
d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){a.getPositionFromMatrix(this.light.matrixWorld).negate();this.lightPlane.lookAt(a);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(a);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();
THREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=b||1;a=c||16776960;d=d||1;b=new THREE.Geometry;c=0;for(var e=this.object.geometry.faces.length;c<e;c++)b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3);THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:a,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);a=this.geometry.vertices;for(var d=this.object.geometry.faces,e=this.object.matrixWorld,f=0,g=d.length;f<g;f++){var h=d[f];b.copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);var k=2*f;a[k].copy(h.centroid).applyMatrix4(e);a[k+1].addVectors(a[k],b)}this.geometry.verticesNeedUpdate=
!0;return this}}();THREE.GridHelper=function(a,b){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924);this.color2=new THREE.Color(8947848);for(var e=-a;e<=a;e+=b){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.Line.call(this,c,d,THREE.LinePieces)};THREE.GridHelper.prototype=Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.setColors=function(a,b){this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate=!0};
THREE.HemisphereLightHelper=function(a,b,c,d){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];a=new THREE.SphereGeometry(b,4,2);a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(b=0;8>b;b++)a.faces[b].color=this.colors[4>b?0:1];b=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(a,b);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.getPositionFromMatrix(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();
THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrixWorld=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};
THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.getPositionFromMatrix(this.light.matrixWorld);b.getPositionFromMatrix(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();
THREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=b||1;b=c||16711680;d=d||1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexNormals.length;g<h;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var m=f[k],p=0,q=m.vertexNormals.length;p<q;p++){var u=m.vertexNormals[p];d[h].copy(e[m[a[p]]]).applyMatrix4(g);b.copy(u).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
b.add(d[h]);h+=1;d[h].copy(b);h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();THREE.VertexTangentsHelper=function(a,b,c,d){this.object=a;this.size=b||1;b=c||255;d=d||1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexTangents.length;g<h;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.update()};
THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var m=f[k],p=0,q=m.vertexTangents.length;p<q;p++){var u=m.vertexTangents[p];d[h].copy(e[m[a[p]]]).applyMatrix4(g);b.copy(u).transformDirection(g).multiplyScalar(this.size);b.add(d[h]);h+=1;d[h].copy(b);
h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.WireframeHelper=function(a){for(var b=[0,0],c={},d=function(a,b){return a-b},e=["a","b","c","d"],f=new THREE.Geometry,g=a.geometry.vertices,h=a.geometry.faces,k=0,l=h.length;k<l;k++)for(var m=h[k],p=0;3>p;p++){b[0]=m[e[p]];b[1]=m[e[(p+1)%3]];b.sort(d);var q=b.toString();void 0===c[q]&&(f.vertices.push(g[b[0]]),f.vertices.push(g[b[1]]),c[q]=!0)}THREE.Line.call(this,f,new THREE.LineBasicMaterial({color:16777215}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};
THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype);THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(a){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)};
THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={startFrame:b,endFrame:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):console.warn("animation["+a+"] undefined")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};
THREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};
THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),f=b.createShader(b.VERTEX_SHADER),g="precision "+c+" float;\n";b.shaderSource(e,g+a.fragmentShader);b.shaderSource(f,g+a.vertexShader);b.compileShader(e);b.compileShader(f);b.attachShader(d,e);b.attachShader(d,f);b.linkProgram(d);return d}var b,c,d,e,f,g,h,k,l,m,p,q,u;this.init=function(t){b=t.context;c=t;d=t.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);t=0;e[t++]=-1;e[t++]=-1;
e[t++]=0;e[t++]=0;e[t++]=1;e[t++]=-1;e[t++]=1;e[t++]=0;e[t++]=1;e[t++]=1;e[t++]=1;e[t++]=1;e[t++]=-1;e[t++]=1;e[t++]=0;e[t++]=1;t=0;f[t++]=0;f[t++]=1;f[t++]=2;f[t++]=0;f[t++]=2;f[t++]=3;g=b.createBuffer();h=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,g);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);k=b.createTexture();l=b.createTexture();b.bindTexture(b.TEXTURE_2D,k);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,
0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,l);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(m=!1,p=a(THREE.ShaderFlares.lensFlare,d)):(m=!0,p=a(THREE.ShaderFlares.lensFlareVertexTexture,d));q={};u={};q.vertex=b.getAttribLocation(p,"position");q.uv=b.getAttribLocation(p,"uv");u.renderType=b.getUniformLocation(p,"renderType");u.map=b.getUniformLocation(p,"map");u.occlusionMap=b.getUniformLocation(p,"occlusionMap");u.opacity=
b.getUniformLocation(p,"opacity");u.color=b.getUniformLocation(p,"color");u.scale=b.getUniformLocation(p,"scale");u.rotation=b.getUniformLocation(p,"rotation");u.screenPosition=b.getUniformLocation(p,"screenPosition")};this.render=function(a,d,e,f){a=a.__webglFlares;var v=a.length;if(v){var z=new THREE.Vector3,F=f/e,J=.5*e,C=.5*f,A=16/f,y=new THREE.Vector2(A*F,A),B=new THREE.Vector3(1,1,0),K=new THREE.Vector2(1,1),M=u,A=q;b.useProgram(p);b.enableVertexAttribArray(q.vertex);b.enableVertexAttribArray(q.uv);
b.uniform1i(M.occlusionMap,0);b.uniform1i(M.map,1);b.bindBuffer(b.ARRAY_BUFFER,g);b.vertexAttribPointer(A.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(A.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.disable(b.CULL_FACE);b.depthMask(!1);var S,P,X,H,E;for(S=0;S<v;S++)if(A=16/f,y.set(A*F,A),H=a[S],z.set(H.matrixWorld.elements[12],H.matrixWorld.elements[13],H.matrixWorld.elements[14]),z.applyMatrix4(d.matrixWorldInverse),z.applyProjection(d.projectionMatrix),B.copy(z),K.x=B.x*J+J,
K.y=B.y*C+C,m||0<K.x&&K.x<e&&0<K.y&&K.y<f)for(b.activeTexture(b.TEXTURE1),b.bindTexture(b.TEXTURE_2D,k),b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,K.x-8,K.y-8,16,16,0),b.uniform1i(M.renderType,0),b.uniform2f(M.scale,y.x,y.y),b.uniform3f(M.screenPosition,B.x,B.y,B.z),b.disable(b.BLEND),b.enable(b.DEPTH_TEST),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0),b.activeTexture(b.TEXTURE0),b.bindTexture(b.TEXTURE_2D,l),b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,K.x-8,K.y-8,16,16,0),b.uniform1i(M.renderType,1),b.disable(b.DEPTH_TEST),
b.activeTexture(b.TEXTURE1),b.bindTexture(b.TEXTURE_2D,k),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0),H.positionScreen.copy(B),H.customUpdateCallback?H.customUpdateCallback(H):H.updateLensFlares(),b.uniform1i(M.renderType,2),b.enable(b.BLEND),P=0,X=H.lensFlares.length;P<X;P++)E=H.lensFlares[P],.001<E.opacity&&.001<E.scale&&(B.x=E.x,B.y=E.y,B.z=E.z,A=E.size*E.scale/f,y.x=A*F,y.y=A,b.uniform3f(M.screenPosition,B.x,B.y,B.z),b.uniform2f(M.scale,y.x,y.y),b.uniform1f(M.rotation,E.rotation),b.uniform1f(M.opacity,
E.opacity),b.uniform3f(M.color,E.color.r,E.color.g,E.color.b),c.setBlending(E.blending,E.blendEquation,E.blendSrc,E.blendDst),c.setTexture(E.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};
THREE.ShadowMapPlugin=function(){var a,b,c,d,e,f,g=new THREE.Frustum,h=new THREE.Matrix4,k=new THREE.Vector3,l=new THREE.Vector3,m=new THREE.Vector3;this.init=function(g){a=g.context;b=g;g=THREE.ShaderLib.depthRGBA;var h=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,
vertexShader:g.vertexShader,uniforms:h,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(p,q){var u,t,r,w,x,v,z,F,J,C=[];w=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===THREE.CullFaceFront?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);u=0;for(t=p.__lights.length;u<t;u++)if(r=p.__lights[u],r.castShadow)if(r instanceof THREE.DirectionalLight&&r.shadowCascade)for(x=0;x<r.shadowCascadeCount;x++){var A;if(r.shadowCascadeArray[x])A=r.shadowCascadeArray[x];else{J=r;z=x;A=new THREE.DirectionalLight;A.isVirtual=!0;A.onlyShadow=!0;A.castShadow=!0;A.shadowCameraNear=J.shadowCameraNear;A.shadowCameraFar=J.shadowCameraFar;A.shadowCameraLeft=J.shadowCameraLeft;A.shadowCameraRight=J.shadowCameraRight;
A.shadowCameraBottom=J.shadowCameraBottom;A.shadowCameraTop=J.shadowCameraTop;A.shadowCameraVisible=J.shadowCameraVisible;A.shadowDarkness=J.shadowDarkness;A.shadowBias=J.shadowCascadeBias[z];A.shadowMapWidth=J.shadowCascadeWidth[z];A.shadowMapHeight=J.shadowCascadeHeight[z];A.pointsWorld=[];A.pointsFrustum=[];F=A.pointsWorld;v=A.pointsFrustum;for(var y=0;8>y;y++)F[y]=new THREE.Vector3,v[y]=new THREE.Vector3;F=J.shadowCascadeNearZ[z];J=J.shadowCascadeFarZ[z];v[0].set(-1,-1,F);v[1].set(1,-1,F);v[2].set(-1,
1,F);v[3].set(1,1,F);v[4].set(-1,-1,J);v[5].set(1,-1,J);v[6].set(-1,1,J);v[7].set(1,1,J);A.originalCamera=q;v=new THREE.Gyroscope;v.position=r.shadowCascadeOffset;v.add(A);v.add(A.target);q.add(v);r.shadowCascadeArray[x]=A;console.log("Created virtualLight",A)}z=r;F=x;J=z.shadowCascadeArray[F];J.position.copy(z.position);J.target.position.copy(z.target.position);J.lookAt(J.target);J.shadowCameraVisible=z.shadowCameraVisible;J.shadowDarkness=z.shadowDarkness;J.shadowBias=z.shadowCascadeBias[F];v=z.shadowCascadeNearZ[F];
z=z.shadowCascadeFarZ[F];J=J.pointsFrustum;J[0].z=v;J[1].z=v;J[2].z=v;J[3].z=v;J[4].z=z;J[5].z=z;J[6].z=z;J[7].z=z;C[w]=A;w++}else C[w]=r,w++;u=0;for(t=C.length;u<t;u++){r=C[u];r.shadowMap||(x=THREE.LinearFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(x=THREE.NearestFilter),r.shadowMap=new THREE.WebGLRenderTarget(r.shadowMapWidth,r.shadowMapHeight,{minFilter:x,magFilter:x,format:THREE.RGBAFormat}),r.shadowMapSize=new THREE.Vector2(r.shadowMapWidth,r.shadowMapHeight),r.shadowMatrix=new THREE.Matrix4);
if(!r.shadowCamera){if(r instanceof THREE.SpotLight)r.shadowCamera=new THREE.PerspectiveCamera(r.shadowCameraFov,r.shadowMapWidth/r.shadowMapHeight,r.shadowCameraNear,r.shadowCameraFar);else if(r instanceof THREE.DirectionalLight)r.shadowCamera=new THREE.OrthographicCamera(r.shadowCameraLeft,r.shadowCameraRight,r.shadowCameraTop,r.shadowCameraBottom,r.shadowCameraNear,r.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}p.add(r.shadowCamera);!0===p.autoUpdate&&p.updateMatrixWorld()}r.shadowCameraVisible&&
!r.cameraHelper&&(r.cameraHelper=new THREE.CameraHelper(r.shadowCamera),r.shadowCamera.add(r.cameraHelper));if(r.isVirtual&&A.originalCamera==q){x=q;w=r.shadowCamera;v=r.pointsFrustum;J=r.pointsWorld;k.set(Infinity,Infinity,Infinity);l.set(-Infinity,-Infinity,-Infinity);for(z=0;8>z;z++)F=J[z],F.copy(v[z]),THREE.ShadowMapPlugin.__projector.unprojectVector(F,x),F.applyMatrix4(w.matrixWorldInverse),F.x<k.x&&(k.x=F.x),F.x>l.x&&(l.x=F.x),F.y<k.y&&(k.y=F.y),F.y>l.y&&(l.y=F.y),F.z<k.z&&(k.z=F.z),F.z>l.z&&
(l.z=F.z);w.left=k.x;w.right=l.x;w.top=l.y;w.bottom=k.y;w.updateProjectionMatrix()}w=r.shadowMap;v=r.shadowMatrix;x=r.shadowCamera;x.position.getPositionFromMatrix(r.matrixWorld);m.getPositionFromMatrix(r.target.matrixWorld);x.lookAt(m);x.updateMatrixWorld();x.matrixWorldInverse.getInverse(x.matrixWorld);r.cameraHelper&&(r.cameraHelper.visible=r.shadowCameraVisible);r.shadowCameraVisible&&r.cameraHelper.update();v.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);v.multiply(x.projectionMatrix);v.multiply(x.matrixWorldInverse);
h.multiplyMatrices(x.projectionMatrix,x.matrixWorldInverse);g.setFromMatrix(h);b.setRenderTarget(w);b.clear();J=p.__webglObjects;r=0;for(w=J.length;r<w;r++)z=J[r],v=z.object,z.render=!1,!v.visible||!v.castShadow||(v instanceof THREE.Mesh||v instanceof THREE.ParticleSystem)&&v.frustumCulled&&!g.intersectsObject(v)||(v._modelViewMatrix.multiplyMatrices(x.matrixWorldInverse,v.matrixWorld),z.render=!0);r=0;for(w=J.length;r<w;r++)z=J[r],z.render&&(v=z.object,z=z.buffer,y=v.material instanceof THREE.MeshFaceMaterial?
v.material.materials[0]:v.material,F=0<v.geometry.morphTargets.length&&y.morphTargets,y=v instanceof THREE.SkinnedMesh&&y.skinning,F=v.customDepthMaterial?v.customDepthMaterial:y?F?f:e:F?d:c,z instanceof THREE.BufferGeometry?b.renderBufferDirect(x,p.__lights,null,F,z,v):b.renderBuffer(x,p.__lights,null,F,z,v));J=p.__webglObjectsImmediate;r=0;for(w=J.length;r<w;r++)z=J[r],v=z.object,v.visible&&v.castShadow&&(v._modelViewMatrix.multiplyMatrices(x.matrixWorldInverse,v.matrixWorld),b.renderImmediateObject(x,
p.__lights,null,c,v))}u=b.getClearColor();t=b.getClearAlpha();a.clearColor(u.r,u.g,u.b,t);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;
THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,f,g,h,k,l,m;this.init=function(a){b=a.context;c=a;d=a.getPrecision();e=new Float32Array(16);f=new Uint16Array(6);a=0;e[a++]=-1;e[a++]=-1;e[a++]=0;e[a++]=0;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;a=0;f[a++]=0;f[a++]=1;f[a++]=2;f[a++]=0;f[a++]=2;f[a++]=3;g=b.createBuffer();h=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,g);b.bufferData(b.ARRAY_BUFFER,
e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);a=THREE.ShaderSprite.sprite;var q=d,u=b.createProgram(),t=b.createShader(b.FRAGMENT_SHADER),r=b.createShader(b.VERTEX_SHADER),q="precision "+q+" float;\n";b.shaderSource(t,q+a.fragmentShader);b.shaderSource(r,q+a.vertexShader);b.compileShader(t);b.compileShader(r);b.attachShader(u,t);b.attachShader(u,r);b.linkProgram(u);k=u;l={};m={};l.position=b.getAttribLocation(k,"position");l.uv=b.getAttribLocation(k,
"uv");m.uvOffset=b.getUniformLocation(k,"uvOffset");m.uvScale=b.getUniformLocation(k,"uvScale");m.rotation=b.getUniformLocation(k,"rotation");m.scale=b.getUniformLocation(k,"scale");m.alignment=b.getUniformLocation(k,"alignment");m.color=b.getUniformLocation(k,"color");m.map=b.getUniformLocation(k,"map");m.opacity=b.getUniformLocation(k,"opacity");m.useScreenCoordinates=b.getUniformLocation(k,"useScreenCoordinates");m.sizeAttenuation=b.getUniformLocation(k,"sizeAttenuation");m.screenPosition=b.getUniformLocation(k,
"screenPosition");m.modelViewMatrix=b.getUniformLocation(k,"modelViewMatrix");m.projectionMatrix=b.getUniformLocation(k,"projectionMatrix");m.fogType=b.getUniformLocation(k,"fogType");m.fogDensity=b.getUniformLocation(k,"fogDensity");m.fogNear=b.getUniformLocation(k,"fogNear");m.fogFar=b.getUniformLocation(k,"fogFar");m.fogColor=b.getUniformLocation(k,"fogColor");m.alphaTest=b.getUniformLocation(k,"alphaTest")};this.render=function(d,e,f,t){var r=d.__webglSprites,w=r.length;if(w){var x=l,v=m,z=t/
f;f*=.5;var F=.5*t;b.useProgram(k);b.enableVertexAttribArray(x.position);b.enableVertexAttribArray(x.uv);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,g);b.vertexAttribPointer(x.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(x.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,h);b.uniformMatrix4fv(v.projectionMatrix,!1,e.projectionMatrix.elements);b.activeTexture(b.TEXTURE0);b.uniform1i(v.map,0);var J=x=0,C=d.fog;C?(b.uniform3f(v.fogColor,C.color.r,C.color.g,C.color.b),
C instanceof THREE.Fog?(b.uniform1f(v.fogNear,C.near),b.uniform1f(v.fogFar,C.far),b.uniform1i(v.fogType,1),J=x=1):C instanceof THREE.FogExp2&&(b.uniform1f(v.fogDensity,C.density),b.uniform1i(v.fogType,2),J=x=2)):(b.uniform1i(v.fogType,0),J=x=0);for(var A,y,B=[],C=0;C<w;C++)A=r[C],y=A.material,A.visible&&0!==y.opacity&&(y.useScreenCoordinates?A.z=-A.position.z:(A._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,A.matrixWorld),A.z=-A._modelViewMatrix.elements[14]));r.sort(a);for(C=0;C<w;C++)A=
r[C],y=A.material,A.visible&&0!==y.opacity&&y.map&&y.map.image&&y.map.image.width&&(b.uniform1f(v.alphaTest,y.alphaTest),!0===y.useScreenCoordinates?(b.uniform1i(v.useScreenCoordinates,1),b.uniform3f(v.screenPosition,(A.position.x*c.devicePixelRatio-f)/f,(F-A.position.y*c.devicePixelRatio)/F,Math.max(0,Math.min(1,A.position.z))),B[0]=c.devicePixelRatio,B[1]=c.devicePixelRatio):(b.uniform1i(v.useScreenCoordinates,0),b.uniform1i(v.sizeAttenuation,y.sizeAttenuation?1:0),b.uniformMatrix4fv(v.modelViewMatrix,
!1,A._modelViewMatrix.elements),B[0]=1,B[1]=1),e=d.fog&&y.fog?J:0,x!==e&&(b.uniform1i(v.fogType,e),x=e),e=1/(y.scaleByViewport?t:1),B[0]=B[0]*e*z*A.scale.x,B[1]=B[1]*e*A.scale.y,b.uniform2f(v.uvScale,y.uvScale.x,y.uvScale.y),b.uniform2f(v.uvOffset,y.uvOffset.x,y.uvOffset.y),b.uniform2f(v.alignment,y.alignment.x,y.alignment.y),b.uniform1f(v.opacity,y.opacity),b.uniform3f(v.color,y.color.r,y.color.g,y.color.b),b.uniform1f(v.rotation,A.rotation),b.uniform2fv(v.scale,B),c.setBlending(y.blending,y.blendEquation,
y.blendSrc,y.blendDst),c.setDepthTest(y.depthTest),c.setDepthWrite(y.depthWrite),c.setTexture(y.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE)}}};
THREE.DepthPassPlugin=function(){this.enabled=!1;this.renderTarget=null;var a,b,c,d,e,f,g=new THREE.Frustum,h=new THREE.Matrix4;this.init=function(g){a=g.context;b=g;g=THREE.ShaderLib.depthRGBA;var h=THREE.UniformsUtils.clone(g.uniforms);c=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h});d=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,
vertexShader:g.vertexShader,uniforms:h,skinning:!0});f=new THREE.ShaderMaterial({fragmentShader:g.fragmentShader,vertexShader:g.vertexShader,uniforms:h,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;f._shadowPass=!0};this.render=function(a,b){this.enabled&&this.update(a,b)};this.update=function(k,l){var m,p,q,u,t,r;a.clearColor(1,1,1,1);a.disable(a.BLEND);b.setDepthTest(!0);!0===k.autoUpdate&&k.updateMatrixWorld();l.matrixWorldInverse.getInverse(l.matrixWorld);h.multiplyMatrices(l.projectionMatrix,
l.matrixWorldInverse);g.setFromMatrix(h);b.setRenderTarget(this.renderTarget);b.clear();r=k.__webglObjects;m=0;for(p=r.length;m<p;m++)q=r[m],t=q.object,q.render=!1,!t.visible||(t instanceof THREE.Mesh||t instanceof THREE.ParticleSystem)&&t.frustumCulled&&!g.intersectsObject(t)||(t._modelViewMatrix.multiplyMatrices(l.matrixWorldInverse,t.matrixWorld),q.render=!0);var w;m=0;for(p=r.length;m<p;m++)q=r[m],q.render&&(t=q.object,q=q.buffer,t instanceof THREE.ParticleSystem&&!t.customDepthMaterial||((w=
t.material instanceof THREE.MeshFaceMaterial?t.material.materials[0]:t.material)&&b.setMaterialFaces(t.material),u=0<t.geometry.morphTargets.length&&w.morphTargets,w=t instanceof THREE.SkinnedMesh&&w.skinning,u=t.customDepthMaterial?t.customDepthMaterial:w?u?f:e:u?d:c,q instanceof THREE.BufferGeometry?b.renderBufferDirect(l,k.__lights,null,u,q,t):b.renderBuffer(l,k.__lights,null,u,q,t)));r=k.__webglObjectsImmediate;m=0;for(p=r.length;m<p;m++)q=r[m],t=q.object,t.visible&&(t._modelViewMatrix.multiplyMatrices(l.matrixWorldInverse,
t.matrixWorld),b.renderImmediateObject(l,k.__lights,null,c,t));m=b.getClearColor();p=b.getClearAlpha();a.clearColor(m.r,m.g,m.b,p);a.enable(a.BLEND)}};
THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};
THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};THREE.BufferGeometryExporter=function(){};
THREE.BufferGeometryExporter.prototype={constructor:THREE.BufferGeometryExporter,parse:function(a){var b={metadata:{version:4,type:"BufferGeometry",generator:"BufferGeometryExporter"},attributes:{}},c=a.attributes,d=a.offsets;a=a.boundingSphere;for(var e in c){var f=c[e];b.attributes[e]={itemSize:f.itemSize,type:f.array.constructor.name,array:Array.apply([],f.array)}}0<d.length&&(b.offsets=JSON.parse(JSON.stringify(d)));null!==a&&(b.boundingSphere={center:a.center.toArray(),radius:a.radius});return b}};THREE.EditorControls=function(a,b,c){function d(a){!1!==l.enabled&&(a.preventDefault(),0===a.button?l.object instanceof THREE.PerspectiveCamera&&(p=m.ROTATE):1===a.button?p=m.ZOOM:2===a.button&&(p=m.PAN),b.addEventListener("mousemove",e,!1),b.addEventListener("mouseup",f,!1),b.addEventListener("mouseout",f,!1))}function e(a){if(!1!==l.enabled){a.preventDefault();var b=a.movementX||a.webkitMovementX||a.mozMovementX||a.oMovementX||0;a=a.movementY||a.webkitMovementY||a.mozMovementY||a.oMovementY||0;
p===m.ROTATE?l.rotate(new THREE.Vector3(.005*-b,.005*-a,0)):p===m.ZOOM?l.zoom(new THREE.Vector3(0,0,a)):p===m.PAN&&l.pan(new THREE.Vector3(-b,a,0))}}function f(a){!1!==l.enabled&&(b.removeEventListener("mousemove",e,!1),b.removeEventListener("mouseup",f,!1),b.removeEventListener("mouseout",f,!1),p=m.NONE)}function g(a){if(!1!==l.enabled){var b=0;a.wheelDelta?b=-a.wheelDelta:a.detail&&(b=10*a.detail);l.zoom(new THREE.Vector3(0,0,b))}}function h(a){if(!1!==l.enabled){a=a.touches;switch(a.length){case 2:var b=
a[0].pageX-a[1].pageX,c=a[0].pageY-a[1].pageY;v=Math.sqrt(b*b+c*c)}x.set(a[0].pageX,a[0].pageY,0)}}function k(a){if(!1!==l.enabled){a.preventDefault();a.stopPropagation();a=a.touches;w.set(a[0].pageX,a[0].pageY,0);switch(a.length){case 1:l.rotate(w.sub(x).multiplyScalar(-.005));break;case 2:var b=a[0].pageX-a[1].pageX,c=a[0].pageY-a[1].pageY,b=Math.sqrt(b*b+c*c);l.zoom(new THREE.Vector3(0,0,v-b));v=b;break;case 3:l.pan(w.sub(x).setX(-w.x))}x.set(a[0].pageX,a[0].pageY,0)}}console.log("THREE.EditorControls",
a,b,c);b=void 0!==b?b:document;this.enabled=!0;this.object=a;this.prefix=c;var l=this,m={NONE:-1,ROTATE:0,ZOOM:1,PAN:2},p=m.NONE,q=new THREE.Vector3,u=new THREE.Vector3,t=new THREE.Matrix3,r={type:"change"};this.setObject=function(a){console.log("setObject",a);this.object=a;u=new THREE.Vector3;q=new THREE.Vector3;t=new THREE.Matrix3};this.focusOnPoint=function(a){console.log("EditorControls.focusOnPoint",a);u=a;this.object.lookAt(u);l.dispatchEvent(r)};this.focus=function(a){u.getPositionFromMatrix(a.matrixWorld);
this.object.lookAt(u);l.dispatchEvent(r)};this.pan=function(a){if(l.object instanceof THREE.PerspectiveCamera)t.getNormalMatrix(this.object.matrix),a.applyMatrix3(t),a.multiplyScalar(.001*q.copy(u).sub(this.object.position).length()),this.object.position.add(a),u.add(a);else switch(a=(new THREE.Vector3).copy(a),a.divideScalar(this.object.zoom),this.object.name){case "front":this.object.position.add(a);break;case "side":this.object.position.add(new THREE.Vector3(a.z,a.y,-1*a.x));break;case "top":this.object.position.add(new THREE.Vector3(-1*
a.y,a.z,-1*a.x))}l.dispatchEvent(r)};this.zoom=function(a){l.object instanceof THREE.PerspectiveCamera?(t.getNormalMatrix(this.object.matrix),a.applyMatrix3(t),a.multiplyScalar(.001*q.copy(u).sub(this.object.position).length()),this.object.position.add(a)):this.object.zoom+=-.001*a.z;l.dispatchEvent(r)};this.rotate=function(a){q.copy(this.object.position).sub(u);var b=Math.atan2(q.x,q.z),c=Math.atan2(Math.sqrt(q.x*q.x+q.z*q.z),q.y),b=b+a.x,c=c+a.y,c=Math.max(1E-6,Math.min(Math.PI-1E-6,c));a=q.length();
q.x=a*Math.sin(c)*Math.sin(b);q.y=a*Math.cos(c);q.z=a*Math.sin(c)*Math.cos(b);this.object.position.copy(u).add(q);this.object.lookAt(u);l.dispatchEvent(r,"test")};b.addEventListener("contextmenu",function(a){a.preventDefault()},!1);b.addEventListener("mousedown",d,!1);b.addEventListener("mousewheel",g,!1);b.addEventListener("DOMMouseScroll",g,!1);var w=new THREE.Vector3,x=new THREE.Vector3,v=null;b.addEventListener("touchstart",h,!1);b.addEventListener("touchmove",k,!1);this.resetEvents=function(){f()};
this.clear=function(){console.log("THREE.EditorControls.clear");b.removeEventListener("contextmenu",function(a){a.preventDefault()},!1);b.removeEventListener("mousedown",d,!1);b.removeEventListener("mousewheel",g,!1);b.removeEventListener("DOMMouseScroll",g,!1);b.removeEventListener("touchstart",h,!1);b.removeEventListener("touchmove",k,!1)};return this};THREE.EditorControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.GeometryExporter=function(){};
THREE.GeometryExporter.prototype={constructor:THREE.GeometryExporter,parse:function(a){function b(a,b,c){return c?a|1<<b:a&~(1<<b)}function c(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==m[b])return m[b];m[b]=l.length/3;l.push(a.x,a.y,a.z);return m[b]}function d(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==q[b])return q[b];q[b]=p.length;p.push(a.getHex());return q[b]}function e(a){var b=a.x.toString()+a.y.toString();if(void 0!==t[b])return t[b];t[b]=u.length/
2;u.push(a.x,a.y);return t[b]}for(var f={metadata:{version:4,type:"geometry",generator:"GeometryExporter"}},g=[],h=0;h<a.vertices.length;h++){var k=a.vertices[h];g.push(k.x,k.y,k.z)}for(var k=[],l=[],m={},p=[],q={},u=[],t={},h=0;h<a.faces.length;h++){var r=a.faces[h],w=r instanceof THREE.Face3,x=0<a.faceVertexUvs[0].length,v=0<r.normal.length(),z=0<r.vertexNormals.length,F=1!==r.color.r||1!==r.color.g||1!==r.color.b,J=0<r.vertexColors.length,C=0,C=b(C,0,!w),C=b(C,1,!1),C=b(C,2,!1),C=b(C,3,x),C=b(C,
4,v),C=b(C,5,z),C=b(C,6,F),C=b(C,7,J);k.push(C);w?k.push(r.a,r.b,r.c):k.push(r.a,r.b,r.c,r.d);x&&(x=a.faceVertexUvs[0][h],w?k.push(e(x[0]),e(x[1]),e(x[2])):k.push(e(x[0]),e(x[1]),e(x[2]),e(x[3])));v&&k.push(c(r.normal));z&&(v=r.vertexNormals,w?k.push(c(v[0]),c(v[1]),c(v[2])):k.push(c(v[0]),c(v[1]),c(v[2]),c(v[3])));F&&k.push(d(r.color));J&&(r=r.vertexColors,w?k.push(d(r[0]),d(r[1]),d(r[2])):k.push(d(r[0]),d(r[1]),d(r[2]),d(r[3])))}f.vertices=g;f.normals=l;0<p.length&&(f.colors=p);0<u.length&&(f.uvs=
[u]);f.faces=k;return f}};THREE.MaterialExporter=function(){};
THREE.MaterialExporter.prototype={constructor:THREE.MaterialExporter,parse:function(a){var b={metadata:{version:4.2,type:"material",generator:"MaterialExporter"}};b.uuid=a.uuid;""!==a.name&&(b.name=a.name);!0===a.skinning&&(b.skinning=a.skinning);if(a instanceof THREE.MeshBasicMaterial)b.type="MeshBasicMaterial",b.color=a.color.getHex(),a.vertexColors!==THREE.NoColors&&(b.vertexColors=a.vertexColors),a.blending!==THREE.NormalBlending&&(b.blending=a.blending),b.opacity=a.opacity,b.transparent=a.transparent,
b.wireframe=a.wireframe;else if(a instanceof THREE.MeshLambertMaterial)b.type="MeshLambertMaterial",b.color=a.color.getHex(),b.ambient=a.ambient.getHex(),b.emissive=a.emissive.getHex(),a.vertexColors!==THREE.NoColors&&(b.vertexColors=a.vertexColors),a.blending!==THREE.NormalBlending&&(b.blending=a.blending),b.opacity=a.opacity,b.transparent=a.transparent,b.wireframe=a.wireframe;else if(a instanceof THREE.MeshPhongMaterial)b.type="MeshPhongMaterial",b.color=a.color.getHex(),b.ambient=a.ambient.getHex(),
b.emissive=a.emissive.getHex(),b.specular=a.specular.getHex(),b.shininess=a.shininess,a.vertexColors!==THREE.NoColors&&(b.vertexColors=a.vertexColors),a.blending!==THREE.NormalBlending&&(b.blending=a.blending),b.opacity=a.opacity,b.transparent=a.transparent,b.wireframe=a.wireframe;else if(a instanceof THREE.MeshNormalMaterial)b.type="MeshNormalMaterial",a.blending!==THREE.NormalBlending&&(b.blending=a.blending),b.opacity=a.opacity,b.transparent=a.transparent,b.wireframe=a.wireframe;else if(a instanceof
THREE.MeshDepthMaterial)b.type="MeshDepthMaterial",a.blending!==THREE.NormalBlending&&(b.blending=a.blending),b.opacity=a.opacity,b.transparent=a.transparent,b.wireframe=a.wireframe;else if(a instanceof THREE.MeshFaceMaterial){b.type="MeshFaceMaterial";b.materials=[];for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]))}return b}};THREE.NURBSCurve=function(a,b,c){this.degree=a;this.knots=b;this.controlPoints=[];for(a=0;a<c.length;++a)b=c[a],this.controlPoints[a]=new THREE.Vector4(b.x,b.y,b.z,b.w)};THREE.NURBSCurve.prototype=Object.create(THREE.Curve.prototype);THREE.NURBSCurve.prototype.getPoint=function(a){a=THREE.NURBSUtils.calcBSplinePoint(this.degree,this.knots,this.controlPoints,this.knots[0]+a*(this.knots[this.knots.length-1]-this.knots[0]));1!=a.w&&a.divideScalar(a.w);return new THREE.Vector3(a.x,a.y,a.z)};
THREE.NURBSCurve.prototype.getTangent=function(a){a=THREE.NURBSUtils.calcNURBSDerivatives(this.degree,this.knots,this.controlPoints,this.knots[0]+a*(this.knots[this.knots.length-1]-this.knots[0]),1)[1].clone();a.normalize();return a};THREE.NURBSUtils={findSpan:function(a,b,c){var d=c.length-a-1;if(b>=c[d])return d-1;if(b<=c[a])return a;for(var e=Math.floor((a+d)/2);b<c[e]||b>=c[e+1];)b<c[e]?d=e:a=e,e=Math.floor((a+d)/2);return e},calcBasisFunctions:function(a,b,c,d){for(var e=[],f=[],g=[],h=e[0]=1;h<=c;++h){f[h]=b-d[a+1-h];g[h]=d[a+h]-b;for(var k=0,l=0;l<h;++l){var m=g[l+1],p=f[h-l],q=e[l]/(m+p);e[l]=k+m*q;k=p*q}e[h]=k}return e},calcBSplinePoint:function(a,b,c,d){var e=this.findSpan(a,d,b);b=this.calcBasisFunctions(e,d,a,b);d=
new THREE.Vector4(0,0,0,0);for(var f=0;f<=a;++f){var g=c[e-a+f],h=b[f],k=g.w*h;d.x+=g.x*k;d.y+=g.y*k;d.z+=g.z*k;d.w+=g.w*h}return d},calcBasisFunctionDerivatives:function(a,b,c,d,e){for(var f=[],g=0;g<=c;++g)f[g]=0;for(var h=[],g=0;g<=d;++g)h[g]=f.slice(0);for(var k=[],g=0;g<=c;++g)k[g]=f.slice(0);k[0][0]=1;for(var l=f.slice(0),m=f.slice(0),g=1;g<=c;++g){l[g]=b-e[a+1-g];m[g]=e[a+g]-b;for(var p=0,q=0;q<g;++q){var u=m[q+1],t=l[g-q];k[g][q]=u+t;var r=k[q][g-1]/k[g][q];k[q][g]=p+u*r;p=t*r}k[g][g]=p}for(g=
0;g<=c;++g)h[0][g]=k[g][c];for(q=0;q<=c;++q){a=0;b=1;e=[];for(g=0;g<=c;++g)e[g]=f.slice(0);for(l=e[0][0]=1;l<=d;++l){m=0;p=q-l;u=c-l;q>=l&&(e[b][0]=e[a][0]/k[u+1][p],m=e[b][0]*k[p][u]);t=q-1<=u?l-1:c-q;for(g=-1<=p?1:-p;g<=t;++g)e[b][g]=(e[a][g]-e[a][g-1])/k[u+1][p+g],m+=e[b][g]*k[p+g][u];q<=u&&(e[b][l]=-e[a][l-1]/k[u+1][q],m+=e[b][l]*k[q][u]);h[l][q]=m;g=a;a=b;b=g}}q=c;for(l=1;l<=d;++l){for(g=0;g<=c;++g)h[l][g]*=q;q*=c-l}return h},calcBSplineDerivatives:function(a,b,c,d,e){var f=e<a?e:a,g=[],h=this.findSpan(a,
d,b);b=this.calcBasisFunctionDerivatives(h,d,a,f,b);d=[];for(var k=0;k<c.length;++k){var l=c[k].clone(),m=l.w;l.x*=m;l.y*=m;l.z*=m;d[k]=l}for(c=0;c<=f;++c){l=d[h-a].clone().multiplyScalar(b[c][0]);for(k=1;k<=a;++k)l.add(d[h-a+k].clone().multiplyScalar(b[c][k]));g[c]=l}for(c=f+1;c<=e+1;++c)g[c]=new THREE.Vector4(0,0,0);return g},calcKoverI:function(a,b){for(var c=1,d=2;d<=a;++d)c*=d;for(var e=1,d=2;d<=b;++d)e*=d;for(d=2;d<=a-b;++d)e*=d;return c/e},calcRationalCurveDerivatives:function(a){for(var b=
a.length,c=[],d=[],e=0;e<b;++e){var f=a[e];c[e]=new THREE.Vector3(f.x,f.y,f.z);d[e]=f.w}a=[];for(f=0;f<b;++f){for(var g=c[f].clone(),e=1;e<=f;++e)g.sub(a[f-e].clone().multiplyScalar(this.calcKoverI(f,e)*d[e]));a[f]=g.divideScalar(d[0])}return a},calcNURBSDerivatives:function(a,b,c,d,e){a=this.calcBSplineDerivatives(a,b,c,d,e);return this.calcRationalCurveDerivatives(a)},calcSurfacePoint:function(a,b,c,d,e,f,g){var h=this.findSpan(a,f,c),k=this.findSpan(b,g,d);c=this.calcBasisFunctions(h,f,a,c);d=
this.calcBasisFunctions(k,g,b,d);g=[];for(f=0;f<=b;++f){g[f]=new THREE.Vector4(0,0,0,0);for(var l=0;l<=a;++l){var m=e[h-a+l][k-b+f].clone(),p=m.w;m.x*=p;m.y*=p;m.z*=p;g[f].add(m.multiplyScalar(c[l]))}}a=new THREE.Vector4(0,0,0,0);for(f=0;f<=b;++f)a.add(g[f].multiplyScalar(d[f]));a.divideScalar(a.w);return new THREE.Vector3(a.x,a.y,a.z)}};THREE.ObjectExporter=function(){};
THREE.ObjectExporter.prototype={constructor:THREE.ObjectExporter,parse:function(a){var b={metadata:{version:4.3,type:"Object",generator:"ObjectExporter"}},c={},d=new THREE.GeometryExporter,e=new THREE.BufferGeometryExporter,f={},g=new THREE.MaterialExporter,h=function(a){if(!0===a.hasOwnProperty("exportType")&&"DO_NOT_EXPORT"===a.exportType||-1!="persp top front side manipulator spot ambient grid 0 1 2 3 4 5 6 7 8".split(" ").indexOf(a.name)||""===a.name)return{};var l={};l.uuid=a.uuid;""!==a.name&&
(l.name=a.name);void 0!==a.type&&(l.filterType=a.type);void 0!==a.asset&&(l.asset=a.asset);void 0!==a.animChannels&&(l.animChannels=a.animChannels);a.hasOwnProperty("driveChannel")&&(l.driveChannel=a.driveChannel);void 0!==a.tag&&(l.tag=a.tag);"{}"!==JSON.stringify(a.userData)&&(l.userData=a.userData);!0!==a.visible&&(l.visible=a.visible);void 0!==a.custom&&(l.custom=a.custom);if(a instanceof THREE.Scene)l.type="Scene";else if(a instanceof THREE.PerspectiveCamera)l.type="PerspectiveCamera",l.fov=
a.fov,l.aspect=a.aspect,l.near=a.near,l.far=a.far;else if(a instanceof THREE.OrthographicCamera)l.type="OrthographicCamera",l.left=a.left,l.right=a.right,l.top=a.top,l.bottom=a.bottom,l.near=a.near,l.far=a.far;else if(a instanceof THREE.AmbientLight)l.type="AmbientLight",l.color=a.color.getHex();else if(a instanceof THREE.DirectionalLight)l.type="DirectionalLight",l.color=a.color.getHex(),l.intensity=a.intensity;else if(a instanceof THREE.PointLight)l.type="PointLight",l.color=a.color.getHex(),l.intensity=
a.intensity,l.distance=a.distance;else if(a instanceof THREE.SpotLight)l.type="SpotLight",l.color=a.color.getHex(),l.intensity=a.intensity,l.distance=a.distance,l.angle=a.angle,l.exponent=a.exponent;else if(a instanceof THREE.HemisphereLight)l.type="HemisphereLight",l.color=a.color.getHex(),l.groundColor=a.groundColor.getHex();else if(a instanceof THREE.Mesh){l.type="Mesh";var m=l,p=a.geometry;void 0===b.geometries&&(b.geometries=[]);if(void 0===c[p.uuid]){var q={};q.uuid=p.uuid;""!==p.name&&(q.name=
p.name);p instanceof THREE.PlaneGeometry?(q.type="PlaneGeometry",q.width=p.width,q.height=p.height,q.widthSegments=p.widthSegments,q.heightSegments=p.heightSegments):p instanceof THREE.CubeGeometry?(q.type="CubeGeometry",q.width=p.width,q.height=p.height,q.depth=p.depth,q.widthSegments=p.widthSegments,q.heightSegments=p.heightSegments,q.depthSegments=p.depthSegments):p instanceof THREE.CylinderGeometry?(q.type="CylinderGeometry",q.radiusTop=p.radiusTop,q.radiusBottom=p.radiusBottom,q.height=p.height,
q.radiusSegments=p.radiusSegments,q.heightSegments=p.heightSegments,q.openEnded=q.openEnded):p instanceof THREE.SphereGeometry?(q.type="SphereGeometry",q.radius=p.radius,q.widthSegments=p.widthSegments,q.heightSegments=p.heightSegments,q.phiStart=p.phiStart,q.phiLength=p.phiLength,q.thetaStart=p.thetaStart,q.thetaLength=p.thetaLength):p instanceof THREE.IcosahedronGeometry?(q.type="IcosahedronGeometry",q.radius=p.radius,q.detail=p.detail):p instanceof THREE.TorusGeometry?(q.type="TorusGeometry",q.radius=
p.radius,q.tube=p.tube,q.radialSegments=p.radialSegments,q.tubularSegments=p.tubularSegments,q.arc=p.arc):p instanceof THREE.TorusKnotGeometry?(q.type="TorusKnotGeometry",q.radius=p.radius,q.tube=p.tube,q.radialSegments=p.radialSegments,q.tubularSegments=p.tubularSegments,q.p=p.p,q.q=p.q,q.heightScale=p.heightScale):p instanceof THREE.BufferGeometry?(q.type="BufferGeometry",q.data=e.parse(p),delete q.data.metadata):p instanceof THREE.Geometry&&(q.type="Geometry",q.data=d.parse(p),delete q.data.metadata);
c[p.uuid]=q;b.geometries.push(q)}m.geometry=p.uuid;m=l;p=a.material;void 0===b.materials&&(b.materials=[]);void 0===f[p.uuid]&&(q=g.parse(p),delete q.metadata,f[p.uuid]=q,b.materials.push(q));m.material=p.uuid}else a instanceof MM.Joint?(l.type="Joint",_.extend(l,a.exportData())):a instanceof MM.FourBoneIkBlendSolver?l=a.exportData():a instanceof MM.TwoBoneIkBlendSolver?l=a.exportData():a instanceof MM.TwoBoneSoftIkSolver?l=a.exportData():a instanceof MM.TwoBoneIkSolver?l=a.exportData():a instanceof
MM.OneSimpleBoneIkSolver?l=a.exportData():a instanceof MM.SplineCluster?l.type="SplineCluster":a instanceof MM.ParentMaster?l=a.exportData():a instanceof MM.Spaceswitch?l=a.exportData():a instanceof MM.Constraint?(l.type="Constraint",l.constraintMode=a.constraintMode,l.controlColor=a.controlColor,l.controlSize=a.controlSize,l.controlScale=a.controlScale,l.controlOffset=a.controlOffset,l.controlSide=a.controlSide,void 0!==a.controlShape&&(l.controlShape=a.controlShape),l.offsetMatrix=a.offsetMatrix.elements):
a instanceof MM.Control?(l.type="Control",l.controlColor=a.controlColor,l.controlSize=a.controlSize,l.controlScale=a.controlScale,l.controlOffset=a.controlOffset,l.controlSide=a.controlSide,void 0!==a.controlShape&&(l.controlShape=a.controlShape)):l.type="Object3D";l.matrix=a.matrix.toArray();if(0<a.children.length)for(l.children=[],p=0;p<a.children.length;p++)m=h(a.children[p]),0!==Object.getOwnPropertyNames(m).length&&l.children.push(m);l.animChannels=a.getChannels();l.animCurves=a.exportAnimation();
return l};b.object=h(a);return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(JSON.parse(a)))})},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=this.parseGeometries(a.geometries),c=this.parseMaterials(a.materials);return this.parseObject(a.object,b,c)},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,
e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case "PlaneGeometry":g=new THREE.PlaneGeometry(h.width,h.height,h.widthSegments,h.heightSegments);break;case "CubeGeometry":g=new THREE.CubeGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CylinderGeometry":g=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radiusSegments,h.heightSegments,h.openEnded);break;case "SphereGeometry":g=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,
h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":g=new THREE.IcosahedronGeometry(h.radius,h.detail);break;case "TorusGeometry":g=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":g=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);break;case "BufferGeometry":g=d.parse(h.data);break;case "Geometry":g=c.parse(h.data).geometry}g.uuid=h.uuid;void 0!==h.name&&
(g.name=h.name);void 0!==h.tag&&(g.tag=h.tag);b[h.uuid]=g}return b},parseMaterials:function(a){var b={};if(void 0!==a)for(var c=new THREE.MaterialLoader,d=0,e=a.length;d<e;d++){var f=a[d],g=c.parse(f);g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);b[f.uuid]=g}return b},parseObject:function(){var a=new THREE.Matrix4;return function(b,c,d){var e;switch(b.type){case "Scene":e=new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case "OrthographicCamera":e=
new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance);break;case "SpotLight":e=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.exponent);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case "Mesh":e=c[b.geometry];
var f=d[b.material];void 0===e&&console.error("THREE.ObjectLoader: Undefined geometry "+b.geometry);void 0===f&&console.error("THREE.ObjectLoader: Undefined material "+b.material);e=new THREE.Mesh(e,f);break;case "SplineCluster":e=new THREE.Object3D;break;case "FourBoneIkBlendSolver":e=new MM.FourBoneIkBlendSolver;e.importData(b);break;case "TwoBoneIkBlendSolver":e=new MM.TwoBoneIkBlendSolver;e.importData(b);break;case "TwoBoneSoftIkSolver":e=new MM.TwoBoneSoftIkSolver;e.importData(b);break;case "TwoBoneIkSolver":e=
new MM.TwoBoneIkSolver;e.importData(b);break;case "OneSimpleBoneIkSolver":e=new MM.OneSimpleBoneIkSolver;e.importData(b);console.log("\tresult:",e);break;case "Joint":e=new MM.Joint;e.importData(b);break;case "ParentMaster":e=new MM.ParentMaster;e.importData(b);break;case "Spaceswitch":e=new MM.Spaceswitch;e.importData(b);break;case "Constraint":e=new MM.Constraint;e.constraintMode=b.constraintMode;e.controlColor.setRGB(b.controlColor.r,b.controlColor.g,b.controlColor.b);e.controlSize=b.controlSize;
e.controlScale.set(b.controlScale.x,b.controlScale.y,b.controlScale.z);e.controlOffset.set(b.controlOffset.x,b.controlOffset.y,b.controlOffset.z);e.controlSide=b.controlSide;e.offsetMatrix.fromArray(b.offsetMatrix);b.hasOwnProperty("controlShape")&&(e.controlShape=b.controlShape);b.hasOwnProperty("custom")&&(e.custom=b.custom);break;case "Control":e=new MM.Control;e.controlColor.setRGB(b.controlColor.r,b.controlColor.g,b.controlColor.b);e.controlSize=b.controlSize;e.controlScale.set(b.controlScale.x,
b.controlScale.y,b.controlScale.z);e.controlOffset.set(b.controlOffset.x,b.controlOffset.y,b.controlOffset.z);e.controlSide=b.controlSide;b.hasOwnProperty("controlShape")&&(e.controlShape=b.controlShape);break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==b.name&&(e.name=b.name);void 0!==b.type&&(e.type=b.type);void 0!==b.asset&&(e.asset=b.asset);void 0!==b.animChannels&&(e.animChannels=b.animChannels);b.hasOwnProperty("driveChannel")&&(e.driveChannel=b.driveChannel);void 0!==b.custom&&(console.log("\treading in custom data object",
b.custom),e.custom=b.custom,!0===b.custom.hasOwnProperty("color")&&(b.custom.color=e.material.color));void 0!==b.tag&&(e.tag=b.tag);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],
c,d));void 0!==b.animCurves&&e.importAnimation(b.animCurves);return e}}()};THREE.OBJExporter=function(){};
THREE.OBJExporter.prototype={constructor:THREE.OBJExporter,parse:function(a){console.log(a);for(var b="",c=0,d=a.vertices.length;c<d;c++)var e=a.vertices[c],b=b+("v "+e.x+" "+e.y+" "+e.z+"\n");c=0;for(d=a.faceVertexUvs[0].length;c<d;c++)for(var f=a.faceVertexUvs[0][c],e=0;e<f.length;e++)var g=f[e],b=b+("vt "+g.x+" "+g.y+"\n");c=0;for(d=a.faces.length;c<d;c++)for(f=a.faces[c].vertexNormals,e=0;e<f.length;e++)g=f[e],b+="vn "+g.x+" "+g.y+" "+g.z+"\n";c=0;e=1;for(d=a.faces.length;c<d;c++,e+=3)f=a.faces[c],
b+="f ",b+=f.a+1+"/"+e+"/"+e+" ",b+=f.b+1+"/"+(e+1)+"/"+(e+1)+" ",b+=f.c+1+"/"+(e+2)+"/"+(e+2)+"\n";return b}};THREE.OBJLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.OBJLoader.prototype={constructor:THREE.OBJLoader,load:function(a,b,c,d){var e=this;c=new THREE.XHRLoader(e.manager);c.setCrossOrigin(this.crossOrigin);c.load(a,function(a){b(e.parse(a))})},parse:function(a){function b(a,b,c){return new THREE.Vector3(a,b,c)}function c(a,b){return new THREE.Vector2(a,b)}function d(a,b,c,d){return new THREE.Face3(a,b,c,d)}function e(a,b){0<h.vertices.length&&(h.mergeVertices(),h.computeCentroids(),h.computeFaceNormals(),h.computeBoundingSphere(),g.add(l),h=new THREE.Geometry,
l=new THREE.Mesh(h,k),p=0);void 0!==a&&(l.name=a);void 0!==b&&(k=new THREE.MeshLambertMaterial,k.name=b,l.material=k)}a=a.replace(/\ \\\r\n/g,"");a=a.replace(/f( +\d+)( +\d+)( +\d+)( +\d+)/g,"/f$1$2$4\n/f$2$3$4");a=a.replace(/f( +\d+\/\d+)( +\d+\/\d+)( +\d+\/\d+)( +\d+\/\d+)/g,"/f$1$2$4\n/f$2$3$4");a=a.replace(/f( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)( +\d+\/\d+\/\d+)/g,"/f$1$2$4\n/f$2$3$4");a=a.replace(/f( +\d+\/\/\d+)( +\d+\/\/\d+)( +\d+\/\/\d+)( +\d+\/\/\d+)/g,"/f$1$2$4\n/f$2$3$4");
var f=new THREE.Object3D,g=f,h=new THREE.Geometry,k=new THREE.MeshLambertMaterial,l=new THREE.Mesh(h,k),m=[],p=0,q=[],u=[],t=/v( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,r=/vn( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,w=/vt( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,x=/f( +\d+)( +\d+)( +\d+)/,v=/f( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))/,z=/f( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))/,F=/f( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))/;
a=a.split("\n");for(var J=0;J<a.length;J++){var C=a[J],C=C.trim(),A;0!==C.length&&"#"!==C.charAt(0)&&(null!==(A=t.exec(C))?m.push(b(parseFloat(A[1]),parseFloat(A[2]),parseFloat(A[3]))):null!==(A=r.exec(C))?q.push(b(parseFloat(A[1]),parseFloat(A[2]),parseFloat(A[3]))):null!==(A=w.exec(C))?u.push(c(parseFloat(A[1]),parseFloat(A[2]))):null!==(A=x.exec(C))?(h.vertices.push(m[parseInt(A[1])-1],m[parseInt(A[2])-1],m[parseInt(A[3])-1]),h.faces.push(d(p++,p++,p++))):null!==(A=v.exec(C))?(h.vertices.push(m[parseInt(A[2])-
1],m[parseInt(A[5])-1],m[parseInt(A[8])-1]),h.faces.push(d(p++,p++,p++)),h.faceVertexUvs[0].push([u[parseInt(A[3])-1],u[parseInt(A[6])-1],u[parseInt(A[9])-1]])):null!==(A=z.exec(C))?(h.vertices.push(m[parseInt(A[2])-1],m[parseInt(A[6])-1],m[parseInt(A[10])-1]),h.faces.push(d(p++,p++,p++,[q[parseInt(A[4])-1],q[parseInt(A[8])-1],q[parseInt(A[12])-1]])),h.faceVertexUvs[0].push([u[parseInt(A[3])-1],u[parseInt(A[7])-1],u[parseInt(A[11])-1]])):null!==(A=F.exec(C))?(h.vertices.push(m[parseInt(A[2])-1],m[parseInt(A[5])-
1],m[parseInt(A[8])-1]),h.faces.push(d(p++,p++,p++,[q[parseInt(A[3])-1],q[parseInt(A[6])-1],q[parseInt(A[9])-1]]))):/^o /.test(C)?(g=new THREE.Object3D,g.name=C.substring(2).trim(),f.add(g)):/^g /.test(C)?e(C.substring(2).trim(),void 0):/^usemtl /.test(C)?e(void 0,C.substring(7).trim()):/^mtllib /.test(C)||/^s /.test(C))}e(void 0,void 0);return f}};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray;new a.Plane;new a.Vector3;var d=new a.Vector3,e=new a.Matrix4,f=function(a,b){return a.distance-b.distance},g=new a.Vector3,h=new a.Vector3,k=new a.Vector3,l=function(f,m,u){if(f instanceof a.Particle){d.getPositionFromMatrix(f.matrixWorld);var t=m.ray.distanceToPoint(d);if(t>f.scale.x)return u;u.push({distance:t,point:f.position,face:null,object:f})}else if(f instanceof
MM.Control){if(null!==f.boundingBox&&!0===f.visible){c.copy(m.ray);d.getPositionFromMatrix(f.matrixWorld);m.ray.distanceToPoint(d);if(!1===c.isIntersectionBox(f.boundingBox))return u;if(!0===f.hasDisplay())for(var r=m.linePrecision,r=r*r,w=f.cd.geometry,x=w.vertices,v=x.length,z=new a.Vector3,F=new a.Vector3,J=1,w=0;w<v-1;w+=J)t=c.distanceSqToSegment(x[w],x[w+1],F,z),t>r||(t=c.origin.distanceTo(F),t<m.near||t>m.far||u.push({distance:t,point:z.clone().applyMatrix4(f.matrixWorld),face:null,faceIndex:null,
object:f}))}}else if(f instanceof a.LOD)d.getPositionFromMatrix(f.matrixWorld),t=m.ray.origin.distanceTo(d),l(f.getObjectForDistance(t),m,u);else if(f instanceof a.Mesh){w=f.geometry;null===w.boundingSphere&&w.computeBoundingSphere();b.copy(w.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===m.ray.isIntersectionSphere(b))return u;e.getInverse(f.matrixWorld);c.copy(m.ray).applyMatrix4(e);if(null!==w.boundingBox&&!1===c.isIntersectionBox(w.boundingBox))return u;x=w.vertices;if(w instanceof a.BufferGeometry){v=
f.material;if(void 0===v||!1===w.dynamic)return u;r=m.precision;if(void 0!==w.attributes.index)for(var x=w.offsets,J=w.attributes.index.array,C=w.attributes.position.array,A=w.offsets.length,y=w.attributes.index.array.length/3,y=0;y<A;++y)for(var t=x[y].start,z=x[y].count,B=x[y].index,w=t,K=t+z;w<K;w+=3)t=B+J[w],z=B+J[w+1],F=B+J[w+2],g.set(C[3*t],C[3*t+1],C[3*t+2]),h.set(C[3*z],C[3*z+1],C[3*z+2]),k.set(C[3*F],C[3*F+1],C[3*F+2]),z=c.intersectTriangle(g,h,k,v.side!==a.DoubleSide),null!==z&&(z.applyMatrix4(f.matrixWorld),
t=m.ray.origin.distanceTo(z),t<r||t<m.near||t>m.far||u.push({distance:t,point:z,face:null,faceIndex:null,object:f}));else for(C=w.attributes.position.array,y=w.attributes.position.array.length,w=0;w<y;w+=3)t=w,z=w+1,F=w+2,g.set(C[3*t],C[3*t+1],C[3*t+2]),h.set(C[3*z],C[3*z+1],C[3*z+2]),k.set(C[3*F],C[3*F+1],C[3*F+2]),z=c.intersectTriangle(g,h,k,v.side!==a.DoubleSide),null!==z&&(z.applyMatrix4(f.matrixWorld),t=m.ray.origin.distanceTo(z),t<r||t<m.near||t>m.far||u.push({distance:t,point:z,face:null,faceIndex:null,
object:f}))}else if(w instanceof a.Geometry)for(J=f.material instanceof a.MeshFaceMaterial,C=!0===J?f.material.materials:null,r=m.precision,A=0,y=w.faces.length;A<y;A++)B=w.faces[A],v=!0===J?C[B.materialIndex]:f.material,void 0!==v&&(t=x[B.a],z=x[B.b],F=x[B.c],z=c.intersectTriangle(t,z,F,v.side!==a.DoubleSide),null!==z&&(z.applyMatrix4(f.matrixWorld),t=m.ray.origin.distanceTo(z),t<r||t<m.near||t>m.far||u.push({distance:t,point:z,face:B,faceIndex:A,object:f})))}else if(f instanceof a.Line){r=m.linePrecision;
r*=r;w=f.geometry;null===w.boundingSphere&&w.computeBoundingSphere();b.copy(w.boundingSphere);b.applyMatrix4(f.matrixWorld);if(!1===m.ray.isIntersectionSphere(b))return u;e.getInverse(f.matrixWorld);c.copy(m.ray).applyMatrix4(e);x=w.vertices;v=x.length;z=new a.Vector3;F=new a.Vector3;J=f.type===a.LineStrip?1:2;for(w=0;w<v-1;w+=J)t=c.distanceSqToSegment(x[w],x[w+1],F,z),t>r||(t=c.origin.distanceTo(F),t<m.near||t>m.far||u.push({distance:t,point:z.clone().applyMatrix4(f.matrixWorld),face:null,faceIndex:null,
object:f}))}},m=function(a,b,c){a=a.getDescendants();for(var d=0,e=a.length;d<e;d++)l(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.linePrecision=1;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b)};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&m(a,this,c);l(a,this,c);c.sort(f);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)l(a[d],this,c),!0===b&&m(a[d],this,c);c.sort(f);return c}})(THREE);THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];this.geometry&&void 0!==this.geometry.bones&&(this.bones=this.geometry.bones,a=this.bones.length,this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,
this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a),this.pose());return this};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(){var a=new THREE.Matrix4;return function(b){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||b)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;b=0;for(var c=this.children.length;b<c;b++){var d=this.children[b];d instanceof THREE.Bone?d.update(this.identityMatrix,!1):d.updateMatrixWorld(!0)}if(void 0==this.boneInverses)for(console.log("reset bones rest position"),
this.boneInverses=[],b=0,c=this.bones.length;b<c;b++)d=new THREE.Matrix4,d.getInverse(this.bones[b].skinMatrix),this.boneInverses.push(d);b=0;for(c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b].matrixWorld,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();THREE.SkinnedMesh.prototype.pose=function(){console.log("SkinnedMesh: pose");this.updateMatrixWorld(!0)};
THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};var THREErad=57.29577951308232;
THREE.TransformControls=function(a,b,c){function d(a){"select"!==m.mode&&(a.preventDefault(),0===a.button&&!1===m.active&&((a=h(a,Q[m.mode].children))?(Ha!==a.object&&(null!==Ha&&(Ha.material.color.copy(Sa),Ha.material.opacity=Ta),Ha=a.object,Sa.copy(Ha.material.color),Ta=Ha.material.opacity,Ha.material.color.setRGB(1,1,0),Ha.material.opacity=1,m.dispatchEvent(p)),m.hovered=!0):null!==Ha&&(Ha.material.color.copy(Sa),Ha.material.opacity=Ta,Ha=null,m.dispatchEvent(p),m.hovered=!1)),m.document.addEventListener("mousemove",
f,!1),m.document.addEventListener("mouseup",g,!1))}function e(a){"local"!==m.space&&"world"!==m.space&&(m.space="local");a.preventDefault();var b;if(0===a.button&&"select"!==m.mode){var c=h(a,Q[m.mode].children);if(c&&(m.active=c.object.name,m.update(),m.setIntersectionPlane(),a=h(a,[R[ka]]),void 0!==m.objects&&0!==m.objects.length&&(b=m.objects.length-1,b=m.objects[b]),a))for(U.copy(b.position),O.copy(b.scale),V.extractRotation(b.matrix),ca.extractRotation(b.matrixWorld),D.extractRotation(b.parent.matrixWorld),
fa.getScaleFromMatrix(A.getInverse(b.parent.matrixWorld)),x.copy(a.point),ha=[],ma=[],ga=[],ba=[],I=[],da=[],b=0,a=m.objects.length;b<a;b++)ha.push((new THREE.Vector3).copy(m.objects[b].position)),ma.push((new THREE.Vector3).copy(m.objects[b].scale)),ga.push((new THREE.Matrix4).extractRotation(m.objects[b].matrix)),ba.push((new THREE.Matrix4).extractRotation(m.objects[b].matrixWorld)),I.push((new THREE.Matrix4).extractRotation(m.objects[b].parent.matrixWorld)),da.push((new THREE.Vector3).getScaleFromMatrix(A.getInverse(m.objects[b].parent.matrixWorld)))}m.document.addEventListener("mousemove",
f,!1);m.document.addEventListener("mouseup",g,!1);m.isMoving=!1}function f(a){if(m.active){!1===m.isMoving&&m.dispatchEvent(q);if(a=h(a,[R[ka]])){w.copy(a.point);a=[];void 0!==m.object&&a.push(m.object);var b;if(void 0!==m.objects||0!==m.objects.length)a=m.objects,b=a.length-1;var c,d;if("translate"==m.mode&&k("T")){w.sub(x);w.multiply(fa);if("local"==m.space){w.applyMatrix4(A.getInverse(ca));k("X")&&1==m.modifierAxis.x||(w.x=0);k("Y")&&1==m.modifierAxis.y||(w.y=0);k("Z")&&1==m.modifierAxis.z||(w.z=
0);k("XYZ")&&w.set(0,0,0);w.applyMatrix4(V);d=(new THREE.Vector3).copy(a[b].position);a[b].hasChannelGroup("position")&&(a[b].position.copy(U),a[b].position.add(w));var e=(new THREE.Vector3).copy(a[b].position),e=(new THREE.Vector3).subVectors(e,d);if(1<a.length)for(c=0,d=a.length-1;c<d;c++)a[c].position.add(e)}if("world"==m.space||k("XYZ"))if(k("X")&&1==m.modifierAxis.x||(w.x=0),k("Y")&&1==m.modifierAxis.y||(w.y=0),k("Z")&&1==m.modifierAxis.z||(w.z=0),w.applyMatrix4(A.getInverse(D)),d=(new THREE.Vector3).copy(a[b].position),
a[b].position.copy(U),a[b].position.add(w),m.snapDist&&(k("X")&&(a[b].position.x=Math.round(a[c].position.x/m.snapDist)*m.snapDist),k("Y")&&(a[b].position.y=Math.round(a[c].position.y/m.snapDist)*m.snapDist),k("Z")&&(a[b].position.z=Math.round(a[c].position.z/m.snapDist)*m.snapDist)),e=(new THREE.Vector3).copy(a[b].position),e=(new THREE.Vector3).subVectors(e,d),1<a.length)for(c=0,d=a.length-1;c<d;c++)a[c].position.add(e)}else if("rotate"==m.mode&&k("R"))if(w.sub(la),w.multiply(fa),y.copy(x).sub(la),
y.multiply(fa),"RE"==m.active)for(console.log("\t\tRE"),w.applyMatrix4(A.getInverse(J)),y.applyMatrix4(A.getInverse(J)),v.set(Math.atan2(w.z,w.y)*THREErad,Math.atan2(w.x,w.z)*THREErad,Math.atan2(w.y,w.x)*THREErad),z.set(Math.atan2(y.z,y.y)*THREErad,Math.atan2(y.x,y.z)*THREErad,Math.atan2(y.y,y.x)*THREErad),B.setFromRotationMatrix(A.getInverse(D)),G.setFromAxisAngle(C,v.z-z.z),P.setFromRotationMatrix(ca),B.multiplyQuaternions(B,G),B.multiplyQuaternions(B,P),c=0,d=a.length;c<d;c++)a[c].hasChannelGroup("rotation")&&
a[c].rotation.offsetUsingQuaternion(B);else if("RXYZE"==m.active)for(b=w.clone().cross(y).normalize(),b=new THREE.Euler(b.x*THREErad,b.y*THREErad,b.z*THREErad),G.setFromEuler(b),B.setFromRotationMatrix(A.getInverse(D)),X.setFromAxisAngle(G,-w.clone().angleTo(y)*THREErad),P.setFromRotationMatrix(ca),B.multiplyQuaternions(B,X),B.multiplyQuaternions(B,P),c=0,d=a.length;c<d;c++)a[c].hasChannelGroup("rotation")&&(console.log("\toffseting rotation on ",a[c]),a[c].rotation.offsetUsingQuaternion(B));else if("local"==
m.space){if(w.applyMatrix4(A.getInverse(ca)),y.applyMatrix4(A.getInverse(ca)),v.set(Math.atan2(w.z,w.y)*THREErad,Math.atan2(w.x,w.z)*THREErad,Math.atan2(w.y,w.x)*THREErad),z.set(Math.atan2(y.z,y.y)*THREErad,Math.atan2(y.x,y.z)*THREErad,Math.atan2(y.y,y.x)*THREErad),P.setFromRotationMatrix(V),X.setFromAxisAngle(K,v.x-z.x),H.setFromAxisAngle(M,v.y-z.y),E.setFromAxisAngle(S,v.z-z.z),"RX"==m.active&&P.multiplyQuaternions(P,X),"RY"==m.active&&P.multiplyQuaternions(P,H),"RZ"==m.active&&P.multiplyQuaternions(P,
E),c=new THREE.Vector3(a[b].rotation.x,a[b].rotation.y,a[b].rotation.z),a[b].hasChannelGroup("rotation")&&a[b].rotation.offsetUsingQuaternion(P),b=new THREE.Vector3(a[b].rotation.x,a[b].rotation.y,a[b].rotation.z),b=(new THREE.Vector3).subVectors(b,c),1<a.length)for(c=0,d=a.length-1;c<d;c++)a[c].hasChannelGroup("rotation")&&(a[c].rotation.x+=b.x,a[c].rotation.y+=b.y,a[c].rotation.z+=b.z)}else{if("world"==m.space)for(v.set(Math.atan2(w.z,w.y)*THREErad,Math.atan2(w.x,w.z)*THREErad,Math.atan2(w.y,w.x)*
THREErad),z.set(Math.atan2(y.z,y.y)*THREErad,Math.atan2(y.x,y.z)*THREErad,Math.atan2(y.y,y.x)*THREErad),c=0,d=a.length;c<d;c++)a[c].hasChannelGroup("rotation")&&(B.setFromRotationMatrix(A.getInverse(I[c])),X.setFromAxisAngle(K,v.x-z.x),H.setFromAxisAngle(M,v.y-z.y),E.setFromAxisAngle(S,v.z-z.z),P.setFromRotationMatrix(ba[c]),"RX"==m.active&&B.multiplyQuaternions(B,X),"RY"==m.active&&B.multiplyQuaternions(B,H),"RZ"==m.active&&B.multiplyQuaternions(B,E),B.multiplyQuaternions(B,P),a[c].rotation.offsetUsingQuaternion(B))}else if("scale"==
m.mode&&k("S")&&(w.sub(x),w.multiply(fa),"local"==m.space))if(k("XYZ")){if(F=1+w.y/50,c=(new THREE.Vector3).copy(a[b].scale),a[b].hasChannelGroup("scale")&&(a[b].scale.x=O.x*F,a[b].scale.y=O.y*F,a[b].scale.z=O.z*F),b=(new THREE.Vector3).copy(a[b].scale),b=(new THREE.Vector3).subVectors(b,c),1<a.length)for(c=0,d=a.length-1;c<d;c++)a[c].hasChannelGroup("scale")&&a[c].scale.add(b)}else if(w.applyMatrix4(A.getInverse(ca)),k("X")&&1==m.modifierAxis.x||(w.x=0),k("Y")&&1==m.modifierAxis.y||(w.y=0),k("Z")&&
1==m.modifierAxis.z||(w.z=0),c=(new THREE.Vector3).copy(a[b].scale),a[b].hasChannelGroup("scale")&&(k("X")&&(a[b].scale.x=O.x*(1+w.x/50)),k("Y")&&(a[b].scale.y=O.y*(1+w.y/50)),k("Z")&&(a[b].scale.z=O.z*(1+w.z/50))),b=(new THREE.Vector3).copy(a[b].scale),b=(new THREE.Vector3).subVectors(b,c),console.log("\t\t\tScale value:",b),1<a.length)for(c=0,d=a.length-1;c<d;c++)a[c].hasChannelGroup("scale")?(console.log("\t\t\t\tApplying scale value to",a[c]),a[c].scale.add(b)):console.log("\t\t\t\tUnable to scale",
a[c]);else console.log("\t\t\tOnly one object to apply scale to.")}m.isMoving=!0;m.update();m.dispatchEvent(p)}}function g(a){m.active=!1;m.isMoving=!1;m.document.removeEventListener("mousemove",f,!1);m.document.removeEventListener("mouseup",g,!1)}function h(a,b){r.set(a.layerX/m.domElement.offsetWidth*2-1,2*-(a.layerY/m.domElement.offsetHeight)+1,.5);"front"===m.camera.name?(t.unprojectVector(r,m.camera),u.ray.origin.y=r.y,u.ray.origin.x=r.x,u.ray.origin.z=-100,u.ray.direction.x=0,u.ray.direction.y=
0,u.ray.direction.z=1):"side"===m.camera.name?(t.unprojectVector(r,m.camera),u.ray.origin.y=r.y,u.ray.origin.z=r.z,u.ray.origin.x=-100,u.ray.direction.z=0,u.ray.direction.y=0,u.ray.direction.x=1):"top"===m.camera.name?(t.unprojectVector(r,m.camera),u.ray.origin.x=r.x,u.ray.origin.z=r.z,u.ray.origin.y=-100,u.ray.direction.z=0,u.ray.direction.x=0,u.ray.direction.y=1):(t.unprojectVector(r,m.camera),u.set(na,r.sub(na).normalize()));var c=u.intersectObjects(b,!0);return c[0]?c[0]:!1}function k(a){return-1!=
m.active.search(a)?!0:!1}function l(a){var b=new THREE.Geometry;THREE.GeometryUtils.merge(b,a);a.geometry=b;a.position.set(0,0,0);a.rotation.set(0,0,0);a.scale.set(1,1,1)}this.camera=a;this.domElement=void 0!==b?b:document;this.document=void 0!==c?c:document;this.objects=this.object=void 0;this.hovered=this.active=!1;this.mode="translate";this.space="world";this.scale=1;this.snapDist=null;this.modifierAxis=new THREE.Vector3(1,1,1);this.gizmo=new THREE.Object3D;this.gizmo.exportType="DO_NOT_EXPORT";
this.isMoving=!1;var m=this,p={type:"change"},q={type:"start"},u=new THREE.Raycaster,t=new THREE.Projector,r=new THREE.Vector3,w=new THREE.Vector3,x=new THREE.Vector3,v=new THREE.Vector3,z=new THREE.Vector3,F=1,J=new THREE.Matrix4,C=new THREE.Vector3,A=new THREE.Matrix4,y=new THREE.Vector3,B=new THREE.Quaternion,K=new THREE.Vector3(1,0,0),M=new THREE.Vector3(0,1,0),S=new THREE.Vector3(0,0,1),P=new THREE.Quaternion,X=new THREE.Quaternion,H=new THREE.Quaternion,E=new THREE.Quaternion,G=new THREE.Quaternion,
U=new THREE.Vector3,O=new THREE.Vector3,V=new THREE.Matrix4,ha=[],ma=[],ga=[],D=new THREE.Matrix4,fa=new THREE.Vector3,I=[],da=[],la=new THREE.Vector3,Ba=new THREE.Euler,ca=new THREE.Matrix4,na=new THREE.Vector3,Y=new THREE.Euler,ba=[],W={},Q={},R={};b=["XY","YZ","XZ","XYZE"];var ka="XY";a=new THREE.Object3D;a.exportType="DO_NOT_EXPORT";this.gizmo.add(a);for(var ea in b)R[b[ea]]=new THREE.Mesh(new THREE.PlaneGeometry(500,500)),R[b[ea]].material.side=THREE.DoubleSide,R[b[ea]].visible=!1,a.add(R[b[ea]]);
R.YZ.rotation.set(0,90,0);R.XZ.rotation.set(-90,0,0);l(R.YZ);l(R.XZ);W.translate=new THREE.Object3D;W.rotate=new THREE.Object3D;W.scale=new THREE.Object3D;this.gizmo.add(W.translate);this.gizmo.add(W.rotate);this.gizmo.add(W.scale);W.translate.exportType="DO_NOT_EXPORT";W.rotate.exportType="DO_NOT_EXPORT";W.scale.exportType="DO_NOT_EXPORT";Q.translate=new THREE.Object3D;Q.rotate=new THREE.Object3D;Q.scale=new THREE.Object3D;this.gizmo.add(Q.translate);this.gizmo.add(Q.rotate);this.gizmo.add(Q.scale);
Q.translate.exportType="DO_NOT_EXPORT";Q.rotate.exportType="DO_NOT_EXPORT";Q.scale.exportType="DO_NOT_EXPORT";ea=function(a,b){var c=new THREE.MeshBasicMaterial;c.color=a;c.side=THREE.DoubleSide;c.depthTest=!1;c.depthWrite=!1;c.opacity=void 0!==b?b:1;c.transparent=!0;return c};b=function(a,b){var c=new THREE.LineBasicMaterial;c.color=a;c.depthTest=!1;c.depthWrite=!1;c.opacity=void 0!==b?b:1;c.transparent=!0;return c};c=new THREE.Color(16777215);var Ia=new THREE.Color(8421504),Fa=new THREE.Color(16711680),
Ja=new THREE.Color(65280),qa=new THREE.Color(255),za=new THREE.Color(65535),Pa=new THREE.Color(16711935),Ga=new THREE.Color(16776960),ja,L;ja=new THREE.Geometry;ja.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,1));ja.colors.push(Fa,Fa,Ja,Ja,qa,qa);L=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});L=new THREE.Line(ja,L,THREE.LinePieces);
W.translate.add(L);W.scale.add(L.clone());L=new THREE.Mesh(new THREE.OctahedronGeometry(.1,0),ea(c,.25));L.name="TXYZ";W.translate.add(L);Q.translate.add(L.clone());ja=new THREE.PlaneGeometry(.5,.5);L=new THREE.Mesh(ja,ea(Ga,.25));L.position.set(.25,.25,0);l(L);L.name="TXY";W.translate.add(L);Q.translate.add(L.clone());L=new THREE.Mesh(ja,ea(za,.25));L.position.set(0,.25,.25);L.rotation.y=90;l(L);L.name="TYZ";W.translate.add(L);Q.translate.add(L.clone());L=new THREE.Mesh(ja,ea(Pa,.25));L.position.set(.25,
0,.25);L.rotation.x=90;l(L);L.name="TXZ";W.translate.add(L);Q.translate.add(L.clone());ja=new THREE.CylinderGeometry(0,.05,.2,4,1,!0);L=new THREE.Mesh(ja,ea(Fa));L.position.x=1.1;L.rotation.z=-90;l(L);L.name="TX";W.translate.add(L);L=new THREE.Mesh(ja,ea(Ja));L.position.y=1.1;l(L);L.name="TY";W.translate.add(L);L=new THREE.Mesh(ja,ea(qa));L.position.z=1.1;L.rotation.x=90;l(L);L.name="TZ";W.translate.add(L);ja=new THREE.CylinderGeometry(.2,.1,.8,4,1,!1);L=new THREE.Mesh(ja,ea(Fa));L.position.x=.7;
L.rotation.z=-90;l(L);L.name="TX";Q.translate.add(L);L=new THREE.Mesh(ja,ea(Ja));L.position.y=.7;l(L);L.name="TY";Q.translate.add(L);L=new THREE.Mesh(ja,ea(qa));L.position.z=.7;L.rotation.x=90;l(L);L.name="TZ";Q.translate.add(L);ja=new THREE.CubeGeometry(.125,.125,.125);L=new THREE.Mesh(ja,ea(c,.25));L.name="SXYZ";W.scale.add(L);Q.scale.add(L.clone());L=new THREE.Mesh(ja,ea(Fa));L.position.set(1.05,0,0);l(L);L.name="SX";W.scale.add(L);Q.scale.add(L.clone());L=new THREE.Mesh(ja,ea(Ja));L.position.set(0,
1.05,0);l(L);L.name="SY";W.scale.add(L);Q.scale.add(L.clone());L=new THREE.Mesh(ja,ea(qa));L.position.set(0,0,1.05);l(L);L.name="SZ";W.scale.add(L);Q.scale.add(L.clone());za=function(a,b,c){ja=new THREE.Geometry;c=c?c:1;for(var d=0;d<=64*c;++d)"x"==b&&ja.vertices.push((new THREE.Vector3(0,Math.cos(d/32*Math.PI),Math.sin(d/32*Math.PI))).multiplyScalar(a)),"y"==b&&ja.vertices.push((new THREE.Vector3(Math.cos(d/32*Math.PI),0,Math.sin(d/32*Math.PI))).multiplyScalar(a)),"z"==b&&ja.vertices.push((new THREE.Vector3(Math.sin(d/
32*Math.PI),Math.cos(d/32*Math.PI),0)).multiplyScalar(a));return ja};L=new THREE.Line(za(1,"x",.5),b(Fa));L.name="RX";W.rotate.add(L);L=new THREE.Line(za(1,"y",.5),b(Ja));L.name="RY";W.rotate.add(L);L=new THREE.Line(za(1,"z",.5),b(qa));L.name="RZ";W.rotate.add(L);L=new THREE.Line(za(1,"z"),b(Ia));L.name="RXYZE";W.rotate.add(L);L=new THREE.Line(za(1.25,"z"),b(Ga,.25));L.name="RE";W.rotate.add(L);ja=new THREE.TorusGeometry(1,.15,4,6,Math.PI);L=new THREE.Mesh(ja,ea(Fa));L.rotation.z=-90;L.rotation.y=
-90;l(L);L.name="RX";Q.rotate.add(L);L=new THREE.Mesh(ja,ea(Ja));L.rotation.z=90;L.rotation.x=-90;l(L);L.name="RY";Q.rotate.add(L);L=new THREE.Mesh(ja,ea(qa));L.rotation.z=-90;l(L);L.name="RZ";Q.rotate.add(L);L=new THREE.Mesh(new THREE.SphereGeometry(.95,12,12),ea(c,.25));L.name="RXYZE";Q.rotate.add(L);R.SPHERE=new THREE.Mesh(new THREE.SphereGeometry(.95,12,12));R.SPHERE.visible=!1;a.add(R.SPHERE);L=new THREE.Mesh(new THREE.TorusGeometry(1.3,.15,4,12),ea(Ga,.25));L.name="RE";Q.rotate.add(L);L=null;
this.attach=function(a){this.object=a;this.setMode(m.mode);this.domElement.addEventListener("mousedown",e,!1);this.domElement.addEventListener("mousemove",d,!1)};this.multiAttach=function(a){this.objects=a;this.setMode(m.mode);this.domElement.addEventListener("mousedown",e,!1);this.domElement.addEventListener("mousemove",d,!1)};this.detach=function(a){this.objects=this.object=void 0;this.hovered=!1;this.hide();this.domElement.removeEventListener("mousedown",e,!1);this.domElement.removeEventListener("mousemove",
d,!1)};this.changeAttach=function(a,b){void 0===this.objects||a===this.camera&&b===this.domElement||(this.domElement.removeEventListener("mousedown",e,!1),this.domElement.removeEventListener("mousemove",d,!1),this.camera=a,this.domElement=b,this.domElement.addEventListener("mousedown",e,!1),this.domElement.addEventListener("mousemove",d,!1))};this.update=function(){if(void 0!==this.objects&&0!==this.objects.length){var a=[];void 0!==this.object&&a.push(d);void 0!==this.objects&&(a=this.objects[this.objects.length-
1]);a.updateMatrixWorld();la.getPositionFromMatrix(a.matrixWorld);Ba.setFromRotationMatrix(A.extractRotation(a.matrixWorld));this.camera.updateMatrixWorld();na.getPositionFromMatrix(this.camera.matrixWorld);Y.setFromRotationMatrix(A.extractRotation(this.camera.matrixWorld));F=this.camera instanceof THREE.PerspectiveCamera?la.distanceTo(na)/6*this.scale:1/this.camera.zoom*60*this.scale;this.gizmo.position.copy(la);this.gizmo.scale.set(F,F,F);for(var b in this.gizmo.children)for(var c in this.gizmo.children[b].children){var d=
this.gizmo.children[b].children[c],a=d.name;-1!=a.search("E")?(J.lookAt(na,la,y.set(0,1,0)),d.rotation.setFromRotationMatrix(J)):(C.copy(na).sub(la).normalize(),"local"==this.space?(B.setFromEuler(Ba),-1!=a.search("R")&&(A.makeRotationFromQuaternion(B).getInverse(A),C.applyProjection(A),"RX"==a&&(X.setFromAxisAngle(K,Math.atan2(-C.y,C.z)*THREErad),B.multiplyQuaternions(B,X)),"RY"==a&&(H.setFromAxisAngle(M,Math.atan2(C.x,C.z)*THREErad),B.multiplyQuaternions(B,H)),"RZ"==a&&(E.setFromAxisAngle(S,Math.atan2(C.y,
C.x)*THREErad),B.multiplyQuaternions(B,E))),d.quaternion.copy(B)):"world"==this.space&&(d.rotation.set(0,0,0),"RX"==a&&(d.rotation.x=Math.atan2(-C.y,C.z)*THREErad),"RY"==a&&(d.rotation.y=Math.atan2(C.x,C.z)*THREErad),"RZ"==a&&(d.rotation.z=Math.atan2(C.y,C.x)*THREErad)))}}};this.hide=function(){for(var a in W)for(var b in W[a].children)W[a].children[b].visible=!1;for(a in Q)for(b in Q[a].children)Q[a].children[b].visible=!1};this.setMode=function(a){m.mode===a&&(m.space="local"===m.space?"world":
"local");m.mode=a;this.hide();var b;void 0!==this.object&&(b=this.object);void 0!==this.objects&&0!==this.objects.length&&(b=this.objects[this.objects.length-1]);if("select"!==a){var c;if(void 0!==b){switch(a){case "translate":c=b.getChannelsFromGroup("position");break;case "rotate":c=b.getChannelsFromGroup("rotation");break;case "scale":c=b.getChannelsFromGroup("scale")}"scale"==m.mode&&(m.space="local");for(var d in W[this.mode].children)a=W[this.mode].children[d].name,!0===THREE.containsElementFromArray(a.toLowerCase(),
c)&&(W[this.mode].children[d].visible=!0);for(d in Q[this.mode].children)Q[this.mode].children[d].visible=!1}}m.update()};this.setIntersectionPlane=function(){console.log("TransformControls: setIntersectionPlane");console.log("\tusing",m.objects);C.copy(na).sub(la).normalize();"local"==this.space&&C.applyMatrix4(A.getInverse(m.objects[0].matrixWorld));k("X")&&(ka=C.y>C.z?"XZ":"XY");k("Y")&&(ka=C.x>C.z?"YZ":"XY");k("Z")&&(ka=C.x>C.y?"YZ":"XZ");k("XY")&&(ka="XY");k("YZ")&&(ka="YZ");k("XZ")&&(ka="XZ");
if(k("XYZ")||k("E"))ka="XYZE";k("RX")&&(ka="YZ");k("RY")&&(ka="XZ");k("RZ")&&(ka="XY");k("RXYZ")&&(ka="SPHERE");"front"===m.camera.name&&(ka="XY");"side"===m.camera.name&&(ka="YZ");"top"===m.camera.name&&(ka="XZ")};var Ha=null,Sa=new THREE.Color,Ta=1};THREE.TransformControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nvec3 shadowZ = vec3( shadowCoord.z );\nshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\nshadowKernel[0] *= vec3(0.25);\nshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\nshadowKernel[1] *= vec3(0.25);\nshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\nshadowKernel[2] *= vec3(0.25);\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.morphtarget_pars_vertex,"void main() {\nvNormal = normalize( normalMatrix * normal );",
THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",
value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",
value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},uRefractionRatio:{type:"f",value:.98},uReflectivity:{type:"f",value:.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};THREE.PlaneHelper=function(a){var b=[new THREE.Vector3(1,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,0),new THREE.Vector3(1,0,0)];this.vertices=b;var c=new THREE.Geometry;c.vertices.push(b[0],b[1],b[1],b[2],b[2],b[3],b[3],b[0]);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);void 0!==a&&this.update(a)};THREE.PlaneHelper.prototype=Object.create(THREE.Line.prototype);
THREE.PlaneHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.vertices;d[0].set(b.x,b.y,0);d[1].set(c.x,b.y,0);d[2].set(c.x,c.y,0);d[3].set(b.x,c.y,0);this.geometry.computeBoundingSphere();this.geometry.verticesNeedUpdate=!0;this.matrixAutoUpdate=!1;this.matrixWorld=a.matrixWorld};THREE.SceneExporter=function(){};
THREE.SceneExporter.prototype={constructor:THREE.SceneExporter,parse:function(a){function b(a,c){for(var d=0;d<a.children.length;d++){var e=a.children[d];e instanceof THREE.Mesh?(ha.push(p(e,c)),B+=1,e.geometry.id in G||(G[e.geometry.id]=!0,P.push(q(e.geometry)),K+=1),e.material.id in U||(U[e.material.id]=!0,X.push(u(e.material)),M+=1,V(e.material.map),V(e.material.envMap),V(e.material.lightMap),V(e.material.specularMap),V(e.material.bumpMap),V(e.material.normalMap))):e instanceof THREE.Light?(ha.push(k(e,
c)),B+=1):e instanceof THREE.Camera?(ha.push(l(e,c)),B+=1):e instanceof THREE.Object3D&&(ha.push(m(e,c)),B+=1);0<e.children.length&&ha.push(h(c+1)+'\t\t"children" : {');b(e,c+2);0<e.children.length&&ha.push(h(c+1)+"\t\t}");ha.push(h(c)+"\t\t}"+(d<a.children.length-1?",\n":""))}}function c(a){return"["+a.x+","+a.y+"]"}function d(a){return"["+a.x+","+a.y+","+a.z+"]"}function e(a){return"["+a.r.toFixed(3)+","+a.g.toFixed(3)+","+a.b.toFixed(3)+"]"}function f(a){return'"'+a+'"'}function g(a){for(var b=
"NearestFilter NearestMipMapNearestFilter NearestMipMapLinearFilter LinearFilter LinearMipMapNearestFilter LinearMipMapLinearFilter".split(" "),c=0;c<b.length;c++)if(THREE[b[c]]===a)return f(b[c]);return""}function h(a){for(var b="",c=0;c<a;c++)b+="\t";return b}function k(a,b){var c=a instanceof THREE.AmbientLight?["\t\t"+f(x(a))+" : {",'\t"type"  : "AmbientLight",','\t"color" : '+a.color.getHex()+(a.children.length?",":"")]:a instanceof THREE.DirectionalLight?["\t\t"+f(x(a))+" : {",'\t"type"      : "DirectionalLight",',
'\t"color"     : '+a.color.getHex()+",",'\t"intensity" : '+a.intensity+",",'\t"direction" : '+d(a.position)+",",'\t"target"    : '+f(x(a.target))+(a.children.length?",":"")]:a instanceof THREE.PointLight?["\t\t"+f(x(a))+" : {",'\t"type"      : "PointLight",','\t"color"     : '+a.color.getHex()+",",'\t"intensity" : '+a.intensity+",",'\t"position"  : '+d(a.position)+",",'\t"distance"  : '+a.distance+(a.children.length?",":"")]:a instanceof THREE.SpotLight?["\t\t"+f(x(a))+" : {",'\t"type"      : "SpotLight",',
'\t"color"     : '+a.color.getHex()+",",'\t"intensity" : '+a.intensity+",",'\t"position"  : '+d(a.position)+",",'\t"distance"  : '+a.distance+",",'\t"angle"     : '+a.angle+",",'\t"exponent"  : '+a.exponent+",",'\t"target"    : '+f(x(a.target))+(a.children.length?",":"")]:a instanceof THREE.HemisphereLight?["\t\t"+f(x(a))+" : {",'\t"type"        : "HemisphereLight",','\t"skyColor"    : '+a.color.getHex()+",",'\t"groundColor" : '+a.groundColor.getHex()+",",'\t"intensity"   : '+a.intensity+",",'\t"position"    : '+
d(a.position)+(a.children.length?",":"")]:[];return w(c,"\n\t\t",b)}function l(a,b){var c=a instanceof THREE.PerspectiveCamera?["\t\t"+f(x(a))+" : {",'\t"type"     : "PerspectiveCamera",','\t"fov"      : '+a.fov+",",'\t"aspect"   : '+a.aspect+",",'\t"near"     : '+a.near+",",'\t"far"      : '+a.far+",",'\t"position" : '+d(a.position)+(a.children.length?",":"")]:a instanceof THREE.OrthographicCamera?["\t\t"+f(x(a))+" : {",'\t"type"     : "OrthographicCamera",','\t"left"     : '+a.left+",",'\t"right"    : '+
a.right+",",'\t"top"      : '+a.top+",",'\t"bottom"   : '+a.bottom+",",'\t"near"     : '+a.near+",",'\t"far"      : '+a.far+",",'\t"position" : '+d(a.position)+(a.children.length?",":"")]:[];return w(c,"\n\t\t",b)}function m(a,b){var c=["\t\t"+f(x(a))+" : {",'\t"position" : '+d(a.position)+",",'\t"rotation" : '+d(a.rotation)+",",'\t"scale"\t   : '+d(a.scale)+",",'\t"visible"  : '+a.visible+(a.children.length?",":"")];return w(c,"\n\t\t",b)}function p(a,b){var c=["\t\t"+f(x(a))+" : {",'\t"geometry" : '+
f(v(a.geometry))+",",'\t"material" : '+f(z(a.material))+",",'\t"position" : '+d(a.position)+",",'\t"rotation" : '+d(a.rotation)+",",'\t"scale"\t   : '+d(a.scale)+",",'\t"visible"  : '+a.visible+(a.children.length?",":"")];return w(c,"\n\t\t",b)}function q(a){a=a instanceof THREE.SphereGeometry?["\t"+f(v(a))+": {",'\t"type"    : "sphere",','\t"radius"  : '+a.radius+",",'\t"widthSegments"  : '+a.widthSegments+",",'\t"heightSegments" : '+a.heightSegments,"}"]:a instanceof THREE.CubeGeometry?["\t"+f(v(a))+
": {",'\t"type"    : "cube",','\t"width"  : '+a.width+",",'\t"height"  : '+a.height+",",'\t"depth"  : '+a.depth+",",'\t"widthSegments"  : '+a.widthSegments+",",'\t"heightSegments" : '+a.heightSegments+",",'\t"depthSegments" : '+a.depthSegments,"}"]:a instanceof THREE.PlaneGeometry?["\t"+f(v(a))+": {",'\t"type"    : "plane",','\t"width"  : '+a.width+",",'\t"height"  : '+a.height+",",'\t"widthSegments"  : '+a.widthSegments+",",'\t"heightSegments" : '+a.heightSegments,"}"]:a instanceof THREE.Geometry?
"ascii"===a.sourceType||"ctm"===a.sourceType||"stl"===a.sourceType||"vtk"===a.sourceType?["\t"+f(v(a))+": {",'\t"type" : '+f(a.sourceType)+",",'\t"url"  : '+f(a.sourceFile),"}"]:[]:[];return w(a,"\n\t\t")}function u(a){if(a instanceof THREE.MeshBasicMaterial)var b=["\t"+f(z(a))+": {",'\t"type"    : "MeshBasicMaterial",','\t"parameters"  : {','\t\t"color"  : '+a.color.getHex()+",",a.map?'\t\t"map" : '+f(F(a.map))+",":"",a.envMap?'\t\t"envMap" : '+f(F(a.envMap))+",":"",a.specularMap?'\t\t"specularMap" : '+
f(F(a.specularMap))+",":"",a.lightMap?'\t\t"lightMap" : '+f(F(a.lightMap))+",":"",'\t\t"reflectivity"  : '+a.reflectivity+",",'\t\t"transparent" : '+a.transparent+",",'\t\t"opacity" : '+a.opacity+",",'\t\t"wireframe" : '+a.wireframe+",",'\t\t"wireframeLinewidth" : '+a.wireframeLinewidth,"\t}","}"];else a instanceof THREE.MeshLambertMaterial?b=["\t"+f(z(a))+": {",'\t"type"    : "MeshLambertMaterial",','\t"parameters"  : {','\t\t"color"  : '+a.color.getHex()+",",'\t\t"ambient"  : '+a.ambient.getHex()+
",",'\t\t"emissive"  : '+a.emissive.getHex()+",",a.map?'\t\t"map" : '+f(F(a.map))+",":"",a.envMap?'\t\t"envMap" : '+f(F(a.envMap))+",":"",a.specularMap?'\t\t"specularMap" : '+f(F(a.specularMap))+",":"",a.lightMap?'\t\t"lightMap" : '+f(F(a.lightMap))+",":"",'\t\t"reflectivity"  : '+a.reflectivity+",",'\t\t"transparent" : '+a.transparent+",",'\t\t"opacity" : '+a.opacity+",",'\t\t"wireframe" : '+a.wireframe+",",'\t\t"wireframeLinewidth" : '+a.wireframeLinewidth,"\t}","}"]:a instanceof THREE.MeshPhongMaterial?
b=["\t"+f(z(a))+": {",'\t"type"    : "MeshPhongMaterial",','\t"parameters"  : {','\t\t"color"  : '+a.color.getHex()+",",'\t\t"ambient"  : '+a.ambient.getHex()+",",'\t\t"emissive"  : '+a.emissive.getHex()+",",'\t\t"specular"  : '+a.specular.getHex()+",",'\t\t"shininess" : '+a.shininess+",",a.map?'\t\t"map" : '+f(F(a.map))+",":"",a.envMap?'\t\t"envMap" : '+f(F(a.envMap))+",":"",a.specularMap?'\t\t"specularMap" : '+f(F(a.specularMap))+",":"",a.lightMap?'\t\t"lightMap" : '+f(F(a.lightMap))+",":"",a.normalMap?
'\t\t"normalMap" : '+f(F(a.normalMap))+",":"",a.bumpMap?'\t\t"bumpMap" : '+f(F(a.bumpMap))+",":"",'\t\t"bumpScale"  : '+a.bumpScale+",",'\t\t"reflectivity"  : '+a.reflectivity+",",'\t\t"transparent" : '+a.transparent+",",'\t\t"opacity" : '+a.opacity+",",'\t\t"wireframe" : '+a.wireframe+",",'\t\t"wireframeLinewidth" : '+a.wireframeLinewidth,"\t}","}"]:a instanceof THREE.MeshDepthMaterial?b=["\t"+f(z(a))+": {",'\t"type"    : "MeshDepthMaterial",','\t"parameters"  : {','\t\t"transparent" : '+a.transparent+
",",'\t\t"opacity" : '+a.opacity+",",'\t\t"wireframe" : '+a.wireframe+",",'\t\t"wireframeLinewidth" : '+a.wireframeLinewidth,"\t}","}"]:a instanceof THREE.MeshNormalMaterial?b=["\t"+f(z(a))+": {",'\t"type"    : "MeshNormalMaterial",','\t"parameters"  : {','\t\t"transparent" : '+a.transparent+",",'\t\t"opacity" : '+a.opacity+",",'\t\t"wireframe" : '+a.wireframe+",",'\t\t"wireframeLinewidth" : '+a.wireframeLinewidth,"\t}","}"]:a instanceof THREE.MeshFaceMaterial&&(b=["\t"+f(z(a))+": {",'\t"type"    : "MeshFaceMaterial",',
'\t"parameters"  : {}',"}"]);return w(b,"\n\t\t")}function t(a){a=["\t"+f(F(a))+": {",'\t"url"    : "'+a.sourceFile+'",','\t"repeat" : '+c(a.repeat)+",",'\t"offset" : '+c(a.offset)+",",'\t"magFilter" : '+g(a.magFilter)+",",'\t"minFilter" : '+g(a.minFilter)+",",'\t"anisotropy" : '+a.anisotropy,"}"];return w(a,"\n\t\t")}function r(a){a=a instanceof THREE.Fog?["\t"+f(J(a))+": {",'\t"type"  : "linear",','\t"color" : '+e(a.color)+",",'\t"near"  : '+a.near+",",'\t"far"   : '+a.far,"}"]:a instanceof THREE.FogExp2?
["\t"+f(J(a))+": {",'\t"type"    : "exp2",','\t"color"   : '+e(a.color)+",",'\t"density" : '+a.density,"}"]:[];return w(a,"\n\t\t")}function w(a,b,c){for(var d=[],e=0;e<a.length;e++){var f=a[e];f&&(c&&(f=h(c)+f),d.push(f))}return d.join(b)}function x(a){return a.name?a.name:"Object_"+a.id}function v(a){return a.name?a.name:"Geometry_"+a.id}function z(a){return a.name?a.name:"Material_"+a.id}function F(a){return a.name?a.name:"Texture_"+a.id}function J(a){return a.name?a.name:"Default fog"}var C=d(a.position),
A=d(a.rotation),y=d(a.scale),B=0,K=0,M=0,S=0,P=[],X=[],H=[],E=[],G={},U={},O={},V=function(a){!a||a.id in O||(O[a.id]=!0,H.push(t(a)),S+=1)},ha=[];b(a,0);var ma=ha.join("\n");a.fog&&E.push(r(a.fog));var ga=w(P,",\n\n\t"),D=w(X,",\n\n\t"),fa=w(H,",\n\n\t"),E=w(E,",\n\n\t"),I=null;a.traverse(function(a){a instanceof THREE.Camera&&a.userData.active&&(I=a)});var da=f(I?x(I):"");a=f(a.fog?J(a.fog):"");C=['{\n\t"metadata": {\n\t\t"formatVersion" : 3.2,\n\t\t"type"\t\t: "scene",\n\t\t"generatedBy"\t: "SceneExporter",',
'\t\t"objects"       : '+B+",",'\t\t"geometries"    : '+K+",",'\t\t"materials"     : '+M+",",'\t\t"textures"      : '+S,'\t},\n\n\t"urlBaseType": "relativeToScene",\n\n\t"objects" :\n\t{',ma,'\t},\n\n\t"geometries" :\n\t{',"\t"+ga,'\t},\n\n\t"materials" :\n\t{',"\t"+D,'\t},\n\n\t"textures" :\n\t{',"\t"+fa,'\t},\n\n\t"fogs" :\n\t{',"\t"+E,'\t},\n\n\t"transform" :\n\t{','\t\t"position"  : '+C+",",'\t\t"rotation"  : '+A+",",'\t\t"scale"     : '+y,'\t},\n\n\t"defaults" :\n\t{','\t\t"camera"  : '+da+",",
'\t\t"fog"  \t  : '+a,"\t}\n}"].join("\n");return JSON.parse(C)}};THREE.Object3D.prototype.setVisibility=function(a){console.log("setVisibility",a);this.visible=a};THREE.Object3D.prototype.getVisibility=function(){return this.visible};THREE.Object3D.prototype.getNamespaces=function(a){void 0===a&&(a=[]);for(var b=0,c=this.children.length;b<c;b++){if(void 0!==this.children[b].name){var d=this.children[b].name.split(":");1<d.length&&-1===a.indexOf(d[0])&&a.push(d[0])}this.children[b].getNamespaces(a)}return a};
THREE.Object3D.prototype.getObjectWithNamespace=function(a,b){void 0===b&&(b=[]);for(var c,d=0,e=this.children.length;d<e;d++)c=this.children[d].getNamespace(),c===a&&b.push(this.children[d]),this.children[d].getObjectWithNamespace(a,b);return b};THREE.Object3D.prototype.getNamespace=function(){var a=this.name.split(":"),b=a.length-1;if(!(1>b)){for(var c=a[0],d=1;d<b;d++)c+=":"+a[d];return c}};
THREE.Object3D.prototype.getUniqueNamespace=function(a){console.log("Object3D.getUniqueNamespace",a);var b=a.length;":"===a.slice(b-1,b)&&(a=a.slice(0,b-1));for(var b=this.getNamespaces(),c=a,d=1;-1!==b.indexOf(c);)c=a+d,d+=1;return c+":"};THREE.Object3D.prototype.getObjectsByName=function(a){for(var b={},c=0,d=a.length;c<d;c++)b[a[c]]=this.getObjectByName(a[c],!0),void 0===b[a[c]]&&console.warn();return b};
THREE.Object3D.prototype.getObjectOfInstance=function(a,b){void 0===b&&(b=[]);for(var c=0,d=this.children.length;c<d;c++)this.children[c]instanceof a&&b.push(this.children[c]),this.children[c].getObjectOfInstance(a,b);return b};THREE.Object3D.prototype.getObjectOfNameAndInstance=function(a,b,c){void 0===c&&(c=[]);for(var d=0,e=this.children.length;d<e;d++)this.children[d]instanceof b&&this.children[d].name===a&&c.push(this.children[d]),this.children[d].getObjectOfNameAndInstance(a,b,c);return c};
THREE.Object3D.prototype.getObjectByUuid=function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.uuid===a||!0===b&&(e=e.getObjectByUuid(a,b),void 0!==e))return e}};THREE.Object3D.prototype.getObjectWithProperty=function(a,b){void 0===b&&(b=[]);this.hasOwnProperty(a)&&b.push(this);for(var c=0,d=this.children.length;c<d;c++)this.children[c].getObjectWithProperty(a,b);return b};
THREE.Object3D.prototype.getObjectOfType=function(a,b){void 0===b&&(b=[]);for(var c=0,d=this.children.length;c<d;c++)this.children[c].type===a&&(b.push(this.children[c]),this.children[c].getObjectOfType(a,b));return b};THREE.Object3D.prototype.getChannels=function(){void 0===this.animChannels&&this.setDefaultChannels();return this.animChannels};THREE.Object3D.prototype.setChannels=function(a){this.animChannels=a};
THREE.Object3D.prototype.getChannel=function(a){var b=void 0,c=void 0;-1!==a.indexOf("translate")?(b="position",c=a.substr(a.length-1).toLowerCase()):-1!==a.indexOf("rotate")?(b="rotation",c="_"+a.substr(a.length-1).toLowerCase()):-1!==a.indexOf("scale")&&(b="scale",c=a.substr(a.length-1).toLowerCase());void 0===b&&this.hasOwnProperty("custom")&&-1!==this.custom.hasOwnProperty(a)&&(b="custom",c=a);void 0===b&&this.hasOwnProperty("shapes")&&-1!==this.shapes.hasOwnProperty(a)&&(b="shapes",c=a);return[b,
c]};THREE.Object3D.prototype.getNiceName=function(a,b){var c;switch(a){case "position":c="translate"+b.toUpperCase();break;case "rotation":c="order"===b?"rotateOrder":"rotate"+b.toUpperCase();break;case "scale":c="scale"+b.toUpperCase();break;case "shapes":case "custom":c=b;break;default:c=(a+"-"+b).toCamel()}return _.str.titleize(_.str.humanize(c))};THREE.Object3D.prototype.getChannelGroupIndex=function(a){var b=this.animChannels.length,c;for(c=0;c<b;c++)if(this.animChannels[c][0]===a)return c;return-1};
THREE.Object3D.prototype.getChannelNameIndex=function(a,b){console.log("getChannelNameIndex",a,b);var c=this.getChannelGroupIndex(a),d=this.animChannels[c][1].length,e;for(e=0;e<d;e++)if(this.animChannels[c][1][e]===b)return e;return-1};THREE.Object3D.prototype.getChannelRange=function(a,b){var c=this.getChannelGroupIndex(a),d=this.getChannelNameIndex(a,b);if(-1==d)console.log("Unable to find channel name");else return this.animChannels[c][2][d]};
THREE.Object3D.prototype.setChannelRange=function(a,b,c){var d=this.getChannelGroupIndex(a);a=this.getChannelNameIndex(a,b);-1==a?console.log("Unable to find channel name"):this.animChannels[d][2][a]=c};THREE.Object3D.prototype.addToChannelRange=function(a,b,c){var d=this.getChannelGroupIndex(a);a=this.getChannelNameIndex(a,b);-1==a?console.log("Unable to find channel name"):this.animChannels[d][2][a].push(c)};
THREE.Object3D.prototype.getChannelType=function(a,b){console.log("getChannelRange",a,b);var c=this.getChannelGroupIndex(a),d=this.getChannelNameIndex(a,b);if(-1==d)console.log("Unable to find channel name");else return this.animChannels[c][3][d]};THREE.Object3D.prototype.setChannelType=function(a,b,c){console.log("setChannelRange",a,b,c);var d=this.getChannelGroupIndex(a);a=this.getChannelNameIndex(a,b);-1==a?console.log("Unable to find channel name"):this.animChannels[d][3][a]=c};
THREE.Object3D.prototype.getChannelValues=function(){var a,b,c,d=this.getChannels(),e,f,g=[];for(e=0;e<d.length;e++){a=this[d[e][0]];c=[];for(f=0;f<d[e][1].length;f++)b=a[d[e][1][f]],c.push(b);g.push([d[e][0],d[e][1],c])}console.log("\tresult:",g);return g};
THREE.Object3D.prototype.setChannelValues=function(a){var b,c,d;for(b=0;b<a.length;b++)for(d=this[a[b][0]],c=0;c<a[b][1].length;c++)d.hasOwnProperty(a[b][1][c])||"number"==typeof d[a[b][1][c]]?d[a[b][1][c]]=a[b][2][c]:console.log("\t\tUnable to apply value",a[b][2][c],"to",a[b][1][c])};THREE.Object3D.prototype.connectChannelTo=function(a,b){a[b]=this[b];this.driveChannel={};this.driveChannel[b]=a.name};THREE.Object3D.prototype.setChannelsEmpty=function(){this.animChannels=[]};
THREE.Object3D.prototype._getChannelsTranslate=function(){return["position",["x","y","z"],[[-Infinity,Infinity],[-Infinity,Infinity],[-Infinity,Infinity]],["number","number","number"]]};THREE.Object3D.prototype._getChannelsRotate=function(){return["rotation",["x","y","z","order"],[[-Infinity,Infinity],[-Infinity,Infinity],[-Infinity,Infinity],"XYZ YZX ZXY XZY YXZ ZYX".split(" ")],["number","number","number","enum"]]};
THREE.Object3D.prototype._getChannelsScale=function(){return["scale",["x","y","z"],[[-Infinity,Infinity],[-Infinity,Infinity],[-Infinity,Infinity]],["number","number","number"]]};THREE.Object3D.prototype.setChannelsTranslate=function(){this.animChannels=[this._getChannelsTranslate()]};THREE.Object3D.prototype.setChannelsRotate=function(){this.animChannels=[this._getChannelsRotate()]};
THREE.Object3D.prototype.setChannelsTranslateAndRotate=function(){this.animChannels=[this._getChannelsTranslate(),this._getChannelsRotate()]};THREE.Object3D.prototype.setChannelsScale=function(){this.animChannels=[this._getChannelsScale()]};THREE.Object3D.prototype.setDefaultChannels=function(){this.animChannels=[this._getChannelsTranslate(),this._getChannelsRotate(),this._getChannelsScale()]};
THREE.Object3D.prototype.hasChannelGroup=function(a){if(void 0===this.animChannels)return!1;var b,c;b=0;for(c=this.animChannels.length;b<c;b++)if(this.animChannels[b][0]===a)return!0;return!1};THREE.Object3D.prototype.getChannelsFromGroup=function(a){if(void 0===this.animChannels)return[];var b,c;b=0;for(c=this.animChannels.length;b<c;b++)if(this.animChannels[b][0]===a)return this.animChannels[b][1];return[]};
THREE.Object3D.prototype.isAnimatable=function(a,b){if(void 0===this.animChannels)return!1;var c,d,e,f;c=0;for(d=this.animChannels.length;c<d;c++)if(this.animChannels[c][0]===a)for(e=0,f=this.animChannels[c][1].length;e<f;e++)if(this.animChannels[c][1][e]===b)return!0;return!1};THREE.Object3D.prototype.removeChannelGroup=function(a){var b,c;b=0;for(c=this.animChannels.length;b<c;b++)this.animChannels[b][0]===a&&this.animChannels.splice(b,1)};
THREE.Object3D.prototype.removeChannel=function(a,b){console.log("removeChannel",a,b);if(void 0===this.animChannels)return!1;var c,d;c=0;for(d=this.animChannels.length;c<d;c++)if(this.animChannels[c][0]===a){var e=this.animChannels[c][1].indexOf(b);-1!==e&&this.animChannels[c][1].splice(e,1)}};
THREE.Object3D.prototype.addChannel=function(a,b,c,d){void 0===this.animChannels&&(this.animChannels=[]);void 0===c&&(c=[-Infinity,Infinity]);void 0===d&&(d="number");var e=-1,f,g;f=0;for(g=this.animChannels.length;f<g;f++)this.animChannels[f][0]===a&&(e=f);if(-1===e)this.animChannels.push([a,[b],[c],[d]]);else{a=-1;f=0;for(g=this.animChannels[e][1].length;f<g;f++)this.animChannels[e][1][f]===b&&(a=f);-1===a&&(this.animChannels[e][1].push(b),this.animChannels[e][2].push(c),this.animChannels[e][3].push(d))}};
THREE.Object3D.prototype.getParent=function(){return this.parent};THREE.Object3D.prototype.isAnimated=function(){return void 0===this.animCurves||0===this.animCurves.length?!1:!0};THREE.Object3D.prototype.isChannelAnimated=function(a){return null===this.getAnimCurveFromChannel(a)?!1:!0};
THREE.Object3D.prototype.getAnimCurveFromChannel=function(a){if(void 0===this.animCurves||0===this.animCurves.length)return null;for(var b=0;b<this.animCurves.length;b++)if(this.animCurves[b].attr[0]===a[0]&&this.animCurves[b].attr[1]===a[1])return this.animCurves[b];return null};THREE.Object3D.prototype.getAnimCurves=function(){return void 0===this.animCurves||0===this.animCurves.length?[]:this.animCurves};
THREE.Object3D.prototype.addAnimCurve=function(a){void 0===this.animCurves&&(this.animCurves=[]);-1===this.animCurves.indexOf(a)&&this.animCurves.push(a)};THREE.Object3D.prototype.removeAnimCurve=function(a){void 0!==this.animCurves&&(a=this.animCurves.indexOf(a),-1!=a&&this.animCurves.splice(a,1))};THREE.Object3D.prototype.hasKeysSelected=function(){var a,b;a=0;for(b=this.animCurves.length;a<b;a++)if(!0===this.animCurves[a].hasSelection())return!0;return!1};
THREE.Object3D.prototype.keyChannel=function(a,b,c,d,e){var f=this.getAnimCurveFromChannel([d,e]),g=!1;if(null===f){f=new MM.AnimCurve(this,[d,e]);this.addAnimCurve(f);switch(e){case "x":f.setColor(16711680);break;case "y":f.setColor(65280);break;case "z":f.setColor(255)}g=!0}f.add(a,this[d][e],b,c);return g?f:null};
THREE.Object3D.prototype.keyAnimated=function(a,b,c){if(void 0===this.animCurves)return!1;for(var d=!1,e,f,g,h=0;h<this.animCurves.length;h++)e=this.animCurves[h],f=e.getChannelValue(),g=e.getValue(a),f!==g&&(e.add(a,f,b,c),d=!0);return d};
THREE.Object3D.prototype.keyAll=function(a,b,c,d){for(var e=[],f=this.getChannels(),g=0;g<f.length;g++)if(void 0===d||-1===d.indexOf(f[g][0]))for(var h=0;h<f[g][1].length;h++)if("rotation"!==f[g][0]||"order"!==f[g][1][h])if("custom"!==f[g][0]||"spaceSwitch"!==f[g][1][h]){var k=this.getAnimCurveFromChannel([f[g][0],f[g][1][h]]);null===k&&(k=new MM.AnimCurve(this,[f[g][0],f[g][1][h]]),this.addAnimCurve(k),"x"===f[g][1][h]?k.setColor(16711680):"y"===f[g][1][h]?k.setColor(65280):"z"===f[g][1][h]&&k.setColor(255),
e.push(k));k.add(a,this[f[g][0]][f[g][1][h]],b,c)}return e};THREE.Object3D.prototype.exportAnimation=function(){var a=[],b=this.getAnimCurves(),c;if(0<b.length)for(var d=0;d<b.length;d++)c=b[d].exportData(),a.push(c);return a};THREE.Object3D.prototype.importAnimation=function(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=new MM.AnimCurve(this,a[c].attr);e.importData(a[c]);this.addAnimCurve(e);b.push(e)}return b};
THREE.Object3D.prototype.updateAnimation=function(a){var b,c;if(void 0!==this.animCurves)for(var d=0,e=this.animCurves.length;d<e;d++)b=this.animCurves[d],c=this[b.attr[0]],c[b.attr[1]].constructor==THREE.Number?c[b.attr[1]].value=b.getValue(a):c[b.attr[1]]=b.getValue(a);b=0;for(c=this.children.length;b<c;b++)this.children[b].updateAnimation(a)};
THREE.Object3D.prototype.getTransformationData=function(){console.log("getTransformationData");return[this.position.x,this.position.y,this.position.z,this.rotation._x,this.rotation._y,this.rotation._z,this.rotation._order,this.scale.x,this.scale.y,this.scale.z]};THREE.Object3D.prototype.setTransformationData=function(a){console.log("setTransformationData",a);this.position.set(a[0],a[1],a[2]);this.rotation.set(a[3],a[4],a[5],a[6]);this.scale.set(a[7],a[8],a[9])};
THREE.Object3D.prototype.addInbetween=function(a,b){console.log("inbetween",a,b);var c;c=void 0===b||"Spaceswitch"===b?new MM.Spaceswitch:"ParentMaster"===b?new MM.ParentMaster:new THREE.Object3D;c.name=a;this.parent.add(c);c.applyMatrix(this.matrix);c.updateMatrixWorld();c.setParent(this);return c};
THREE.Object3D.prototype.setParent=function(a){if(void 0!==a){var b=new THREE.Matrix4;b.getInverse(this.matrixWorld);var c=new THREE.Matrix4;c.multiplyMatrices(a.matrixWorld,b);THREE.Object3D.prototype.add.call(this,a);a.position.getPositionFromMatrix(c);b=new THREE.Matrix4;b.extractRotation(c);a.quaternion.setFromRotationMatrix(b)}};THREE.Object3D.prototype.getWorldPosition=function(){return(new THREE.Vector3).set(this.matrixWorld.elements[12],this.matrixWorld.elements[13],this.matrixWorld.elements[14])};
THREE.Object3D.prototype.getWorldUp=function(){return(new THREE.Vector3).set(this.matrixWorld.elements[4],this.matrixWorld.elements[5],this.matrixWorld.elements[6])};THREE.Object3D.prototype.getWorldSide=function(){return(new THREE.Vector3).set(this.matrixWorld.elements[0],this.matrixWorld.elements[1],this.matrixWorld.elements[2])};THREE.Object3D.prototype.setRotationFromEuler=function(a){this.quaternion.setFromEuler(a,!1)};
THREE.Object3D.prototype.setChild=function(a){var b=new THREE.Matrix4;b.getInverse(this.matrixWorld);var c=new THREE.Matrix4;c.multiplyMatrices(a.matrixWorld,b);THREE.Object3D.prototype.add.call(this,a);a.position.getPositionFromMatrix(c);b=new THREE.Matrix4;b.extractRotation(c);a.quaternion.setFromRotationMatrix(b)};THREE.Scene.prototype.removeAllOfInstance=function(a){a=this.getObjectOfInstance(a);for(var b=0,c=a.length;b<c;b++)this.__removeObject(a[b])};THREE.Scene.prototype.getObjectOfInstance=function(a){for(var b=[],c=0;c<this.__objects.length;c++)this.__objects[c]instanceof a&&b.push(this.__objects[c]);return b};THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-a,c+a,d+b,d-b,this.near,this.far)};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){var a=THREE.Math.radToDeg(2*Math.atan(Math.tan(.5*THREE.Math.degToRad(this.fov))/this.zoom));if(this.fullWidth){var b=this.fullWidth/this.fullHeight,a=Math.tan(THREE.Math.degToRad(.5*a))*this.near,c=-a,d=b*c,b=Math.abs(b*a-d),c=Math.abs(a-c);this.projectionMatrix.makeFrustum(d+this.x*b/this.fullWidth,d+(this.x+this.width)*b/this.fullWidth,a-(this.y+this.height)*c/this.fullHeight,a-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(a,
this.aspect,this.near,this.far)};THREE.Matrix4.prototype.unify=function(){var a=this.elements,b=(new THREE.Vector3(a[0],a[1],a[2])).normalize(),c=(new THREE.Vector3(a[4],a[5],a[6])).normalize(),d=(new THREE.Vector3(a[8],a[9],a[10])).normalize();a[0]=b.x;a[1]=b.y;a[2]=b.z;a[4]=c.x;a[5]=c.y;a[6]=c.z;a[8]=d.x;a[9]=d.y;a[10]=d.z;return this};
THREE.Matrix4.prototype.makeRotationFromEuler=function(a){!1===a instanceof THREE.Euler&&console.error("ERROR: Matrix's .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var b=this.elements,c=a.x/THREErad,d=a.y/THREErad,e=a.z/THREErad,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*h;var k=f*e,l=c*h,m=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-m*d;b[9]=-c*g;b[2]=m-a*d;
b[6]=l+k*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,k=g*e,l=d*h,m=d*e,b[0]=a+m*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=m+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*h,k=g*e,l=d*h,m=d*e,b[0]=a-m*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=m-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,k=f*e,l=c*h,m=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+m,b[1]=g*e,b[5]=m*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(a=f*g,k=f*d,l=c*g,m=c*d,b[0]=g*h,b[4]=m-a*e,b[8]=l*e+k,b[1]=e,b[5]=
f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-m*e):"XZY"===a.order&&(a=f*g,k=f*d,l=c*g,m=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+m,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=m*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this};THREE.Matrix4.prototype.isEquivalent=function(a){var b=this.elements;a=a.elements;for(var c=0;16>c;c++)if(b[c]!=a[c])return!1;return!0};
THREE.Matrix4.prototype.lookAt=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g){var h=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);void 0===f&&(f=new THREE.Vector3(0,1,0));a.crossVectors(f,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());void 0===g?b.crossVectors(c,a):b.crossVectors(c,g);h[0]=a.x;h[4]=b.x;h[8]=c.x;h[1]=a.y;h[5]=b.y;h[9]=c.y;h[2]=a.z;h[6]=b.z;h[10]=c.z;return this}}();THREE.Euler.prototype.offsetUsingQuaternion=function(a){var b=new THREE.Euler;b.setFromQuaternion(a,this._order);a=b._x-this._x%180;180<Math.abs(a)&&(a%=180);90<Math.abs(a)&&(a+=0>a?180:-180);this._x+=a;a=b._y-this._y%180;180<Math.abs(a)&&(a%=180);90<Math.abs(a)&&(a+=0>a?180:-180);this._y+=a;b=b._z-this._z%180;180<Math.abs(b)&&(b%=180);90<Math.abs(b)&&(b+=0>b?180:-180);this._z+=b;this._updateQuaternion()};
THREE.Euler.prototype.setFromRotationMatrix=function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],f=d[4],g=d[8],h=d[1],k=d[5],l=d[9],m=d[2],p=d[6],d=d[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(c(g)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-f,e)):(this._x=Math.atan2(p,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-c(l)),.99999>Math.abs(l)?(this._y=Math.atan2(g,d),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-m,e),this._z=0)):"ZXY"===b?(this._x=
Math.asin(c(p)),.99999>Math.abs(p)?(this._y=Math.atan2(-m,d),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,e))):"ZYX"===b?(this._y=Math.asin(-c(m)),.99999>Math.abs(m)?(this._x=Math.atan2(p,d),this._z=Math.atan2(h,e)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===b?(this._z=Math.asin(c(h)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-m,e)):(this._x=0,this._y=Math.atan2(g,d))):"XZY"===b?(this._z=Math.asin(-c(f)),.99999>Math.abs(f)?(this._x=Math.atan2(p,k),this._y=Math.atan2(g,
e)):(this._x=Math.atan2(-l,d),this._y=0)):console.warn("WARNING: Euler.setFromRotationMatrix() given unsupported order: "+b);this._order=b;this._x*=THREE.Math.rad;this._y*=THREE.Math.rad;this._z*=THREE.Math.rad;this._updateQuaternion();return this};
THREE.Euler.prototype.setFromQuaternion=function(a,b,c){function d(a){return Math.min(Math.max(a,-1),1)}var e=a.x*a.x,f=a.y*a.y,g=a.z*a.z,h=a.w*a.w;b=b||this._order;"XYZ"===b?(this._x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-e-f+g),this._y=Math.asin(d(2*(a.x*a.z+a.y*a.w))),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+e-f-g)):"YXZ"===b?(this._x=Math.asin(d(2*(a.x*a.w-a.y*a.z))),this._y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-e-f+g),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-e+f-g)):"ZXY"===b?(this._x=Math.asin(d(2*(a.x*
a.w+a.y*a.z))),this._y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-e-f+g),this._z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-e+f-g)):"ZYX"===b?(this._x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-e-f+g),this._y=Math.asin(d(2*(a.y*a.w-a.x*a.z))),this._z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+e-f-g)):"YZX"===b?(this._x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-e+f-g),this._y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+e-f-g),this._z=Math.asin(d(2*(a.x*a.y+a.z*a.w)))):"XZY"===b?(this._x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-e+f-g),this._y=Math.atan2(2*(a.x*a.z+
a.y*a.w),h+e-f-g),this._z=Math.asin(d(2*(a.z*a.w-a.x*a.y)))):console.warn("WARNING: Euler.setFromQuaternion() given unsupported order: "+b);Math.abs(this._x)===Math.PI&&(this._x=0);Math.abs(this._y)===Math.PI&&(this._y=0);Math.abs(this._z)===Math.PI&&(this._z=0);this._order=b;this._x*=THREE.Math.rad;this._y*=THREE.Math.rad;this._z*=THREE.Math.rad;!1!==c&&this._updateQuaternion();return this};THREE.Quaternion.prototype.mSetFromAxisAngle=function(a,b){var c=a.x*a.x+a.y*a.y+a.z*a.z,d=.5*b;1E-10>=c?(this.z=this.y=this.x=0,this.w=1):(Math.cos(d),d=Math.sin(d),boolEquivalent(c,1,1E-10)||(d/=Math.sqrt(c)),this.x=d*a.x,this.y=d*a.y,this.z=d*a.z);this._updateEuler();return this};THREE.Quaternion.prototype.setFromAxisAngle=function(a,b){var c=b/THREE.Math.rad/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this._updateEuler();return this};
THREE.Quaternion.prototype.setFromEuler=function(a,b){if(!1===a instanceof THREE.Euler)throw Error("ERROR: Quaternion's .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var c=a._x/THREE.Math.rad,d=a._y/THREE.Math.rad,e=a._z/THREE.Math.rad,f=Math.cos(c/2),g=Math.cos(d/2),h=Math.cos(e/2),c=Math.sin(c/2),d=Math.sin(d/2),e=Math.sin(e/2);"XYZ"===a.order?(this._x=c*g*h+f*d*e,this._y=f*d*h-c*g*e,this._z=f*g*e+c*d*h,this._w=f*g*h-c*d*e):"YXZ"===a.order?
(this._x=c*g*h+f*d*e,this._y=f*d*h-c*g*e,this._z=f*g*e-c*d*h,this._w=f*g*h+c*d*e):"ZXY"===a.order?(this._x=c*g*h-f*d*e,this._y=f*d*h+c*g*e,this._z=f*g*e+c*d*h,this._w=f*g*h-c*d*e):"ZYX"===a.order?(this._x=c*g*h-f*d*e,this._y=f*d*h+c*g*e,this._z=f*g*e-c*d*h,this._w=f*g*h+c*d*e):"YZX"===a.order?(this._x=c*g*h+f*d*e,this._y=f*d*h+c*g*e,this._z=f*g*e-c*d*h,this._w=f*g*h-c*d*e):"XZY"===a.order&&(this._x=c*g*h-f*d*e,this._y=f*d*h-c*g*e,this._z=f*g*e+c*d*h,this._w=f*g*h+c*d*e);!1!==b&&this._updateEuler();
return this};THREE.Quaternion.prototype.setFromVectors=function(a,b){var c=Math.min(Math.max(a.dot(b),-1),1),d=Math.acos(c),e=(new THREE.Vector3).crossVectors(a,b);0>c&&1E-5>e.length()&&(c=a.getDominantAxis(),e[c]=-a[(c+1)%3],e[(c+1)%3]=a[c],e[(c+2)%3]=0);e.normalize();this.setFromAxisAngle(e,d*THREE.Math.rad);return this};THREE.Vector3.prototype.norm=function(){var a=this.x+this.y+this.z;this.x/=a;this.y/=a;this.z/=a;return this};THREE.Vector3.prototype.angle=function(a){var b=new THREE.Vector3;b.copy(this);b.normalize();var c=new THREE.Vector3;c.copy(a);c.normalize();a=b.dot(c.normalize());b=0;return b=1<=a?0:-1>=a?THREEkPi:Math.acos(a)};THREE.Vector3.prototype.divide=function(a){this.x=0==this.x||0==a.x?0:this.x/a.x;this.y=0==this.y||0==a.y?0:this.y/a.y;this.z=0==this.z||0==a.z?0:this.z/a.z;return this};
THREE.Vector3.prototype.getDominantAxis=function(){var a=Math.abs(this.x),b=Math.abs(this.y),c=Math.abs(this.z);return a>b?a>c?0:2:b>c?1:2};THREE.Vector3.prototype.isEquivalent=function(a){return this.x==a.x&&this.y==a.y&&this.z==a.z?!0:!1};THREE.Vector3.prototype.isEquivalentWithinTolerance=function(a,b){var c=new THREE.Vector3;c.subVectors(this,a);return c.length()<b?!0:!1};
THREE.Vector3.prototype.isParalell=function(a,b){void 0==b&&(b=1E-5);var c=new THREE.Vector3,c=c.copy(this);c.normalize();var d=new THREE.Vector3;d.copy(a);d.normalize();c=c.dot(d);c=Math.abs(c);return 1<c?c-1<=b:1-c<=b};THREE.SkinnedMesh.prototype.init=function(a){console.log("SkinnedMesh.init");this.useVertexTexture=void 0!==a?a:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];this.boneInverses=void 0;this.geometry&&void 0!==this.geometry.bones&&(console.log("\tinit skin data"),this.bones=this.geometry.bones,a=this.bones.length,this.useVertexTexture?(console.log("\tinit skin texture data"),a=256<a?64:64<a?32:16<a?16:8,console.log("\tsize",a),this.boneTextureHeight=this.boneTextureWidth=
a,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):(console.log("\tinit skin matrix data"),this.boneMatrices=new Float32Array(16*a)),this.pose());return this};
THREE.SkinnedMesh.prototype.setWeights=function(a,b,c){console.log("SkinnedMesh.setWeights");console.log("\tvertices",a);console.log("\tinfluences",b);console.log("\tweights",c);console.log("\tCurrent number of influences",this.bones.length);var d,e,f,g,h=[],k=!1;d=0;for(e=b.length;d<e;d++){k=!1;f=0;for(g=this.bones.length;f<g;f++)b[d]===this.bones[f]&&(h.push(f),k=!0);k||(console.log("Influence does not exist yet. Adding it now..."),h.push(this.bones.length),this.geometry.bones.push(b[d]),b[d].setBindPose())}if(h.length!==
c.length)console.log("\tNumber of influence indices does not match the number of weights");else{console.log("\tFound all data");console.log("\tInfluence indices",h);b=new THREE.Vector4;f=new THREE.Vector4;switch(c.length){case 1:b.set(c[0],0,0,0);f.set(h[0],0,0,0);break;case 2:b.set(c[0],c[1],0,0);f.set(h[0],h[1],0,0);break;case 3:b.set(c[0],c[1],c[2],0);f.set(h[0],h[1],h[2],0);break;default:console.log("\tUnsupported mode. Expecting 1, 2 or 3.")}console.log("\tInput weight data",b);console.log("\tInput index data",
f);d=0;for(e=a.length;d<e;d++)console.log("\t",d,"vertex",a[d],"weight",b),console.log("\t",d,"vertex",a[d],"index",f),this.geometry.skinWeights[a[d]]=b,this.geometry.skinIndices[a[d]]=f;this.init();this.geometry.verticesNeedUpdate=!0}};
